
Project_CDAC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800e018  0800e018  0001e018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5f0  0800e5f0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5f0  0800e5f0  0001e5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5f8  0800e5f8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5f8  0800e5f8  0001e5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5fc  0800e5fc  0001e5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          000147c4  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200149ac  200149ac  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ba4b  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c58  00000000  00000000  0003bca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001940  00000000  00000000  0003f900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001388  00000000  00000000  00041240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027563  00000000  00000000  000425c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c6e8  00000000  00000000  00069b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f20cd  00000000  00000000  00086213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008084  00000000  00000000  001782e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00180364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dffc 	.word	0x0800dffc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800dffc 	.word	0x0800dffc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001328c 	.word	0x2001328c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	; 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	3c01      	subs	r4, #1
 800045c:	bf28      	it	cs
 800045e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000462:	d2e9      	bcs.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_dmul>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800069e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006a6:	bf1d      	ittte	ne
 80006a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ac:	ea94 0f0c 	teqne	r4, ip
 80006b0:	ea95 0f0c 	teqne	r5, ip
 80006b4:	f000 f8de 	bleq	8000874 <__aeabi_dmul+0x1dc>
 80006b8:	442c      	add	r4, r5
 80006ba:	ea81 0603 	eor.w	r6, r1, r3
 80006be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ca:	bf18      	it	ne
 80006cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006d8:	d038      	beq.n	800074c <__aeabi_dmul+0xb4>
 80006da:	fba0 ce02 	umull	ip, lr, r0, r2
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ee:	f04f 0600 	mov.w	r6, #0
 80006f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006f6:	f09c 0f00 	teq	ip, #0
 80006fa:	bf18      	it	ne
 80006fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000700:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000704:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000708:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800070c:	d204      	bcs.n	8000718 <__aeabi_dmul+0x80>
 800070e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000712:	416d      	adcs	r5, r5
 8000714:	eb46 0606 	adc.w	r6, r6, r6
 8000718:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800071c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000720:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000724:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000728:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800072c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000730:	bf88      	it	hi
 8000732:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000736:	d81e      	bhi.n	8000776 <__aeabi_dmul+0xde>
 8000738:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800073c:	bf08      	it	eq
 800073e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000742:	f150 0000 	adcs.w	r0, r0, #0
 8000746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000750:	ea46 0101 	orr.w	r1, r6, r1
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000760:	bfc2      	ittt	gt
 8000762:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000766:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800076a:	bd70      	popgt	{r4, r5, r6, pc}
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000770:	f04f 0e00 	mov.w	lr, #0
 8000774:	3c01      	subs	r4, #1
 8000776:	f300 80ab 	bgt.w	80008d0 <__aeabi_dmul+0x238>
 800077a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800077e:	bfde      	ittt	le
 8000780:	2000      	movle	r0, #0
 8000782:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000786:	bd70      	pople	{r4, r5, r6, pc}
 8000788:	f1c4 0400 	rsb	r4, r4, #0
 800078c:	3c20      	subs	r4, #32
 800078e:	da35      	bge.n	80007fc <__aeabi_dmul+0x164>
 8000790:	340c      	adds	r4, #12
 8000792:	dc1b      	bgt.n	80007cc <__aeabi_dmul+0x134>
 8000794:	f104 0414 	add.w	r4, r4, #20
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f305 	lsl.w	r3, r0, r5
 80007a0:	fa20 f004 	lsr.w	r0, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b8:	fa21 f604 	lsr.w	r6, r1, r4
 80007bc:	eb42 0106 	adc.w	r1, r2, r6
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 040c 	rsb	r4, r4, #12
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f304 	lsl.w	r3, r0, r4
 80007d8:	fa20 f005 	lsr.w	r0, r0, r5
 80007dc:	fa01 f204 	lsl.w	r2, r1, r4
 80007e0:	ea40 0002 	orr.w	r0, r0, r2
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ec:	f141 0100 	adc.w	r1, r1, #0
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 0520 	rsb	r5, r4, #32
 8000800:	fa00 f205 	lsl.w	r2, r0, r5
 8000804:	ea4e 0e02 	orr.w	lr, lr, r2
 8000808:	fa20 f304 	lsr.w	r3, r0, r4
 800080c:	fa01 f205 	lsl.w	r2, r1, r5
 8000810:	ea43 0302 	orr.w	r3, r3, r2
 8000814:	fa21 f004 	lsr.w	r0, r1, r4
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	fa21 f204 	lsr.w	r2, r1, r4
 8000820:	ea20 0002 	bic.w	r0, r0, r2
 8000824:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f094 0f00 	teq	r4, #0
 8000838:	d10f      	bne.n	800085a <__aeabi_dmul+0x1c2>
 800083a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800083e:	0040      	lsls	r0, r0, #1
 8000840:	eb41 0101 	adc.w	r1, r1, r1
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf08      	it	eq
 800084a:	3c01      	subeq	r4, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1a6>
 800084e:	ea41 0106 	orr.w	r1, r1, r6
 8000852:	f095 0f00 	teq	r5, #0
 8000856:	bf18      	it	ne
 8000858:	4770      	bxne	lr
 800085a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	eb43 0303 	adc.w	r3, r3, r3
 8000864:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3d01      	subeq	r5, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1c6>
 800086e:	ea43 0306 	orr.w	r3, r3, r6
 8000872:	4770      	bx	lr
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800087c:	bf18      	it	ne
 800087e:	ea95 0f0c 	teqne	r5, ip
 8000882:	d00c      	beq.n	800089e <__aeabi_dmul+0x206>
 8000884:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000888:	bf18      	it	ne
 800088a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088e:	d1d1      	bne.n	8000834 <__aeabi_dmul+0x19c>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a2:	bf06      	itte	eq
 80008a4:	4610      	moveq	r0, r2
 80008a6:	4619      	moveq	r1, r3
 80008a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ac:	d019      	beq.n	80008e2 <__aeabi_dmul+0x24a>
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	d102      	bne.n	80008ba <__aeabi_dmul+0x222>
 80008b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008b8:	d113      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	d105      	bne.n	80008cc <__aeabi_dmul+0x234>
 80008c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008c4:	bf1c      	itt	ne
 80008c6:	4610      	movne	r0, r2
 80008c8:	4619      	movne	r1, r3
 80008ca:	d10a      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
 80008e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ea:	bd70      	pop	{r4, r5, r6, pc}

080008ec <__aeabi_ddiv>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fa:	bf1d      	ittte	ne
 80008fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000900:	ea94 0f0c 	teqne	r4, ip
 8000904:	ea95 0f0c 	teqne	r5, ip
 8000908:	f000 f8a7 	bleq	8000a5a <__aeabi_ddiv+0x16e>
 800090c:	eba4 0405 	sub.w	r4, r4, r5
 8000910:	ea81 0e03 	eor.w	lr, r1, r3
 8000914:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000918:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800091c:	f000 8088 	beq.w	8000a30 <__aeabi_ddiv+0x144>
 8000920:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000924:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000928:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800092c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000930:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000934:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000938:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800093c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000940:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000944:	429d      	cmp	r5, r3
 8000946:	bf08      	it	eq
 8000948:	4296      	cmpeq	r6, r2
 800094a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800094e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000952:	d202      	bcs.n	800095a <__aeabi_ddiv+0x6e>
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	1ab6      	subs	r6, r6, r2
 800095c:	eb65 0503 	sbc.w	r5, r5, r3
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800096a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009cc:	d018      	beq.n	8000a00 <__aeabi_ddiv+0x114>
 80009ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ea:	d1c0      	bne.n	800096e <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f0:	d10b      	bne.n	8000a0a <__aeabi_ddiv+0x11e>
 80009f2:	ea41 0100 	orr.w	r1, r1, r0
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009fe:	e7b6      	b.n	800096e <__aeabi_ddiv+0x82>
 8000a00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a04:	bf04      	itt	eq
 8000a06:	4301      	orreq	r1, r0
 8000a08:	2000      	moveq	r0, #0
 8000a0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a0e:	bf88      	it	hi
 8000a10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a14:	f63f aeaf 	bhi.w	8000776 <__aeabi_dmul+0xde>
 8000a18:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a1c:	bf04      	itt	eq
 8000a1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a26:	f150 0000 	adcs.w	r0, r0, #0
 8000a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a3c:	bfc2      	ittt	gt
 8000a3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	popgt	{r4, r5, r6, pc}
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4c:	f04f 0e00 	mov.w	lr, #0
 8000a50:	3c01      	subs	r4, #1
 8000a52:	e690      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a54:	ea45 0e06 	orr.w	lr, r5, r6
 8000a58:	e68d      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a5e:	ea94 0f0c 	teq	r4, ip
 8000a62:	bf08      	it	eq
 8000a64:	ea95 0f0c 	teqeq	r5, ip
 8000a68:	f43f af3b 	beq.w	80008e2 <__aeabi_dmul+0x24a>
 8000a6c:	ea94 0f0c 	teq	r4, ip
 8000a70:	d10a      	bne.n	8000a88 <__aeabi_ddiv+0x19c>
 8000a72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a76:	f47f af34 	bne.w	80008e2 <__aeabi_dmul+0x24a>
 8000a7a:	ea95 0f0c 	teq	r5, ip
 8000a7e:	f47f af25 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e72c      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a88:	ea95 0f0c 	teq	r5, ip
 8000a8c:	d106      	bne.n	8000a9c <__aeabi_ddiv+0x1b0>
 8000a8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a92:	f43f aefd 	beq.w	8000890 <__aeabi_dmul+0x1f8>
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	e722      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aa6:	f47f aec5 	bne.w	8000834 <__aeabi_dmul+0x19c>
 8000aaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aae:	f47f af0d 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000ab2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ab6:	f47f aeeb 	bne.w	8000890 <__aeabi_dmul+0x1f8>
 8000aba:	e712      	b.n	80008e2 <__aeabi_dmul+0x24a>

08000abc <__gedf2>:
 8000abc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ac0:	e006      	b.n	8000ad0 <__cmpdf2+0x4>
 8000ac2:	bf00      	nop

08000ac4 <__ledf2>:
 8000ac4:	f04f 0c01 	mov.w	ip, #1
 8000ac8:	e002      	b.n	8000ad0 <__cmpdf2+0x4>
 8000aca:	bf00      	nop

08000acc <__cmpdf2>:
 8000acc:	f04f 0c01 	mov.w	ip, #1
 8000ad0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ae6:	d01b      	beq.n	8000b20 <__cmpdf2+0x54>
 8000ae8:	b001      	add	sp, #4
 8000aea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aee:	bf0c      	ite	eq
 8000af0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000af4:	ea91 0f03 	teqne	r1, r3
 8000af8:	bf02      	ittt	eq
 8000afa:	ea90 0f02 	teqeq	r0, r2
 8000afe:	2000      	moveq	r0, #0
 8000b00:	4770      	bxeq	lr
 8000b02:	f110 0f00 	cmn.w	r0, #0
 8000b06:	ea91 0f03 	teq	r1, r3
 8000b0a:	bf58      	it	pl
 8000b0c:	4299      	cmppl	r1, r3
 8000b0e:	bf08      	it	eq
 8000b10:	4290      	cmpeq	r0, r2
 8000b12:	bf2c      	ite	cs
 8000b14:	17d8      	asrcs	r0, r3, #31
 8000b16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b1a:	f040 0001 	orr.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__cmpdf2+0x64>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d107      	bne.n	8000b40 <__cmpdf2+0x74>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d1d6      	bne.n	8000ae8 <__cmpdf2+0x1c>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d0d3      	beq.n	8000ae8 <__cmpdf2+0x1c>
 8000b40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdrcmple>:
 8000b48:	4684      	mov	ip, r0
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	468c      	mov	ip, r1
 8000b50:	4619      	mov	r1, r3
 8000b52:	4663      	mov	r3, ip
 8000b54:	e000      	b.n	8000b58 <__aeabi_cdcmpeq>
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdcmpeq>:
 8000b58:	b501      	push	{r0, lr}
 8000b5a:	f7ff ffb7 	bl	8000acc <__cmpdf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	bf48      	it	mi
 8000b62:	f110 0f00 	cmnmi.w	r0, #0
 8000b66:	bd01      	pop	{r0, pc}

08000b68 <__aeabi_dcmpeq>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff fff4 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b70:	bf0c      	ite	eq
 8000b72:	2001      	moveq	r0, #1
 8000b74:	2000      	movne	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmplt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffea 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmple>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffe0 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpge>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffce 	bl	8000b48 <__aeabi_cdrcmple>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_dcmpgt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffc4 	bl	8000b48 <__aeabi_cdrcmple>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmpun>:
 8000bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x10>
 8000bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bda:	d10a      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x20>
 8000be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0001 	mov.w	r0, #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2iz>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d215      	bcs.n	8000c2e <__aeabi_d2iz+0x36>
 8000c02:	d511      	bpl.n	8000c28 <__aeabi_d2iz+0x30>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d912      	bls.n	8000c34 <__aeabi_d2iz+0x3c>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d105      	bne.n	8000c40 <__aeabi_d2iz+0x48>
 8000c34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2uiz>:
 8000c48:	004a      	lsls	r2, r1, #1
 8000c4a:	d211      	bcs.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d211      	bcs.n	8000c76 <__aeabi_d2uiz+0x2e>
 8000c52:	d50d      	bpl.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d40e      	bmi.n	8000c7c <__aeabi_d2uiz+0x34>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c7a:	d102      	bne.n	8000c82 <__aeabi_d2uiz+0x3a>
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	4770      	bx	lr
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2f>:
 8000c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c90:	bf24      	itt	cs
 8000c92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c9a:	d90d      	bls.n	8000cb8 <__aeabi_d2f+0x30>
 8000c9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cbc:	d121      	bne.n	8000d02 <__aeabi_d2f+0x7a>
 8000cbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cc2:	bfbc      	itt	lt
 8000cc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cc8:	4770      	bxlt	lr
 8000cca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd2:	f1c2 0218 	rsb	r2, r2, #24
 8000cd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cde:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	f040 0001 	orrne.w	r0, r0, #1
 8000ce8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf4:	ea40 000c 	orr.w	r0, r0, ip
 8000cf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d00:	e7cc      	b.n	8000c9c <__aeabi_d2f+0x14>
 8000d02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d06:	d107      	bne.n	8000d18 <__aeabi_d2f+0x90>
 8000d08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d16:	4770      	bxne	lr
 8000d18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9a6 	b.w	800108c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff ff0b 	bl	8000b7c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc81 	bl	8000698 <__aeabi_dmul>
 8000d96:	f7ff ff57 	bl	8000c48 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fc02 	bl	80005a4 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc78 	bl	8000698 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff faba 	bl	8000328 <__aeabi_dsub>
 8000db4:	f7ff ff48 	bl	8000c48 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9e08      	ldr	r6, [sp, #32]
 8000dca:	460d      	mov	r5, r1
 8000dcc:	4604      	mov	r4, r0
 8000dce:	460f      	mov	r7, r1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d14a      	bne.n	8000e6a <__udivmoddi4+0xa6>
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	d965      	bls.n	8000ea6 <__udivmoddi4+0xe2>
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	b143      	cbz	r3, 8000df2 <__udivmoddi4+0x2e>
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	f1c3 0220 	rsb	r2, r3, #32
 8000de8:	409f      	lsls	r7, r3
 8000dea:	fa20 f202 	lsr.w	r2, r0, r2
 8000dee:	4317      	orrs	r7, r2
 8000df0:	409c      	lsls	r4, r3
 8000df2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000df6:	fa1f f58c 	uxth.w	r5, ip
 8000dfa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dfe:	0c22      	lsrs	r2, r4, #16
 8000e00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e08:	fb01 f005 	mul.w	r0, r1, r5
 8000e0c:	4290      	cmp	r0, r2
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x62>
 8000e10:	eb1c 0202 	adds.w	r2, ip, r2
 8000e14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e18:	f080 811c 	bcs.w	8001054 <__udivmoddi4+0x290>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f240 8119 	bls.w	8001054 <__udivmoddi4+0x290>
 8000e22:	3902      	subs	r1, #2
 8000e24:	4462      	add	r2, ip
 8000e26:	1a12      	subs	r2, r2, r0
 8000e28:	b2a4      	uxth	r4, r4
 8000e2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e36:	fb00 f505 	mul.w	r5, r0, r5
 8000e3a:	42a5      	cmp	r5, r4
 8000e3c:	d90a      	bls.n	8000e54 <__udivmoddi4+0x90>
 8000e3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e46:	f080 8107 	bcs.w	8001058 <__udivmoddi4+0x294>
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	f240 8104 	bls.w	8001058 <__udivmoddi4+0x294>
 8000e50:	4464      	add	r4, ip
 8000e52:	3802      	subs	r0, #2
 8000e54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	b11e      	cbz	r6, 8000e66 <__udivmoddi4+0xa2>
 8000e5e:	40dc      	lsrs	r4, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	e9c6 4300 	strd	r4, r3, [r6]
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0xbc>
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	f000 80ed 	beq.w	800104e <__udivmoddi4+0x28a>
 8000e74:	2100      	movs	r1, #0
 8000e76:	e9c6 0500 	strd	r0, r5, [r6]
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	fab3 f183 	clz	r1, r3
 8000e84:	2900      	cmp	r1, #0
 8000e86:	d149      	bne.n	8000f1c <__udivmoddi4+0x158>
 8000e88:	42ab      	cmp	r3, r5
 8000e8a:	d302      	bcc.n	8000e92 <__udivmoddi4+0xce>
 8000e8c:	4282      	cmp	r2, r0
 8000e8e:	f200 80f8 	bhi.w	8001082 <__udivmoddi4+0x2be>
 8000e92:	1a84      	subs	r4, r0, r2
 8000e94:	eb65 0203 	sbc.w	r2, r5, r3
 8000e98:	2001      	movs	r0, #1
 8000e9a:	4617      	mov	r7, r2
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d0e2      	beq.n	8000e66 <__udivmoddi4+0xa2>
 8000ea0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ea4:	e7df      	b.n	8000e66 <__udivmoddi4+0xa2>
 8000ea6:	b902      	cbnz	r2, 8000eaa <__udivmoddi4+0xe6>
 8000ea8:	deff      	udf	#255	; 0xff
 8000eaa:	fab2 f382 	clz	r3, r2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8090 	bne.w	8000fd4 <__udivmoddi4+0x210>
 8000eb4:	1a8a      	subs	r2, r1, r2
 8000eb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eba:	fa1f fe8c 	uxth.w	lr, ip
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ec4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec8:	0c22      	lsrs	r2, r4, #16
 8000eca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ece:	fb0e f005 	mul.w	r0, lr, r5
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x124>
 8000ed6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x122>
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	f200 80cb 	bhi.w	800107c <__udivmoddi4+0x2b8>
 8000ee6:	4645      	mov	r5, r8
 8000ee8:	1a12      	subs	r2, r2, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ef0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ef4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef8:	fb0e fe00 	mul.w	lr, lr, r0
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x14e>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x14c>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f200 80bb 	bhi.w	8001086 <__udivmoddi4+0x2c2>
 8000f10:	4610      	mov	r0, r2
 8000f12:	eba4 040e 	sub.w	r4, r4, lr
 8000f16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f1a:	e79f      	b.n	8000e5c <__udivmoddi4+0x98>
 8000f1c:	f1c1 0720 	rsb	r7, r1, #32
 8000f20:	408b      	lsls	r3, r1
 8000f22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f32:	40fd      	lsrs	r5, r7
 8000f34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f38:	4323      	orrs	r3, r4
 8000f3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f3e:	fa1f fe8c 	uxth.w	lr, ip
 8000f42:	fb09 5518 	mls	r5, r9, r8, r5
 8000f46:	0c1c      	lsrs	r4, r3, #16
 8000f48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f50:	42a5      	cmp	r5, r4
 8000f52:	fa02 f201 	lsl.w	r2, r2, r1
 8000f56:	fa00 f001 	lsl.w	r0, r0, r1
 8000f5a:	d90b      	bls.n	8000f74 <__udivmoddi4+0x1b0>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f64:	f080 8088 	bcs.w	8001078 <__udivmoddi4+0x2b4>
 8000f68:	42a5      	cmp	r5, r4
 8000f6a:	f240 8085 	bls.w	8001078 <__udivmoddi4+0x2b4>
 8000f6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f72:	4464      	add	r4, ip
 8000f74:	1b64      	subs	r4, r4, r5
 8000f76:	b29d      	uxth	r5, r3
 8000f78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f88:	45a6      	cmp	lr, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x1da>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f94:	d26c      	bcs.n	8001070 <__udivmoddi4+0x2ac>
 8000f96:	45a6      	cmp	lr, r4
 8000f98:	d96a      	bls.n	8001070 <__udivmoddi4+0x2ac>
 8000f9a:	3b02      	subs	r3, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fa6:	eba4 040e 	sub.w	r4, r4, lr
 8000faa:	42ac      	cmp	r4, r5
 8000fac:	46c8      	mov	r8, r9
 8000fae:	46ae      	mov	lr, r5
 8000fb0:	d356      	bcc.n	8001060 <__udivmoddi4+0x29c>
 8000fb2:	d053      	beq.n	800105c <__udivmoddi4+0x298>
 8000fb4:	b156      	cbz	r6, 8000fcc <__udivmoddi4+0x208>
 8000fb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fba:	eb64 040e 	sbc.w	r4, r4, lr
 8000fbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000fc2:	40ca      	lsrs	r2, r1
 8000fc4:	40cc      	lsrs	r4, r1
 8000fc6:	4317      	orrs	r7, r2
 8000fc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	f1c3 0120 	rsb	r1, r3, #32
 8000fd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000fe0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fe4:	409d      	lsls	r5, r3
 8000fe6:	432a      	orrs	r2, r5
 8000fe8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fec:	fa1f fe8c 	uxth.w	lr, ip
 8000ff0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ff8:	0c11      	lsrs	r1, r2, #16
 8000ffa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ffe:	fb00 f50e 	mul.w	r5, r0, lr
 8001002:	428d      	cmp	r5, r1
 8001004:	fa04 f403 	lsl.w	r4, r4, r3
 8001008:	d908      	bls.n	800101c <__udivmoddi4+0x258>
 800100a:	eb1c 0101 	adds.w	r1, ip, r1
 800100e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001012:	d22f      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001014:	428d      	cmp	r5, r1
 8001016:	d92d      	bls.n	8001074 <__udivmoddi4+0x2b0>
 8001018:	3802      	subs	r0, #2
 800101a:	4461      	add	r1, ip
 800101c:	1b49      	subs	r1, r1, r5
 800101e:	b292      	uxth	r2, r2
 8001020:	fbb1 f5f7 	udiv	r5, r1, r7
 8001024:	fb07 1115 	mls	r1, r7, r5, r1
 8001028:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800102c:	fb05 f10e 	mul.w	r1, r5, lr
 8001030:	4291      	cmp	r1, r2
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x282>
 8001034:	eb1c 0202 	adds.w	r2, ip, r2
 8001038:	f105 38ff 	add.w	r8, r5, #4294967295
 800103c:	d216      	bcs.n	800106c <__udivmoddi4+0x2a8>
 800103e:	4291      	cmp	r1, r2
 8001040:	d914      	bls.n	800106c <__udivmoddi4+0x2a8>
 8001042:	3d02      	subs	r5, #2
 8001044:	4462      	add	r2, ip
 8001046:	1a52      	subs	r2, r2, r1
 8001048:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800104c:	e738      	b.n	8000ec0 <__udivmoddi4+0xfc>
 800104e:	4631      	mov	r1, r6
 8001050:	4630      	mov	r0, r6
 8001052:	e708      	b.n	8000e66 <__udivmoddi4+0xa2>
 8001054:	4639      	mov	r1, r7
 8001056:	e6e6      	b.n	8000e26 <__udivmoddi4+0x62>
 8001058:	4610      	mov	r0, r2
 800105a:	e6fb      	b.n	8000e54 <__udivmoddi4+0x90>
 800105c:	4548      	cmp	r0, r9
 800105e:	d2a9      	bcs.n	8000fb4 <__udivmoddi4+0x1f0>
 8001060:	ebb9 0802 	subs.w	r8, r9, r2
 8001064:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001068:	3b01      	subs	r3, #1
 800106a:	e7a3      	b.n	8000fb4 <__udivmoddi4+0x1f0>
 800106c:	4645      	mov	r5, r8
 800106e:	e7ea      	b.n	8001046 <__udivmoddi4+0x282>
 8001070:	462b      	mov	r3, r5
 8001072:	e794      	b.n	8000f9e <__udivmoddi4+0x1da>
 8001074:	4640      	mov	r0, r8
 8001076:	e7d1      	b.n	800101c <__udivmoddi4+0x258>
 8001078:	46d0      	mov	r8, sl
 800107a:	e77b      	b.n	8000f74 <__udivmoddi4+0x1b0>
 800107c:	3d02      	subs	r5, #2
 800107e:	4462      	add	r2, ip
 8001080:	e732      	b.n	8000ee8 <__udivmoddi4+0x124>
 8001082:	4608      	mov	r0, r1
 8001084:	e70a      	b.n	8000e9c <__udivmoddi4+0xd8>
 8001086:	4464      	add	r4, ip
 8001088:	3802      	subs	r0, #2
 800108a:	e742      	b.n	8000f12 <__udivmoddi4+0x14e>

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <ADC_Select_CH1>:
	    Error_Handler();
	  }
}

void ADC_Select_CH1 (void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	463b      	mov	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]

	 sConfig.Channel = ADC_CHANNEL_1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010aa:	2302      	movs	r3, #2
 80010ac:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <ADC_Select_CH1+0x3c>)
 80010b4:	f001 fb6a 	bl	800278c <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 80010be:	f000 fe81 	bl	8001dc4 <Error_Handler>
	  }
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000228 	.word	0x20000228

080010d0 <ADC_Select_CH2>:

void ADC_Select_CH2 (void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]

	 sConfig.Channel = ADC_CHANNEL_2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010ea:	2303      	movs	r3, #3
 80010ec:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <ADC_Select_CH2+0x3c>)
 80010f4:	f001 fb4a 	bl	800278c <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <ADC_Select_CH2+0x32>
	  {
	    Error_Handler();
 80010fe:	f000 fe61 	bl	8001dc4 <Error_Handler>
	  }
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000228 	.word	0x20000228

08001110 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]

	 sConfig.Channel = ADC_CHANNEL_3;
 8001122:	2303      	movs	r3, #3
 8001124:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800112a:	2304      	movs	r3, #4
 800112c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112e:	463b      	mov	r3, r7
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <ADC_Select_CH3+0x3c>)
 8001134:	f001 fb2a 	bl	800278c <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <ADC_Select_CH3+0x32>
	  {
	    Error_Handler();
 800113e:	f000 fe41 	bl	8001dc4 <Error_Handler>
	  }
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000228 	.word	0x20000228

08001150 <ADC_Select_CH4>:

void ADC_Select_CH4 (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]

	 sConfig.Channel = ADC_CHANNEL_4;
 8001162:	2304      	movs	r3, #4
 8001164:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800116a:	2305      	movs	r3, #5
 800116c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <ADC_Select_CH4+0x3c>)
 8001174:	f001 fb0a 	bl	800278c <HAL_ADC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <ADC_Select_CH4+0x32>
	  {
	    Error_Handler();
 800117e:	f000 fe21 	bl	8001dc4 <Error_Handler>
	  }
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000228 	.word	0x20000228

08001190 <delay>:

void delay()
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
	uint16_t g,k;

	for(g=1000;g!=0;g--) {
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	80fb      	strh	r3, [r7, #6]
 800119c:	e00c      	b.n	80011b8 <delay+0x28>

		for(k=1000;k!=0;k--);
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	80bb      	strh	r3, [r7, #4]
 80011a4:	e002      	b.n	80011ac <delay+0x1c>
 80011a6:	88bb      	ldrh	r3, [r7, #4]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	80bb      	strh	r3, [r7, #4]
 80011ac:	88bb      	ldrh	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f9      	bne.n	80011a6 <delay+0x16>
	for(g=1000;g!=0;g--) {
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	80fb      	strh	r3, [r7, #6]
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ef      	bne.n	800119e <delay+0xe>
	}
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <BMS_transmitter>:
void BMS_transmitter(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <BMS_transmitter+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <BMS_transmitter+0x50>)
 80011d4:	4912      	ldr	r1, [pc, #72]	; (8001220 <BMS_transmitter+0x54>)
 80011d6:	4813      	ldr	r0, [pc, #76]	; (8001224 <BMS_transmitter+0x58>)
 80011d8:	f001 fe35 	bl	8002e46 <HAL_CAN_AddTxMessage>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <BMS_transmitter+0x48>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e8:	480f      	ldr	r0, [pc, #60]	; (8001228 <BMS_transmitter+0x5c>)
 80011ea:	f002 f97b 	bl	80034e4 <HAL_GPIO_WritePin>

					  			  							HAL_Delay(100);
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f001 f8c6 	bl	8002380 <HAL_Delay>
					  			  							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fa:	480b      	ldr	r0, [pc, #44]	; (8001228 <BMS_transmitter+0x5c>)
 80011fc:	f002 f972 	bl	80034e4 <HAL_GPIO_WritePin>
					  			  							HAL_Delay(1000);
 8001200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001204:	f001 f8bc 	bl	8002380 <HAL_Delay>
					  			  						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <BMS_transmitter+0x5c>)
 8001210:	f002 f968 	bl	80034e4 <HAL_GPIO_WritePin>
	    }
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000224 	.word	0x20000224
 800121c:	2000021c 	.word	0x2000021c
 8001220:	20000204 	.word	0x20000204
 8001224:	20000270 	.word	0x20000270
 8001228:	40020c00 	.word	0x40020c00
 800122c:	00000000 	.word	0x00000000

08001230 <Task1>:

void Task1(void *a)


{
 8001230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]

	for(;;) {
				ADC_Select_CH1();
 800123a:	f7ff ff29 	bl	8001090 <ADC_Select_CH1>
			  	HAL_ADC_Start(&hadc1);
 800123e:	48d0      	ldr	r0, [pc, #832]	; (8001580 <Task1+0x350>)
 8001240:	f001 f906 	bl	8002450 <HAL_ADC_Start>
			  	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001244:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001248:	48cd      	ldr	r0, [pc, #820]	; (8001580 <Task1+0x350>)
 800124a:	f001 fa06 	bl	800265a <HAL_ADC_PollForConversion>
			  	thermistor_adc_value = HAL_ADC_GetValue(&hadc1);
 800124e:	48cc      	ldr	r0, [pc, #816]	; (8001580 <Task1+0x350>)
 8001250:	f001 fa8e 	bl	8002770 <HAL_ADC_GetValue>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	4bca      	ldr	r3, [pc, #808]	; (8001584 <Task1+0x354>)
 800125a:	801a      	strh	r2, [r3, #0]
			    HAL_ADC_Stop(&hadc1);
 800125c:	48c8      	ldr	r0, [pc, #800]	; (8001580 <Task1+0x350>)
 800125e:	f001 f9c9 	bl	80025f4 <HAL_ADC_Stop>
			  	T_Vout = (thermistor_adc_value* 3.3/4095);//*(3.3 /3);// Calculate NTC thermistor resistance
 8001262:	4bc8      	ldr	r3, [pc, #800]	; (8001584 <Task1+0x354>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f9ac 	bl	80005c4 <__aeabi_i2d>
 800126c:	a3be      	add	r3, pc, #760	; (adr r3, 8001568 <Task1+0x338>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff fa11 	bl	8000698 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	a3bc      	add	r3, pc, #752	; (adr r3, 8001570 <Task1+0x340>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff fb32 	bl	80008ec <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fcfa 	bl	8000c88 <__aeabi_d2f>
 8001294:	4603      	mov	r3, r0
 8001296:	4abc      	ldr	r2, [pc, #752]	; (8001588 <Task1+0x358>)
 8001298:	6013      	str	r3, [r2, #0]
			  	R_NTC = (T_Vout * R_10k) / (3.3 - T_Vout);
 800129a:	4bbc      	ldr	r3, [pc, #752]	; (800158c <Task1+0x35c>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a6:	4bb8      	ldr	r3, [pc, #736]	; (8001588 <Task1+0x358>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b0:	ee17 0a90 	vmov	r0, s15
 80012b4:	f7ff f998 	bl	80005e8 <__aeabi_f2d>
 80012b8:	4604      	mov	r4, r0
 80012ba:	460d      	mov	r5, r1
 80012bc:	4bb2      	ldr	r3, [pc, #712]	; (8001588 <Task1+0x358>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f991 	bl	80005e8 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	a1a7      	add	r1, pc, #668	; (adr r1, 8001568 <Task1+0x338>)
 80012cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012d0:	f7ff f82a 	bl	8000328 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7ff fb06 	bl	80008ec <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fcce 	bl	8000c88 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4aa8      	ldr	r2, [pc, #672]	; (8001590 <Task1+0x360>)
 80012f0:	6013      	str	r3, [r2, #0]
			  	Temp_K = (T0 * B_param) / (T0 * log(R_NTC / R_10k) + B_param);   // Calculate temperature in Kelvin
 80012f2:	4ba8      	ldr	r3, [pc, #672]	; (8001594 <Task1+0x364>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fe:	4ba6      	ldr	r3, [pc, #664]	; (8001598 <Task1+0x368>)
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001308:	ee17 0a90 	vmov	r0, s15
 800130c:	f7ff f96c 	bl	80005e8 <__aeabi_f2d>
 8001310:	4604      	mov	r4, r0
 8001312:	460d      	mov	r5, r1
 8001314:	4ba0      	ldr	r3, [pc, #640]	; (8001598 <Task1+0x368>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f965 	bl	80005e8 <__aeabi_f2d>
 800131e:	4680      	mov	r8, r0
 8001320:	4689      	mov	r9, r1
 8001322:	4b9b      	ldr	r3, [pc, #620]	; (8001590 <Task1+0x360>)
 8001324:	ed93 7a00 	vldr	s14, [r3]
 8001328:	4b98      	ldr	r3, [pc, #608]	; (800158c <Task1+0x35c>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001334:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001338:	ee16 0a90 	vmov	r0, s13
 800133c:	f7ff f954 	bl	80005e8 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	ec43 2b10 	vmov	d0, r2, r3
 8001348:	f00c fc5e 	bl	800dc08 <log>
 800134c:	ec53 2b10 	vmov	r2, r3, d0
 8001350:	4640      	mov	r0, r8
 8001352:	4649      	mov	r1, r9
 8001354:	f7ff f9a0 	bl	8000698 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4690      	mov	r8, r2
 800135e:	4699      	mov	r9, r3
 8001360:	4b8c      	ldr	r3, [pc, #560]	; (8001594 <Task1+0x364>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f92d 	bl	80005c4 <__aeabi_i2d>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4640      	mov	r0, r8
 8001370:	4649      	mov	r1, r9
 8001372:	f7fe ffdb 	bl	800032c <__adddf3>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4620      	mov	r0, r4
 800137c:	4629      	mov	r1, r5
 800137e:	f7ff fab5 	bl	80008ec <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fc7d 	bl	8000c88 <__aeabi_d2f>
 800138e:	4603      	mov	r3, r0
 8001390:	4a82      	ldr	r2, [pc, #520]	; (800159c <Task1+0x36c>)
 8001392:	6013      	str	r3, [r2, #0]
			  	Temp_C = Temp_K - 273.15;    // Convert temperature to Celsius
 8001394:	4b81      	ldr	r3, [pc, #516]	; (800159c <Task1+0x36c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f925 	bl	80005e8 <__aeabi_f2d>
 800139e:	a376      	add	r3, pc, #472	; (adr r3, 8001578 <Task1+0x348>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7fe ffc0 	bl	8000328 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fc6a 	bl	8000c88 <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a7a      	ldr	r2, [pc, #488]	; (80015a0 <Task1+0x370>)
 80013b8:	6013      	str	r3, [r2, #0]
			  //	TxData[0] = Temp_C;
			  	 delay();
 80013ba:	f7ff fee9 	bl	8001190 <delay>


			  	ADC_Select_CH2();
 80013be:	f7ff fe87 	bl	80010d0 <ADC_Select_CH2>
			  	HAL_ADC_Start(&hadc1);
 80013c2:	486f      	ldr	r0, [pc, #444]	; (8001580 <Task1+0x350>)
 80013c4:	f001 f844 	bl	8002450 <HAL_ADC_Start>
			  	HAL_ADC_PollForConversion(&hadc1, 1000);
 80013c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013cc:	486c      	ldr	r0, [pc, #432]	; (8001580 <Task1+0x350>)
 80013ce:	f001 f944 	bl	800265a <HAL_ADC_PollForConversion>
			  	thermistor_adc_value1 = HAL_ADC_GetValue(&hadc1);
 80013d2:	486b      	ldr	r0, [pc, #428]	; (8001580 <Task1+0x350>)
 80013d4:	f001 f9cc 	bl	8002770 <HAL_ADC_GetValue>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <Task1+0x374>)
 80013de:	801a      	strh	r2, [r3, #0]
			  	HAL_ADC_Stop(&hadc1);
 80013e0:	4867      	ldr	r0, [pc, #412]	; (8001580 <Task1+0x350>)
 80013e2:	f001 f907 	bl	80025f4 <HAL_ADC_Stop>
			  	T_Vout1 = (thermistor_adc_value1* 3.3/4095);//*(3.3 /3);// Calculate NTC thermistor resistance
 80013e6:	4b6f      	ldr	r3, [pc, #444]	; (80015a4 <Task1+0x374>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8ea 	bl	80005c4 <__aeabi_i2d>
 80013f0:	a35d      	add	r3, pc, #372	; (adr r3, 8001568 <Task1+0x338>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f94f 	bl	8000698 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	a35b      	add	r3, pc, #364	; (adr r3, 8001570 <Task1+0x340>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff fa70 	bl	80008ec <__aeabi_ddiv>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fc38 	bl	8000c88 <__aeabi_d2f>
 8001418:	4603      	mov	r3, r0
 800141a:	4a63      	ldr	r2, [pc, #396]	; (80015a8 <Task1+0x378>)
 800141c:	6013      	str	r3, [r2, #0]
			  	R_NTC1 = (T_Vout1 * R_10k) / (3.3 - T_Vout1);
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <Task1+0x35c>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <Task1+0x378>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001434:	ee17 0a90 	vmov	r0, s15
 8001438:	f7ff f8d6 	bl	80005e8 <__aeabi_f2d>
 800143c:	4604      	mov	r4, r0
 800143e:	460d      	mov	r5, r1
 8001440:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <Task1+0x378>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f8cf 	bl	80005e8 <__aeabi_f2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	a146      	add	r1, pc, #280	; (adr r1, 8001568 <Task1+0x338>)
 8001450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001454:	f7fe ff68 	bl	8000328 <__aeabi_dsub>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4620      	mov	r0, r4
 800145e:	4629      	mov	r1, r5
 8001460:	f7ff fa44 	bl	80008ec <__aeabi_ddiv>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fc0c 	bl	8000c88 <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	4a4e      	ldr	r2, [pc, #312]	; (80015ac <Task1+0x37c>)
 8001474:	6013      	str	r3, [r2, #0]
			  	Temp1_K = (T0 * B_param) / (T0 * log(R_NTC1 / R_10k) + B_param);   // Calculate temperature in Kelvin
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <Task1+0x364>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001482:	4b45      	ldr	r3, [pc, #276]	; (8001598 <Task1+0x368>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	ee17 0a90 	vmov	r0, s15
 8001490:	f7ff f8aa 	bl	80005e8 <__aeabi_f2d>
 8001494:	4604      	mov	r4, r0
 8001496:	460d      	mov	r5, r1
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <Task1+0x368>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f8a3 	bl	80005e8 <__aeabi_f2d>
 80014a2:	4680      	mov	r8, r0
 80014a4:	4689      	mov	r9, r1
 80014a6:	4b41      	ldr	r3, [pc, #260]	; (80015ac <Task1+0x37c>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4b37      	ldr	r3, [pc, #220]	; (800158c <Task1+0x35c>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014bc:	ee16 0a90 	vmov	r0, s13
 80014c0:	f7ff f892 	bl	80005e8 <__aeabi_f2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	ec43 2b10 	vmov	d0, r2, r3
 80014cc:	f00c fb9c 	bl	800dc08 <log>
 80014d0:	ec53 2b10 	vmov	r2, r3, d0
 80014d4:	4640      	mov	r0, r8
 80014d6:	4649      	mov	r1, r9
 80014d8:	f7ff f8de 	bl	8000698 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4690      	mov	r8, r2
 80014e2:	4699      	mov	r9, r3
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <Task1+0x364>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f86b 	bl	80005c4 <__aeabi_i2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4640      	mov	r0, r8
 80014f4:	4649      	mov	r1, r9
 80014f6:	f7fe ff19 	bl	800032c <__adddf3>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7ff f9f3 	bl	80008ec <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fbbb 	bl	8000c88 <__aeabi_d2f>
 8001512:	4603      	mov	r3, r0
 8001514:	4a26      	ldr	r2, [pc, #152]	; (80015b0 <Task1+0x380>)
 8001516:	6013      	str	r3, [r2, #0]
			  	Temp1_C = Temp1_K - 273.15;    // Convert temperature to Celsius
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <Task1+0x380>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f863 	bl	80005e8 <__aeabi_f2d>
 8001522:	a315      	add	r3, pc, #84	; (adr r3, 8001578 <Task1+0x348>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7fe fefe 	bl	8000328 <__aeabi_dsub>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fba8 	bl	8000c88 <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <Task1+0x384>)
 800153c:	6013      	str	r3, [r2, #0]
			  	//	TxData[0] = Temp_C;
			  	 delay();
 800153e:	f7ff fe27 	bl	8001190 <delay>

			  	 ADC_Select_CH3();
 8001542:	f7ff fde5 	bl	8001110 <ADC_Select_CH3>
			  	 HAL_ADC_Start(&hadc1);
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <Task1+0x350>)
 8001548:	f000 ff82 	bl	8002450 <HAL_ADC_Start>
			  	 HAL_ADC_PollForConversion(&hadc1, 1000);
 800154c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <Task1+0x350>)
 8001552:	f001 f882 	bl	800265a <HAL_ADC_PollForConversion>
			  	 CS_adc_value = HAL_ADC_GetValue(&hadc1);
 8001556:	480a      	ldr	r0, [pc, #40]	; (8001580 <Task1+0x350>)
 8001558:	f001 f90a 	bl	8002770 <HAL_ADC_GetValue>
 800155c:	ee07 0a90 	vmov	s15, r0
 8001560:	e02a      	b.n	80015b8 <Task1+0x388>
 8001562:	bf00      	nop
 8001564:	f3af 8000 	nop.w
 8001568:	66666666 	.word	0x66666666
 800156c:	400a6666 	.word	0x400a6666
 8001570:	00000000 	.word	0x00000000
 8001574:	40affe00 	.word	0x40affe00
 8001578:	66666666 	.word	0x66666666
 800157c:	40711266 	.word	0x40711266
 8001580:	20000228 	.word	0x20000228
 8001584:	200003dc 	.word	0x200003dc
 8001588:	200003a8 	.word	0x200003a8
 800158c:	20000002 	.word	0x20000002
 8001590:	200003bc 	.word	0x200003bc
 8001594:	20000004 	.word	0x20000004
 8001598:	20000008 	.word	0x20000008
 800159c:	200003cc 	.word	0x200003cc
 80015a0:	200003d4 	.word	0x200003d4
 80015a4:	200003de 	.word	0x200003de
 80015a8:	200003ac 	.word	0x200003ac
 80015ac:	200003c0 	.word	0x200003c0
 80015b0:	200003d0 	.word	0x200003d0
 80015b4:	200003d8 	.word	0x200003d8
 80015b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015bc:	4b9c      	ldr	r3, [pc, #624]	; (8001830 <Task1+0x600>)
 80015be:	edc3 7a00 	vstr	s15, [r3]
			  	 HAL_ADC_Stop(&hadc1);
 80015c2:	489c      	ldr	r0, [pc, #624]	; (8001834 <Task1+0x604>)
 80015c4:	f001 f816 	bl	80025f4 <HAL_ADC_Stop>
			  	 cs_voltage= ((CS_adc_value*3.3*2)/4095)*0.92;  //0.96 perfect
 80015c8:	4b99      	ldr	r3, [pc, #612]	; (8001830 <Task1+0x600>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff f80b 	bl	80005e8 <__aeabi_f2d>
 80015d2:	a38f      	add	r3, pc, #572	; (adr r3, 8001810 <Task1+0x5e0>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f85e 	bl	8000698 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	f7fe fea0 	bl	800032c <__adddf3>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	a388      	add	r3, pc, #544	; (adr r3, 8001818 <Task1+0x5e8>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7ff f977 	bl	80008ec <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	a386      	add	r3, pc, #536	; (adr r3, 8001820 <Task1+0x5f0>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f844 	bl	8000698 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff fb36 	bl	8000c88 <__aeabi_d2f>
 800161c:	4603      	mov	r3, r0
 800161e:	4a86      	ldr	r2, [pc, #536]	; (8001838 <Task1+0x608>)
 8001620:	6013      	str	r3, [r2, #0]
			  	 current=(cs_voltage-2.5)/0.066;							 //30A 0.066
 8001622:	4b85      	ldr	r3, [pc, #532]	; (8001838 <Task1+0x608>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffde 	bl	80005e8 <__aeabi_f2d>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b82      	ldr	r3, [pc, #520]	; (800183c <Task1+0x60c>)
 8001632:	f7fe fe79 	bl	8000328 <__aeabi_dsub>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	a37a      	add	r3, pc, #488	; (adr r3, 8001828 <Task1+0x5f8>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f952 	bl	80008ec <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fb1a 	bl	8000c88 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	4a7a      	ldr	r2, [pc, #488]	; (8001840 <Task1+0x610>)
 8001658:	6013      	str	r3, [r2, #0]
			  	 w=cs_voltage;
 800165a:	4b77      	ldr	r3, [pc, #476]	; (8001838 <Task1+0x608>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001664:	edc7 7a00 	vstr	s15, [r7]
 8001668:	783b      	ldrb	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b75      	ldr	r3, [pc, #468]	; (8001844 <Task1+0x614>)
 800166e:	701a      	strb	r2, [r3, #0]
			  	 x=(cs_voltage-w)*100;
 8001670:	4b71      	ldr	r3, [pc, #452]	; (8001838 <Task1+0x608>)
 8001672:	ed93 7a00 	vldr	s14, [r3]
 8001676:	4b73      	ldr	r3, [pc, #460]	; (8001844 <Task1+0x614>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001686:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001848 <Task1+0x618>
 800168a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001692:	edc7 7a00 	vstr	s15, [r7]
 8001696:	783b      	ldrb	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b6c      	ldr	r3, [pc, #432]	; (800184c <Task1+0x61c>)
 800169c:	701a      	strb	r2, [r3, #0]
			  	 delay();
 800169e:	f7ff fd77 	bl	8001190 <delay>

			  	 ADC_Select_CH4();
 80016a2:	f7ff fd55 	bl	8001150 <ADC_Select_CH4>
			  	 HAL_ADC_Start(&hadc1);
 80016a6:	4863      	ldr	r0, [pc, #396]	; (8001834 <Task1+0x604>)
 80016a8:	f000 fed2 	bl	8002450 <HAL_ADC_Start>
			  	 HAL_ADC_PollForConversion(&hadc1, 100);
 80016ac:	2164      	movs	r1, #100	; 0x64
 80016ae:	4861      	ldr	r0, [pc, #388]	; (8001834 <Task1+0x604>)
 80016b0:	f000 ffd3 	bl	800265a <HAL_ADC_PollForConversion>
			  	 volt_adc_value = HAL_ADC_GetValue(&hadc1);
 80016b4:	485f      	ldr	r0, [pc, #380]	; (8001834 <Task1+0x604>)
 80016b6:	f001 f85b 	bl	8002770 <HAL_ADC_GetValue>
 80016ba:	ee07 0a90 	vmov	s15, r0
 80016be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c2:	4b63      	ldr	r3, [pc, #396]	; (8001850 <Task1+0x620>)
 80016c4:	edc3 7a00 	vstr	s15, [r3]
			  	HAL_ADC_Stop(&hadc1);
 80016c8:	485a      	ldr	r0, [pc, #360]	; (8001834 <Task1+0x604>)
 80016ca:	f000 ff93 	bl	80025f4 <HAL_ADC_Stop>
			  	Bat_voltage = (volt_adc_value/4095)*12;   //13.3
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <Task1+0x620>)
 80016d0:	ed93 7a00 	vldr	s14, [r3]
 80016d4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001854 <Task1+0x624>
 80016d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016dc:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80016e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e4:	4b5c      	ldr	r3, [pc, #368]	; (8001858 <Task1+0x628>)
 80016e6:	edc3 7a00 	vstr	s15, [r3]
			  	y=Bat_voltage;
 80016ea:	4b5b      	ldr	r3, [pc, #364]	; (8001858 <Task1+0x628>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f4:	edc7 7a00 	vstr	s15, [r7]
 80016f8:	783b      	ldrb	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b57      	ldr	r3, [pc, #348]	; (800185c <Task1+0x62c>)
 80016fe:	701a      	strb	r2, [r3, #0]
			  	z=(Bat_voltage-y)*100;
 8001700:	4b55      	ldr	r3, [pc, #340]	; (8001858 <Task1+0x628>)
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	4b55      	ldr	r3, [pc, #340]	; (800185c <Task1+0x62c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001716:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001848 <Task1+0x618>
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001722:	edc7 7a00 	vstr	s15, [r7]
 8001726:	783b      	ldrb	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <Task1+0x630>)
 800172c:	701a      	strb	r2, [r3, #0]
			  	 delay();
 800172e:	f7ff fd2f 	bl	8001190 <delay>

			           if(Temp_C > 34 || Temp1_C > 34 || Bat_voltage < 9 || current > 2) {
 8001732:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <Task1+0x634>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001868 <Task1+0x638>
 800173c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	dc1d      	bgt.n	8001782 <Task1+0x552>
 8001746:	4b49      	ldr	r3, [pc, #292]	; (800186c <Task1+0x63c>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001868 <Task1+0x638>
 8001750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001758:	dc13      	bgt.n	8001782 <Task1+0x552>
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <Task1+0x628>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176c:	d409      	bmi.n	8001782 <Task1+0x552>
 800176e:	4b34      	ldr	r3, [pc, #208]	; (8001840 <Task1+0x610>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	dd0c      	ble.n	800179c <Task1+0x56c>
			           			/* when the Batter  Bank Exceeds the Temp > 37 c and Bat_voltasge is below 9V & Bat_current > 2A */
			           			/*Relay Switch off tghe Battery supply */
			           				//   delay();
			           				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001788:	4839      	ldr	r0, [pc, #228]	; (8001870 <Task1+0x640>)
 800178a:	f001 feab 	bl	80034e4 <HAL_GPIO_WritePin>
			           			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001794:	4836      	ldr	r0, [pc, #216]	; (8001870 <Task1+0x640>)
 8001796:	f001 fea5 	bl	80034e4 <HAL_GPIO_WritePin>
 800179a:	e033      	b.n	8001804 <Task1+0x5d4>
			           			}
			           			else if(Temp_C < 32 && Temp1_C < 34 && Bat_voltage > 9 && current < 2)
 800179c:	4b31      	ldr	r3, [pc, #196]	; (8001864 <Task1+0x634>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001874 <Task1+0x644>
 80017a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	d529      	bpl.n	8001804 <Task1+0x5d4>
 80017b0:	4b2e      	ldr	r3, [pc, #184]	; (800186c <Task1+0x63c>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001868 <Task1+0x638>
 80017ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d51f      	bpl.n	8001804 <Task1+0x5d4>
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <Task1+0x628>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80017ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	dd15      	ble.n	8001804 <Task1+0x5d4>
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <Task1+0x610>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80017e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	d50b      	bpl.n	8001804 <Task1+0x5d4>
			           			{
			           						/* when the Batter  Bank Exceeds the Temp > 37 c and Bat_voltasge is below 9V & Bat_current > 2A */
			           						/*Relay Switch off tghe Battery supply */
			           			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f2:	481f      	ldr	r0, [pc, #124]	; (8001870 <Task1+0x640>)
 80017f4:	f001 fe76 	bl	80034e4 <HAL_GPIO_WritePin>
			           			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017fe:	481c      	ldr	r0, [pc, #112]	; (8001870 <Task1+0x640>)
 8001800:	f001 fe70 	bl	80034e4 <HAL_GPIO_WritePin>
			          			}
			           vTaskSuspend(T1_Handle);
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <Task1+0x648>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 ff45 	bl	8005698 <vTaskSuspend>
				ADC_Select_CH1();
 800180e:	e514      	b.n	800123a <Task1+0xa>
 8001810:	66666666 	.word	0x66666666
 8001814:	400a6666 	.word	0x400a6666
 8001818:	00000000 	.word	0x00000000
 800181c:	40affe00 	.word	0x40affe00
 8001820:	d70a3d71 	.word	0xd70a3d71
 8001824:	3fed70a3 	.word	0x3fed70a3
 8001828:	4189374c 	.word	0x4189374c
 800182c:	3fb0e560 	.word	0x3fb0e560
 8001830:	200003e0 	.word	0x200003e0
 8001834:	20000228 	.word	0x20000228
 8001838:	200003b0 	.word	0x200003b0
 800183c:	40040000 	.word	0x40040000
 8001840:	200003b8 	.word	0x200003b8
 8001844:	200003c4 	.word	0x200003c4
 8001848:	42c80000 	.word	0x42c80000
 800184c:	200003c5 	.word	0x200003c5
 8001850:	200003e4 	.word	0x200003e4
 8001854:	457ff000 	.word	0x457ff000
 8001858:	200003b4 	.word	0x200003b4
 800185c:	200003c6 	.word	0x200003c6
 8001860:	200003c7 	.word	0x200003c7
 8001864:	200003d4 	.word	0x200003d4
 8001868:	42080000 	.word	0x42080000
 800186c:	200003d8 	.word	0x200003d8
 8001870:	40020c00 	.word	0x40020c00
 8001874:	42000000 	.word	0x42000000
 8001878:	200003e8 	.word	0x200003e8

0800187c <Task2>:

			 	}
}

void Task2 (void *a) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	for(;;) {

						  // TxData[0] = (uint8_t)Temp_C;

						   //TxData[1] =(uint8_t) Temp1_C;
	 	                   TxData[0] =n;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <Task2+0x6c>)
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <Task2+0x70>)
 800188a:	701a      	strb	r2, [r3, #0]
	 	                   TxData[1] =b;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <Task2+0x74>)
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <Task2+0x70>)
 8001892:	705a      	strb	r2, [r3, #1]
	 	                   TxData[2] =c;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <Task2+0x78>)
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <Task2+0x70>)
 800189a:	709a      	strb	r2, [r3, #2]
	 	                   TxData[3] =d;
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <Task2+0x7c>)
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <Task2+0x70>)
 80018a2:	70da      	strb	r2, [r3, #3]
						   TxData[4] =w;
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <Task2+0x80>)
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <Task2+0x70>)
 80018aa:	711a      	strb	r2, [r3, #4]
						   TxData[5] =x;
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <Task2+0x84>)
 80018ae:	781a      	ldrb	r2, [r3, #0]
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <Task2+0x70>)
 80018b2:	715a      	strb	r2, [r3, #5]
						   TxData[6] =y;
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <Task2+0x88>)
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <Task2+0x70>)
 80018ba:	719a      	strb	r2, [r3, #6]
						   TxData[7] =z;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <Task2+0x8c>)
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <Task2+0x70>)
 80018c2:	71da      	strb	r2, [r3, #7]
				           BMS_transmitter();
 80018c4:	f7ff fc82 	bl	80011cc <BMS_transmitter>
		                   vTaskResume(T3_Handle);
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <Task2+0x90>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 ffd7 	bl	8005880 <vTaskResume>
		                   vTaskResume(T1_Handle);
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <Task2+0x94>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 ffd2 	bl	8005880 <vTaskResume>
		                   vTaskSuspend(T2_Handle);
 80018dc:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <Task2+0x98>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fed9 	bl	8005698 <vTaskSuspend>
	 	                   TxData[0] =n;
 80018e6:	e7cd      	b.n	8001884 <Task2+0x8>
 80018e8:	200003c8 	.word	0x200003c8
 80018ec:	2000021c 	.word	0x2000021c
 80018f0:	200003c9 	.word	0x200003c9
 80018f4:	200003ca 	.word	0x200003ca
 80018f8:	200003cb 	.word	0x200003cb
 80018fc:	200003c4 	.word	0x200003c4
 8001900:	200003c5 	.word	0x200003c5
 8001904:	200003c6 	.word	0x200003c6
 8001908:	200003c7 	.word	0x200003c7
 800190c:	200003f0 	.word	0x200003f0
 8001910:	200003e8 	.word	0x200003e8
 8001914:	200003ec 	.word	0x200003ec

08001918 <Task3>:
	}
}

void Task3 (void *a) {
 8001918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800191c:	b088      	sub	sp, #32
 800191e:	af06      	add	r7, sp, #24
 8001920:	6078      	str	r0, [r7, #4]

	for(;;) {
		sprintf(BT_Buff,"Temperature_T1=%.2f C\nTemperature_T2=%.2f C\nBattery_Current=%.2f A\nBattery_Voltage=%.2f V\n\n",Temp_C,Temp1_C,current,Bat_voltage);
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <Task3+0x90>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe5e 	bl	80005e8 <__aeabi_f2d>
 800192c:	4682      	mov	sl, r0
 800192e:	468b      	mov	fp, r1
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <Task3+0x94>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe57 	bl	80005e8 <__aeabi_f2d>
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <Task3+0x98>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe50 	bl	80005e8 <__aeabi_f2d>
 8001948:	4680      	mov	r8, r0
 800194a:	4689      	mov	r9, r1
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <Task3+0x9c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe49 	bl	80005e8 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800195e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001962:	e9cd 4500 	strd	r4, r5, [sp]
 8001966:	4652      	mov	r2, sl
 8001968:	465b      	mov	r3, fp
 800196a:	4913      	ldr	r1, [pc, #76]	; (80019b8 <Task3+0xa0>)
 800196c:	4813      	ldr	r0, [pc, #76]	; (80019bc <Task3+0xa4>)
 800196e:	f008 fcaf 	bl	800a2d0 <siprintf>
		HAL_UART_Transmit(&huart5, (void *)BT_Buff, strlen(BT_Buff), 100);
 8001972:	4812      	ldr	r0, [pc, #72]	; (80019bc <Task3+0xa4>)
 8001974:	f7fe fccc 	bl	8000310 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	b29a      	uxth	r2, r3
 800197c:	2364      	movs	r3, #100	; 0x64
 800197e:	490f      	ldr	r1, [pc, #60]	; (80019bc <Task3+0xa4>)
 8001980:	480f      	ldr	r0, [pc, #60]	; (80019c0 <Task3+0xa8>)
 8001982:	f002 fd45 	bl	8004410 <HAL_UART_Transmit>
					vTaskResume(T1_Handle);
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <Task3+0xac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 ff78 	bl	8005880 <vTaskResume>
					vTaskResume(T2_Handle);
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <Task3+0xb0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f003 ff73 	bl	8005880 <vTaskResume>
					vTaskSuspend(T3_Handle);
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <Task3+0xb4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fe7a 	bl	8005698 <vTaskSuspend>
		sprintf(BT_Buff,"Temperature_T1=%.2f C\nTemperature_T2=%.2f C\nBattery_Current=%.2f A\nBattery_Voltage=%.2f V\n\n",Temp_C,Temp1_C,current,Bat_voltage);
 80019a4:	e7bd      	b.n	8001922 <Task3+0xa>
 80019a6:	bf00      	nop
 80019a8:	200003d4 	.word	0x200003d4
 80019ac:	200003d8 	.word	0x200003d8
 80019b0:	200003b8 	.word	0x200003b8
 80019b4:	200003b4 	.word	0x200003b4
 80019b8:	0800e018 	.word	0x0800e018
 80019bc:	200002e0 	.word	0x200002e0
 80019c0:	20000298 	.word	0x20000298
 80019c4:	200003e8 	.word	0x200003e8
 80019c8:	200003ec 	.word	0x200003ec
 80019cc:	200003f0 	.word	0x200003f0

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d6:	f000 fc91 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019da:	f000 f84d 	bl	8001a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f000 f94f 	bl	8001c80 <MX_GPIO_Init>
  MX_ADC1_Init();
 80019e2:	f000 f8b3 	bl	8001b4c <MX_ADC1_Init>
  MX_CAN1_Init();
 80019e6:	f000 f8eb 	bl	8001bc0 <MX_CAN1_Init>
  MX_UART5_Init();
 80019ea:	f000 f91f 	bl	8001c2c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 80019ee:	4817      	ldr	r0, [pc, #92]	; (8001a4c <main+0x7c>)
 80019f0:	f001 f9e5 	bl	8002dbe <HAL_CAN_Start>
  CAN_TxHeaderInit();
 80019f4:	f000 f9ba 	bl	8001d6c <CAN_TxHeaderInit>
  	  	*DWT_CYCCNT = *DWT_CYCCNT | (1 << 0);
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <main+0x80>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <main+0x80>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6013      	str	r3, [r2, #0]
        SEGGER_SYSVIEW_Conf();
 8001a04:	f005 fe90 	bl	8007728 <SEGGER_SYSVIEW_Conf>
       // SEGGER_SYSVIEW_Start();

       xTaskCreate(Task1, "Battery_Sensosr_Parameters", 200,NULL, 2,&T1_Handle);
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <main+0x84>)
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2300      	movs	r3, #0
 8001a12:	22c8      	movs	r2, #200	; 0xc8
 8001a14:	4910      	ldr	r1, [pc, #64]	; (8001a58 <main+0x88>)
 8001a16:	4811      	ldr	r0, [pc, #68]	; (8001a5c <main+0x8c>)
 8001a18:	f003 fcd7 	bl	80053ca <xTaskCreate>
       xTaskCreate(Task2, "Data Transmit",200,NULL, 1,&T2_Handle);
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <main+0x90>)
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	2301      	movs	r3, #1
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2300      	movs	r3, #0
 8001a26:	22c8      	movs	r2, #200	; 0xc8
 8001a28:	490e      	ldr	r1, [pc, #56]	; (8001a64 <main+0x94>)
 8001a2a:	480f      	ldr	r0, [pc, #60]	; (8001a68 <main+0x98>)
 8001a2c:	f003 fccd 	bl	80053ca <xTaskCreate>
       xTaskCreate(Task3, "BLE TX ",200,NULL,1,&T3_Handle);
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <main+0x9c>)
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2301      	movs	r3, #1
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	22c8      	movs	r2, #200	; 0xc8
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <main+0xa0>)
 8001a3e:	480d      	ldr	r0, [pc, #52]	; (8001a74 <main+0xa4>)
 8001a40:	f003 fcc3 	bl	80053ca <xTaskCreate>
       vTaskStartScheduler();
 8001a44:	f003 fff8 	bl	8005a38 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <main+0x78>
 8001a4a:	bf00      	nop
 8001a4c:	20000270 	.word	0x20000270
 8001a50:	e0001000 	.word	0xe0001000
 8001a54:	200003e8 	.word	0x200003e8
 8001a58:	0800e074 	.word	0x0800e074
 8001a5c:	08001231 	.word	0x08001231
 8001a60:	200003ec 	.word	0x200003ec
 8001a64:	0800e090 	.word	0x0800e090
 8001a68:	0800187d 	.word	0x0800187d
 8001a6c:	200003f0 	.word	0x200003f0
 8001a70:	0800e0a0 	.word	0x0800e0a0
 8001a74:	08001919 	.word	0x08001919

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b094      	sub	sp, #80	; 0x50
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	2230      	movs	r2, #48	; 0x30
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f008 fc95 	bl	800a3b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <SystemClock_Config+0xcc>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	4a27      	ldr	r2, [pc, #156]	; (8001b44 <SystemClock_Config+0xcc>)
 8001aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <SystemClock_Config+0xcc>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <SystemClock_Config+0xd0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a21      	ldr	r2, [pc, #132]	; (8001b48 <SystemClock_Config+0xd0>)
 8001ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <SystemClock_Config+0xd0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001adc:	2310      	movs	r3, #16
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001aec:	23a8      	movs	r3, #168	; 0xa8
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001af4:	2304      	movs	r3, #4
 8001af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af8:	f107 0320 	add.w	r3, r7, #32
 8001afc:	4618      	mov	r0, r3
 8001afe:	f001 fd0b 	bl	8003518 <HAL_RCC_OscConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b08:	f000 f95c 	bl	8001dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2105      	movs	r1, #5
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f001 ff6c 	bl	8003a08 <HAL_RCC_ClockConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b36:	f000 f945 	bl	8001dc4 <Error_Handler>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3750      	adds	r7, #80	; 0x50
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40007000 	.word	0x40007000

08001b4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b52:	4a19      	ldr	r2, [pc, #100]	; (8001bb8 <MX_ADC1_Init+0x6c>)
 8001b54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <MX_ADC1_Init+0x70>)
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_ADC1_Init+0x68>)
 8001ba0:	f000 fc12 	bl	80023c8 <HAL_ADC_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8001baa:	f000 f90b 	bl	8001dc4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000228 	.word	0x20000228
 8001bb8:	40012000 	.word	0x40012000
 8001bbc:	0f000001 	.word	0x0f000001

08001bc0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <MX_CAN1_Init+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001bcc:	2203      	movs	r2, #3
 8001bce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001bde:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001be2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001be6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <MX_CAN1_Init+0x64>)
 8001c12:	f000 ffd9 	bl	8002bc8 <HAL_CAN_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c1c:	f000 f8d2 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000270 	.word	0x20000270
 8001c28:	40006400 	.word	0x40006400

08001c2c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_UART5_Init+0x4c>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <MX_UART5_Init+0x50>)
 8001c34:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_UART5_Init+0x4c>)
 8001c38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c3c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_UART5_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_UART5_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_UART5_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_UART5_Init+0x4c>)
 8001c52:	220c      	movs	r2, #12
 8001c54:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_UART5_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_UART5_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_UART5_Init+0x4c>)
 8001c64:	f002 fb84 	bl	8004370 <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001c6e:	f000 f8a9 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000298 	.word	0x20000298
 8001c7c:	40005000 	.word	0x40005000

08001c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a31      	ldr	r2, [pc, #196]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a2a      	ldr	r2, [pc, #168]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001cbc:	f043 0308 	orr.w	r3, r3, #8
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_GPIO_Init+0xe4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8001d06:	2201      	movs	r2, #1
 8001d08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d0c:	4816      	ldr	r0, [pc, #88]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001d0e:	f001 fbe9 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001d18:	4813      	ldr	r0, [pc, #76]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001d1a:	f001 fbe3 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d24:	2311      	movs	r3, #17
 8001d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	480c      	ldr	r0, [pc, #48]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001d38:	f001 fa38 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d3c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4804      	ldr	r0, [pc, #16]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001d56:	f001 fa29 	bl	80031ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020c00 	.word	0x40020c00

08001d6c <CAN_TxHeaderInit>:

/* USER CODE BEGIN 4 */
void CAN_TxHeaderInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

	  TxHeader.StdId =OwnID;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <CAN_TxHeaderInit+0x2c>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <CAN_TxHeaderInit+0x30>)
 8001d78:	601a      	str	r2, [r3, #0]
	  TxHeader.IDE = CAN_ID_STD;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <CAN_TxHeaderInit+0x30>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <CAN_TxHeaderInit+0x30>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
	  TxHeader.DLC = 8;
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <CAN_TxHeaderInit+0x30>)
 8001d88:	2208      	movs	r2, #8
 8001d8a:	611a      	str	r2, [r3, #16]

}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000204 	.word	0x20000204

08001da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001db2:	f000 fac5 	bl	8002340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40014400 	.word	0x40014400

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <Error_Handler+0x8>
	...

08001dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x4c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
 vInitPrioGroupValue();
 8001e0e:	f005 f85b 	bl	8006ec8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_ADC_MspInit+0x7c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d127      	bne.n	8001e92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e7a:	231f      	movs	r3, #31
 8001e7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <HAL_ADC_MspInit+0x84>)
 8001e8e:	f001 f98d 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40012000 	.word	0x40012000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <HAL_CAN_MspInit+0x84>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d12c      	bne.n	8001f24 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_CAN_MspInit+0x88>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a17      	ldr	r2, [pc, #92]	; (8001f30 <HAL_CAN_MspInit+0x88>)
 8001ed4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_CAN_MspInit+0x88>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_CAN_MspInit+0x88>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <HAL_CAN_MspInit+0x88>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_CAN_MspInit+0x88>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f14:	2309      	movs	r3, #9
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4805      	ldr	r0, [pc, #20]	; (8001f34 <HAL_CAN_MspInit+0x8c>)
 8001f20:	f001 f944 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f24:	bf00      	nop
 8001f26:	3728      	adds	r7, #40	; 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40006400 	.word	0x40006400
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020400 	.word	0x40020400

08001f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <HAL_UART_MspInit+0xc0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d14a      	bne.n	8001ff0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_UART_MspInit+0xc4>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <HAL_UART_MspInit+0xc4>)
 8001f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_UART_MspInit+0xc4>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_UART_MspInit+0xc4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_UART_MspInit+0xc4>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_UART_MspInit+0xc4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_UART_MspInit+0xc4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_UART_MspInit+0xc4>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_UART_MspInit+0xc4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480d      	ldr	r0, [pc, #52]	; (8002000 <HAL_UART_MspInit+0xc8>)
 8001fcc:	f001 f8ee 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4806      	ldr	r0, [pc, #24]	; (8002004 <HAL_UART_MspInit+0xcc>)
 8001fec:	f001 f8de 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	; 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40005000 	.word	0x40005000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020800 	.word	0x40020800
 8002004:	40020c00 	.word	0x40020c00

08002008 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	; 0x30
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_InitTick+0xd4>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <HAL_InitTick+0xd4>)
 8002022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002026:	6453      	str	r3, [r2, #68]	; 0x44
 8002028:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <HAL_InitTick+0xd4>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002034:	f107 020c 	add.w	r2, r7, #12
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f001 fec2 	bl	8003dc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002044:	f001 feac 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8002048:	4603      	mov	r3, r0
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <HAL_InitTick+0xd8>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0c9b      	lsrs	r3, r3, #18
 8002058:	3b01      	subs	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_InitTick+0xdc>)
 800205e:	4a22      	ldr	r2, [pc, #136]	; (80020e8 <HAL_InitTick+0xe0>)
 8002060:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_InitTick+0xdc>)
 8002064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002068:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_InitTick+0xdc>)
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_InitTick+0xdc>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_InitTick+0xdc>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_InitTick+0xdc>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8002082:	4818      	ldr	r0, [pc, #96]	; (80020e4 <HAL_InitTick+0xdc>)
 8002084:	f001 fed2 	bl	8003e2c <HAL_TIM_Base_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800208e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11b      	bne.n	80020ce <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002096:	4813      	ldr	r0, [pc, #76]	; (80020e4 <HAL_InitTick+0xdc>)
 8002098:	f001 ff22 	bl	8003ee0 <HAL_TIM_Base_Start_IT>
 800209c:	4603      	mov	r3, r0
 800209e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80020a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d111      	bne.n	80020ce <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020aa:	2019      	movs	r0, #25
 80020ac:	f001 f870 	bl	8003190 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b0f      	cmp	r3, #15
 80020b4:	d808      	bhi.n	80020c8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80020b6:	2200      	movs	r2, #0
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	2019      	movs	r0, #25
 80020bc:	f001 f84c 	bl	8003158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_InitTick+0xe4>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e002      	b.n	80020ce <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80020ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	200003f4 	.word	0x200003f4
 80020e8:	40014400 	.word	0x40014400
 80020ec:	20000010 	.word	0x20000010

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f4:	e7fe      	b.n	80020f4 <NMI_Handler+0x4>

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002122:	f001 ff4d 	bl	8003fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200003f4 	.word	0x200003f4

08002130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return 1;
 8002134:	2301      	movs	r3, #1
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_kill>:

int _kill(int pid, int sig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800214a:	f008 f975 	bl	800a438 <__errno>
 800214e:	4603      	mov	r3, r0
 8002150:	2216      	movs	r2, #22
 8002152:	601a      	str	r2, [r3, #0]
  return -1;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_exit>:

void _exit (int status)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ffe7 	bl	8002140 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002172:	e7fe      	b.n	8002172 <_exit+0x12>

08002174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00a      	b.n	800219c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002186:	f3af 8000 	nop.w
 800218a:	4601      	mov	r1, r0
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	60ba      	str	r2, [r7, #8]
 8002192:	b2ca      	uxtb	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf0      	blt.n	8002186 <_read+0x12>
  }

  return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d6:	605a      	str	r2, [r3, #4]
  return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_isatty>:

int _isatty(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f008 f8f6 	bl	800a438 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20020000 	.word	0x20020000
 8002278:	00000400 	.word	0x00000400
 800227c:	2000043c 	.word	0x2000043c
 8002280:	200149b0 	.word	0x200149b0

08002284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022ac:	f7ff ffea 	bl	8002284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b0:	480c      	ldr	r0, [pc, #48]	; (80022e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022b2:	490d      	ldr	r1, [pc, #52]	; (80022e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b8:	e002      	b.n	80022c0 <LoopCopyDataInit>

080022ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022be:	3304      	adds	r3, #4

080022c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c4:	d3f9      	bcc.n	80022ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022c8:	4c0a      	ldr	r4, [pc, #40]	; (80022f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022cc:	e001      	b.n	80022d2 <LoopFillZerobss>

080022ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d0:	3204      	adds	r2, #4

080022d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d4:	d3fb      	bcc.n	80022ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022d6:	f008 f8b5 	bl	800a444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7ff fb79 	bl	80019d0 <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80022ec:	0800e600 	.word	0x0800e600
  ldr r2, =_sbss
 80022f0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80022f4:	200149ac 	.word	0x200149ac

080022f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_Init+0x40>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_Init+0x40>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x40>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 ff0c 	bl	8003142 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	200f      	movs	r0, #15
 800232c:	f7ff fe6c 	bl	8002008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fd4e 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000014 	.word	0x20000014
 8002364:	20000440 	.word	0x20000440

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000440 	.word	0x20000440

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000014 	.word	0x20000014

080023c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e033      	b.n	8002446 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fd1a 	bl	8001e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800240e:	f023 0302 	bic.w	r3, r3, #2
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fad8 	bl	80029d0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
 8002436:	e001      	b.n	800243c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_ADC_Start+0x1a>
 8002466:	2302      	movs	r3, #2
 8002468:	e0b2      	b.n	80025d0 <HAL_ADC_Start+0x180>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d018      	beq.n	80024b2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <HAL_ADC_Start+0x18c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a52      	ldr	r2, [pc, #328]	; (80025e0 <HAL_ADC_Start+0x190>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0c9a      	lsrs	r2, r3, #18
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80024a4:	e002      	b.n	80024ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f9      	bne.n	80024a6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d17a      	bne.n	80025b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fe:	d106      	bne.n	800250e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	f023 0206 	bic.w	r2, r3, #6
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
 800250c:	e002      	b.n	8002514 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_ADC_Start+0x194>)
 800251e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002528:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b00      	cmp	r3, #0
 8002534:	d12a      	bne.n	800258c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2b      	ldr	r2, [pc, #172]	; (80025e8 <HAL_ADC_Start+0x198>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d015      	beq.n	800256c <HAL_ADC_Start+0x11c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a29      	ldr	r2, [pc, #164]	; (80025ec <HAL_ADC_Start+0x19c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d105      	bne.n	8002556 <HAL_ADC_Start+0x106>
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_ADC_Start+0x194>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a25      	ldr	r2, [pc, #148]	; (80025f0 <HAL_ADC_Start+0x1a0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d136      	bne.n	80025ce <HAL_ADC_Start+0x17e>
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_ADC_Start+0x194>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d130      	bne.n	80025ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d129      	bne.n	80025ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	e020      	b.n	80025ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <HAL_ADC_Start+0x198>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d11b      	bne.n	80025ce <HAL_ADC_Start+0x17e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d114      	bne.n	80025ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	e00b      	b.n	80025ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	431bde83 	.word	0x431bde83
 80025e4:	40012300 	.word	0x40012300
 80025e8:	40012000 	.word	0x40012000
 80025ec:	40012100 	.word	0x40012100
 80025f0:	40012200 	.word	0x40012200

080025f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_ADC_Stop+0x16>
 8002606:	2302      	movs	r3, #2
 8002608:	e021      	b.n	800264e <HAL_ADC_Stop+0x5a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002676:	d113      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002686:	d10b      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e063      	b.n	8002768 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a0:	f7ff fe62 	bl	8002368 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026a6:	e021      	b.n	80026ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d01d      	beq.n	80026ec <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_ADC_PollForConversion+0x6c>
 80026b6:	f7ff fe57 	bl	8002368 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d212      	bcs.n	80026ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d00b      	beq.n	80026ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0204 	orr.w	r2, r3, #4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e03d      	b.n	8002768 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d1d6      	bne.n	80026a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f06f 0212 	mvn.w	r2, #18
 8002702:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d123      	bne.n	8002766 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002722:	2b00      	cmp	r3, #0
 8002724:	d11f      	bne.n	8002766 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800273e:	2b00      	cmp	r3, #0
 8002740:	d111      	bne.n	8002766 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1c>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e105      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x228>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d925      	bls.n	8002804 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	3b1e      	subs	r3, #30
 80027ce:	2207      	movs	r2, #7
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43da      	mvns	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	400a      	ands	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68d9      	ldr	r1, [r3, #12]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	4603      	mov	r3, r0
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4403      	add	r3, r0
 80027f6:	3b1e      	subs	r3, #30
 80027f8:	409a      	lsls	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	e022      	b.n	800284a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6919      	ldr	r1, [r3, #16]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	2207      	movs	r2, #7
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	400a      	ands	r2, r1
 8002826:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6919      	ldr	r1, [r3, #16]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	4603      	mov	r3, r0
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4403      	add	r3, r0
 8002840:	409a      	lsls	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b06      	cmp	r3, #6
 8002850:	d824      	bhi.n	800289c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b05      	subs	r3, #5
 8002864:	221f      	movs	r2, #31
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	400a      	ands	r2, r1
 8002872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3b05      	subs	r3, #5
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	635a      	str	r2, [r3, #52]	; 0x34
 800289a:	e04c      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d824      	bhi.n	80028ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b23      	subs	r3, #35	; 0x23
 80028b6:	221f      	movs	r2, #31
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43da      	mvns	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	400a      	ands	r2, r1
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b23      	subs	r3, #35	; 0x23
 80028e0:	fa00 f203 	lsl.w	r2, r0, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
 80028ec:	e023      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3b41      	subs	r3, #65	; 0x41
 8002900:	221f      	movs	r2, #31
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	400a      	ands	r2, r1
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	3b41      	subs	r3, #65	; 0x41
 800292a:	fa00 f203 	lsl.w	r2, r0, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_ADC_ConfigChannel+0x234>)
 8002938:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a21      	ldr	r2, [pc, #132]	; (80029c4 <HAL_ADC_ConfigChannel+0x238>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d109      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1cc>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b12      	cmp	r3, #18
 800294a:	d105      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_ADC_ConfigChannel+0x238>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d123      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21e>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b10      	cmp	r3, #16
 8002968:	d003      	beq.n	8002972 <HAL_ADC_ConfigChannel+0x1e6>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b11      	cmp	r3, #17
 8002970:	d11b      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b10      	cmp	r3, #16
 8002984:	d111      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_ADC_ConfigChannel+0x23c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_ADC_ConfigChannel+0x240>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	0c9a      	lsrs	r2, r3, #18
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800299c:	e002      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f9      	bne.n	800299e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40012300 	.word	0x40012300
 80029c4:	40012000 	.word	0x40012000
 80029c8:	2000000c 	.word	0x2000000c
 80029cc:	431bde83 	.word	0x431bde83

080029d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029d8:	4b79      	ldr	r3, [pc, #484]	; (8002bc0 <ADC_Init+0x1f0>)
 80029da:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	021a      	lsls	r2, r3, #8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	4a58      	ldr	r2, [pc, #352]	; (8002bc4 <ADC_Init+0x1f4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	e00f      	b.n	8002ace <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002acc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0202 	bic.w	r2, r2, #2
 8002adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7e1b      	ldrb	r3, [r3, #24]
 8002ae8:	005a      	lsls	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01b      	beq.n	8002b34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	3b01      	subs	r3, #1
 8002b28:	035a      	lsls	r2, r3, #13
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e007      	b.n	8002b44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	051a      	lsls	r2, r3, #20
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b86:	025a      	lsls	r2, r3, #9
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	029a      	lsls	r2, r3, #10
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40012300 	.word	0x40012300
 8002bc4:	0f000001 	.word	0x0f000001

08002bc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0ed      	b.n	8002db6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff f95e 	bl	8001ea8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfc:	f7ff fbb4 	bl	8002368 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c02:	e012      	b.n	8002c2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c04:	f7ff fbb0 	bl	8002368 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b0a      	cmp	r3, #10
 8002c10:	d90b      	bls.n	8002c2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2205      	movs	r2, #5
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0c5      	b.n	8002db6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0e5      	beq.n	8002c04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0202 	bic.w	r2, r2, #2
 8002c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c48:	f7ff fb8e 	bl	8002368 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c4e:	e012      	b.n	8002c76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c50:	f7ff fb8a 	bl	8002368 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b0a      	cmp	r3, #10
 8002c5c:	d90b      	bls.n	8002c76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e09f      	b.n	8002db6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e5      	bne.n	8002c50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7e1b      	ldrb	r3, [r3, #24]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d108      	bne.n	8002c9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e007      	b.n	8002cae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7e5b      	ldrb	r3, [r3, #25]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d108      	bne.n	8002cc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e007      	b.n	8002cd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7e9b      	ldrb	r3, [r3, #26]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d108      	bne.n	8002cf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0220 	orr.w	r2, r2, #32
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e007      	b.n	8002d02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0220 	bic.w	r2, r2, #32
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7edb      	ldrb	r3, [r3, #27]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d108      	bne.n	8002d1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0210 	bic.w	r2, r2, #16
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e007      	b.n	8002d2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0210 	orr.w	r2, r2, #16
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7f1b      	ldrb	r3, [r3, #28]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d108      	bne.n	8002d46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0208 	orr.w	r2, r2, #8
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e007      	b.n	8002d56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0208 	bic.w	r2, r2, #8
 8002d54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	7f5b      	ldrb	r3, [r3, #29]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d108      	bne.n	8002d70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0204 	orr.w	r2, r2, #4
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e007      	b.n	8002d80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0204 	bic.w	r2, r2, #4
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	ea42 0103 	orr.w	r1, r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	1e5a      	subs	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d12e      	bne.n	8002e30 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dea:	f7ff fabd 	bl	8002368 <HAL_GetTick>
 8002dee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002df0:	e012      	b.n	8002e18 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002df2:	f7ff fab9 	bl	8002368 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b0a      	cmp	r3, #10
 8002dfe:	d90b      	bls.n	8002e18 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2205      	movs	r2, #5
 8002e10:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e012      	b.n	8002e3e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e5      	bne.n	8002df2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e006      	b.n	8002e3e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b089      	sub	sp, #36	; 0x24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e64:	7ffb      	ldrb	r3, [r7, #31]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d003      	beq.n	8002e72 <HAL_CAN_AddTxMessage+0x2c>
 8002e6a:	7ffb      	ldrb	r3, [r7, #31]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	f040 80ad 	bne.w	8002fcc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8095 	beq.w	8002fbc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	0e1b      	lsrs	r3, r3, #24
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002eb8:	68f9      	ldr	r1, [r7, #12]
 8002eba:	6809      	ldr	r1, [r1, #0]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3318      	adds	r3, #24
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	440b      	add	r3, r1
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e00f      	b.n	8002eea <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ed4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002eda:	68f9      	ldr	r1, [r7, #12]
 8002edc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ede:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3318      	adds	r3, #24
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	440b      	add	r3, r1
 8002ee8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	3318      	adds	r3, #24
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	440b      	add	r3, r1
 8002efa:	3304      	adds	r3, #4
 8002efc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	7d1b      	ldrb	r3, [r3, #20]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d111      	bne.n	8002f2a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3318      	adds	r3, #24
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	4413      	add	r3, r2
 8002f12:	3304      	adds	r3, #4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	6811      	ldr	r1, [r2, #0]
 8002f1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3318      	adds	r3, #24
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	440b      	add	r3, r1
 8002f26:	3304      	adds	r3, #4
 8002f28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3307      	adds	r3, #7
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	061a      	lsls	r2, r3, #24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3306      	adds	r3, #6
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3305      	adds	r3, #5
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	4313      	orrs	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	3204      	adds	r2, #4
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	6811      	ldr	r1, [r2, #0]
 8002f52:	ea43 0200 	orr.w	r2, r3, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3303      	adds	r3, #3
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	061a      	lsls	r2, r3, #24
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	041b      	lsls	r3, r3, #16
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3301      	adds	r3, #1
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	4610      	mov	r0, r2
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	6811      	ldr	r1, [r2, #0]
 8002f88:	ea43 0200 	orr.w	r2, r3, r0
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	440b      	add	r3, r1
 8002f92:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002f96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3318      	adds	r3, #24
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	4413      	add	r3, r2
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	6811      	ldr	r1, [r2, #0]
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3318      	adds	r3, #24
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	440b      	add	r3, r1
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e00e      	b.n	8002fda <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e006      	b.n	8002fda <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff4c 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316a:	f7ff ff61 	bl	8003030 <__NVIC_GetPriorityGrouping>
 800316e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f7ff ffb1 	bl	80030dc <NVIC_EncodePriority>
 800317a:	4602      	mov	r2, r0
 800317c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff80 	bl	8003088 <__NVIC_SetPriority>
}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff54 	bl	800304c <__NVIC_EnableIRQ>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	e16b      	b.n	80034a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c8:	2201      	movs	r2, #1
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	f040 815a 	bne.w	800349a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d005      	beq.n	80031fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d130      	bne.n	8003260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	2203      	movs	r2, #3
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003234:	2201      	movs	r2, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 0201 	and.w	r2, r3, #1
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b03      	cmp	r3, #3
 800326a:	d017      	beq.n	800329c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	2203      	movs	r2, #3
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d123      	bne.n	80032f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	08da      	lsrs	r2, r3, #3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3208      	adds	r2, #8
 80032b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	220f      	movs	r2, #15
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	08da      	lsrs	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	69b9      	ldr	r1, [r7, #24]
 80032ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	2203      	movs	r2, #3
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0203 	and.w	r2, r3, #3
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80b4 	beq.w	800349a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	4b60      	ldr	r3, [pc, #384]	; (80034b8 <HAL_GPIO_Init+0x30c>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	4a5f      	ldr	r2, [pc, #380]	; (80034b8 <HAL_GPIO_Init+0x30c>)
 800333c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003340:	6453      	str	r3, [r2, #68]	; 0x44
 8003342:	4b5d      	ldr	r3, [pc, #372]	; (80034b8 <HAL_GPIO_Init+0x30c>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800334e:	4a5b      	ldr	r2, [pc, #364]	; (80034bc <HAL_GPIO_Init+0x310>)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	3302      	adds	r3, #2
 8003356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	220f      	movs	r2, #15
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a52      	ldr	r2, [pc, #328]	; (80034c0 <HAL_GPIO_Init+0x314>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d02b      	beq.n	80033d2 <HAL_GPIO_Init+0x226>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a51      	ldr	r2, [pc, #324]	; (80034c4 <HAL_GPIO_Init+0x318>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d025      	beq.n	80033ce <HAL_GPIO_Init+0x222>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a50      	ldr	r2, [pc, #320]	; (80034c8 <HAL_GPIO_Init+0x31c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01f      	beq.n	80033ca <HAL_GPIO_Init+0x21e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4f      	ldr	r2, [pc, #316]	; (80034cc <HAL_GPIO_Init+0x320>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d019      	beq.n	80033c6 <HAL_GPIO_Init+0x21a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4e      	ldr	r2, [pc, #312]	; (80034d0 <HAL_GPIO_Init+0x324>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_GPIO_Init+0x216>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4d      	ldr	r2, [pc, #308]	; (80034d4 <HAL_GPIO_Init+0x328>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00d      	beq.n	80033be <HAL_GPIO_Init+0x212>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4c      	ldr	r2, [pc, #304]	; (80034d8 <HAL_GPIO_Init+0x32c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <HAL_GPIO_Init+0x20e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4b      	ldr	r2, [pc, #300]	; (80034dc <HAL_GPIO_Init+0x330>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <HAL_GPIO_Init+0x20a>
 80033b2:	2307      	movs	r3, #7
 80033b4:	e00e      	b.n	80033d4 <HAL_GPIO_Init+0x228>
 80033b6:	2308      	movs	r3, #8
 80033b8:	e00c      	b.n	80033d4 <HAL_GPIO_Init+0x228>
 80033ba:	2306      	movs	r3, #6
 80033bc:	e00a      	b.n	80033d4 <HAL_GPIO_Init+0x228>
 80033be:	2305      	movs	r3, #5
 80033c0:	e008      	b.n	80033d4 <HAL_GPIO_Init+0x228>
 80033c2:	2304      	movs	r3, #4
 80033c4:	e006      	b.n	80033d4 <HAL_GPIO_Init+0x228>
 80033c6:	2303      	movs	r3, #3
 80033c8:	e004      	b.n	80033d4 <HAL_GPIO_Init+0x228>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e002      	b.n	80033d4 <HAL_GPIO_Init+0x228>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_GPIO_Init+0x228>
 80033d2:	2300      	movs	r3, #0
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	f002 0203 	and.w	r2, r2, #3
 80033da:	0092      	lsls	r2, r2, #2
 80033dc:	4093      	lsls	r3, r2
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e4:	4935      	ldr	r1, [pc, #212]	; (80034bc <HAL_GPIO_Init+0x310>)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	3302      	adds	r3, #2
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_GPIO_Init+0x334>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003416:	4a32      	ldr	r2, [pc, #200]	; (80034e0 <HAL_GPIO_Init+0x334>)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800341c:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <HAL_GPIO_Init+0x334>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003440:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <HAL_GPIO_Init+0x334>)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_GPIO_Init+0x334>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346a:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <HAL_GPIO_Init+0x334>)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_GPIO_Init+0x334>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003494:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <HAL_GPIO_Init+0x334>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3301      	adds	r3, #1
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	f67f ae90 	bls.w	80031c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40013800 	.word	0x40013800
 80034c0:	40020000 	.word	0x40020000
 80034c4:	40020400 	.word	0x40020400
 80034c8:	40020800 	.word	0x40020800
 80034cc:	40020c00 	.word	0x40020c00
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40021400 	.word	0x40021400
 80034d8:	40021800 	.word	0x40021800
 80034dc:	40021c00 	.word	0x40021c00
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f4:	787b      	ldrb	r3, [r7, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003500:	e003      	b.n	800350a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e267      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d075      	beq.n	8003622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003536:	4b88      	ldr	r3, [pc, #544]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b04      	cmp	r3, #4
 8003540:	d00c      	beq.n	800355c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b85      	ldr	r3, [pc, #532]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354a:	2b08      	cmp	r3, #8
 800354c:	d112      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354e:	4b82      	ldr	r3, [pc, #520]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355a:	d10b      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	4b7e      	ldr	r3, [pc, #504]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d05b      	beq.n	8003620 <HAL_RCC_OscConfig+0x108>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d157      	bne.n	8003620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e242      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d106      	bne.n	800358c <HAL_RCC_OscConfig+0x74>
 800357e:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a75      	ldr	r2, [pc, #468]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e01d      	b.n	80035c8 <HAL_RCC_OscConfig+0xb0>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x98>
 8003596:	4b70      	ldr	r3, [pc, #448]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6f      	ldr	r2, [pc, #444]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6c      	ldr	r2, [pc, #432]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0xb0>
 80035b0:	4b69      	ldr	r3, [pc, #420]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a68      	ldr	r2, [pc, #416]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a65      	ldr	r2, [pc, #404]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fe feca 	bl	8002368 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe fec6 	bl	8002368 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e207      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b5b      	ldr	r3, [pc, #364]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0xc0>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe feb6 	bl	8002368 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe feb2 	bl	8002368 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1f3      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	4b51      	ldr	r3, [pc, #324]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0xe8>
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d063      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362e:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003642:	2b08      	cmp	r3, #8
 8003644:	d11c      	bne.n	8003680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003646:	4b44      	ldr	r3, [pc, #272]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d116      	bne.n	8003680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_RCC_OscConfig+0x152>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e1c7      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366a:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4937      	ldr	r1, [pc, #220]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	e03a      	b.n	80036f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003688:	4b34      	ldr	r3, [pc, #208]	; (800375c <HAL_RCC_OscConfig+0x244>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fe fe6b 	bl	8002368 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003696:	f7fe fe67 	bl	8002368 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1a8      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4b28      	ldr	r3, [pc, #160]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4925      	ldr	r1, [pc, #148]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ca:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_RCC_OscConfig+0x244>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fe fe4a 	bl	8002368 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d8:	f7fe fe46 	bl	8002368 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e187      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d036      	beq.n	8003770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_RCC_OscConfig+0x248>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fe fe2a 	bl	8002368 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003718:	f7fe fe26 	bl	8002368 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e167      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800372c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x200>
 8003736:	e01b      	b.n	8003770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RCC_OscConfig+0x248>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7fe fe13 	bl	8002368 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	e00e      	b.n	8003764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003746:	f7fe fe0f 	bl	8002368 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d907      	bls.n	8003764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e150      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
 8003758:	40023800 	.word	0x40023800
 800375c:	42470000 	.word	0x42470000
 8003760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003764:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ea      	bne.n	8003746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8097 	beq.w	80038ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003782:	4b81      	ldr	r3, [pc, #516]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	4b7d      	ldr	r3, [pc, #500]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	4a7c      	ldr	r2, [pc, #496]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	6413      	str	r3, [r2, #64]	; 0x40
 800379e:	4b7a      	ldr	r3, [pc, #488]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ae:	4b77      	ldr	r3, [pc, #476]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d118      	bne.n	80037ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ba:	4b74      	ldr	r3, [pc, #464]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a73      	ldr	r2, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c6:	f7fe fdcf 	bl	8002368 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7fe fdcb 	bl	8002368 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e10c      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d106      	bne.n	8003802 <HAL_RCC_OscConfig+0x2ea>
 80037f4:	4b64      	ldr	r3, [pc, #400]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a63      	ldr	r2, [pc, #396]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003800:	e01c      	b.n	800383c <HAL_RCC_OscConfig+0x324>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b05      	cmp	r3, #5
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x30c>
 800380a:	4b5f      	ldr	r3, [pc, #380]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a5e      	ldr	r2, [pc, #376]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	4b5c      	ldr	r3, [pc, #368]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	4a5b      	ldr	r2, [pc, #364]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6713      	str	r3, [r2, #112]	; 0x70
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0x324>
 8003824:	4b58      	ldr	r3, [pc, #352]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a57      	ldr	r2, [pc, #348]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
 8003830:	4b55      	ldr	r3, [pc, #340]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a54      	ldr	r2, [pc, #336]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003836:	f023 0304 	bic.w	r3, r3, #4
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d015      	beq.n	8003870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe fd90 	bl	8002368 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe fd8c 	bl	8002368 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0cb      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003862:	4b49      	ldr	r3, [pc, #292]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ee      	beq.n	800384c <HAL_RCC_OscConfig+0x334>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003870:	f7fe fd7a 	bl	8002368 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fe fd76 	bl	8002368 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e0b5      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388e:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ee      	bne.n	8003878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4a38      	ldr	r2, [pc, #224]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80a1 	beq.w	80039f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b6:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d05c      	beq.n	800397c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d141      	bne.n	800394e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fe fd4a 	bl	8002368 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fe fd46 	bl	8002368 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e087      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	4b27      	ldr	r3, [pc, #156]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	019b      	lsls	r3, r3, #6
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	3b01      	subs	r3, #1
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	491b      	ldr	r1, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe fd1f 	bl	8002368 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fd1b 	bl	8002368 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e05c      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x416>
 800394c:	e054      	b.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe fd08 	bl	8002368 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe fd04 	bl	8002368 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e045      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x444>
 800397a:	e03d      	b.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e038      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
 8003988:	40023800 	.word	0x40023800
 800398c:	40007000 	.word	0x40007000
 8003990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_RCC_OscConfig+0x4ec>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d028      	beq.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d121      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d11a      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d111      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d90c      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	494d      	ldr	r1, [pc, #308]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d044      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d119      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e067      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4934      	ldr	r1, [pc, #208]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af8:	f7fe fc36 	bl	8002368 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fe fc32 	bl	8002368 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d20c      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	490a      	ldr	r1, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	5ccb      	ldrb	r3, [r1, r3]
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fa2a 	bl	8002008 <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023c00 	.word	0x40023c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	0800e184 	.word	0x0800e184
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	20000010 	.word	0x20000010

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b090      	sub	sp, #64	; 0x40
 8003bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
 8003be0:	2300      	movs	r3, #0
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be4:	2300      	movs	r3, #0
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d00d      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	f200 80a1 	bhi.w	8003d40 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x34>
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c06:	e09b      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c0c:	e09b      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c0e:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c12:	e098      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c14:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1e:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d028      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2a:	4b4a      	ldr	r3, [pc, #296]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	2200      	movs	r2, #0
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	627a      	str	r2, [r7, #36]	; 0x24
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c40:	fb03 f201 	mul.w	r2, r3, r1
 8003c44:	2300      	movs	r3, #0
 8003c46:	fb00 f303 	mul.w	r3, r0, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c4e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c54:	460a      	mov	r2, r1
 8003c56:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5a:	4413      	add	r3, r2
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c60:	2200      	movs	r2, #0
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	61fa      	str	r2, [r7, #28]
 8003c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c6e:	f7fd f85b 	bl	8000d28 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4613      	mov	r3, r2
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7a:	e053      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7c:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	2200      	movs	r2, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	617a      	str	r2, [r7, #20]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c8e:	f04f 0b00 	mov.w	fp, #0
 8003c92:	4652      	mov	r2, sl
 8003c94:	465b      	mov	r3, fp
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	0159      	lsls	r1, r3, #5
 8003ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca4:	0150      	lsls	r0, r2, #5
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	ebb2 080a 	subs.w	r8, r2, sl
 8003cae:	eb63 090b 	sbc.w	r9, r3, fp
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cc6:	ebb2 0408 	subs.w	r4, r2, r8
 8003cca:	eb63 0509 	sbc.w	r5, r3, r9
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	00eb      	lsls	r3, r5, #3
 8003cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cdc:	00e2      	lsls	r2, r4, #3
 8003cde:	4614      	mov	r4, r2
 8003ce0:	461d      	mov	r5, r3
 8003ce2:	eb14 030a 	adds.w	r3, r4, sl
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	eb45 030b 	adc.w	r3, r5, fp
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	028b      	lsls	r3, r1, #10
 8003cfe:	4621      	mov	r1, r4
 8003d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d04:	4621      	mov	r1, r4
 8003d06:	028a      	lsls	r2, r1, #10
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	60fa      	str	r2, [r7, #12]
 8003d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d18:	f7fd f806 	bl	8000d28 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4613      	mov	r3, r2
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3740      	adds	r7, #64	; 0x40
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	017d7840 	.word	0x017d7840

08003d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d7c:	f7ff fff0 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0a9b      	lsrs	r3, r3, #10
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4903      	ldr	r1, [pc, #12]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	0800e194 	.word	0x0800e194

08003da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da4:	f7ff ffdc 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0b5b      	lsrs	r3, r3, #13
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4903      	ldr	r1, [pc, #12]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	0800e194 	.word	0x0800e194

08003dc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0203 	and.w	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	08db      	lsrs	r3, r3, #3
 8003e02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_RCC_GetClockConfig+0x60>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0207 	and.w	r2, r3, #7
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	601a      	str	r2, [r3, #0]
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40023c00 	.word	0x40023c00

08003e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e041      	b.n	8003ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f839 	bl	8003eca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f000 f9c0 	bl	80041f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d001      	beq.n	8003ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e04e      	b.n	8003f96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d022      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x80>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d01d      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x80>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d018      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x80>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <HAL_TIM_Base_Start_IT+0xcc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d013      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x80>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00e      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x80>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d009      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x80>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d004      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x80>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <HAL_TIM_Base_Start_IT+0xdc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d111      	bne.n	8003f84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d010      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0201 	orr.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f82:	e007      	b.n	8003f94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40001800 	.word	0x40001800

08003fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d020      	beq.n	8004024 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01b      	beq.n	8004024 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0202 	mvn.w	r2, #2
 8003ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8d2 	bl	80041b4 <HAL_TIM_IC_CaptureCallback>
 8004010:	e005      	b.n	800401e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8c4 	bl	80041a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8d5 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d020      	beq.n	8004070 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01b      	beq.n	8004070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0204 	mvn.w	r2, #4
 8004040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f8ac 	bl	80041b4 <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f89e 	bl	80041a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8af 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d020      	beq.n	80040bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01b      	beq.n	80040bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0208 	mvn.w	r2, #8
 800408c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2204      	movs	r2, #4
 8004092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f886 	bl	80041b4 <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f878 	bl	80041a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f889 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d020      	beq.n	8004108 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01b      	beq.n	8004108 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0210 	mvn.w	r2, #16
 80040d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2208      	movs	r2, #8
 80040de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f860 	bl	80041b4 <HAL_TIM_IC_CaptureCallback>
 80040f4:	e005      	b.n	8004102 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f852 	bl	80041a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f863 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00c      	beq.n	800412c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0201 	mvn.w	r2, #1
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fd fe3a 	bl	8001da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00c      	beq.n	8004150 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f906 	bl	800435c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00c      	beq.n	8004174 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f834 	bl	80041dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d007      	beq.n	8004198 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0220 	mvn.w	r2, #32
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f8d8 	bl	8004348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a46      	ldr	r2, [pc, #280]	; (800431c <TIM_Base_SetConfig+0x12c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d013      	beq.n	8004230 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420e:	d00f      	beq.n	8004230 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a43      	ldr	r2, [pc, #268]	; (8004320 <TIM_Base_SetConfig+0x130>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00b      	beq.n	8004230 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a42      	ldr	r2, [pc, #264]	; (8004324 <TIM_Base_SetConfig+0x134>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d007      	beq.n	8004230 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a41      	ldr	r2, [pc, #260]	; (8004328 <TIM_Base_SetConfig+0x138>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a40      	ldr	r2, [pc, #256]	; (800432c <TIM_Base_SetConfig+0x13c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d108      	bne.n	8004242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a35      	ldr	r2, [pc, #212]	; (800431c <TIM_Base_SetConfig+0x12c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d02b      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004250:	d027      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a32      	ldr	r2, [pc, #200]	; (8004320 <TIM_Base_SetConfig+0x130>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d023      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a31      	ldr	r2, [pc, #196]	; (8004324 <TIM_Base_SetConfig+0x134>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01f      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a30      	ldr	r2, [pc, #192]	; (8004328 <TIM_Base_SetConfig+0x138>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01b      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2f      	ldr	r2, [pc, #188]	; (800432c <TIM_Base_SetConfig+0x13c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d017      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <TIM_Base_SetConfig+0x140>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2d      	ldr	r2, [pc, #180]	; (8004334 <TIM_Base_SetConfig+0x144>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00f      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2c      	ldr	r2, [pc, #176]	; (8004338 <TIM_Base_SetConfig+0x148>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00b      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2b      	ldr	r2, [pc, #172]	; (800433c <TIM_Base_SetConfig+0x14c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d007      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <TIM_Base_SetConfig+0x150>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a29      	ldr	r2, [pc, #164]	; (8004344 <TIM_Base_SetConfig+0x154>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d108      	bne.n	80042b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a10      	ldr	r2, [pc, #64]	; (800431c <TIM_Base_SetConfig+0x12c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_Base_SetConfig+0xf8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <TIM_Base_SetConfig+0x13c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d103      	bne.n	80042f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f023 0201 	bic.w	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	611a      	str	r2, [r3, #16]
  }
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40010400 	.word	0x40010400
 8004330:	40014000 	.word	0x40014000
 8004334:	40014400 	.word	0x40014400
 8004338:	40014800 	.word	0x40014800
 800433c:	40001800 	.word	0x40001800
 8004340:	40001c00 	.word	0x40001c00
 8004344:	40002000 	.word	0x40002000

08004348 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e042      	b.n	8004408 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd fdce 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f973 	bl	80046a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b20      	cmp	r3, #32
 800442e:	d175      	bne.n	800451c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_UART_Transmit+0x2c>
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e06e      	b.n	800451e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2221      	movs	r2, #33	; 0x21
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444e:	f7fd ff8b 	bl	8002368 <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	88fa      	ldrh	r2, [r7, #6]
 800445e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004468:	d108      	bne.n	800447c <HAL_UART_Transmit+0x6c>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d104      	bne.n	800447c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	e003      	b.n	8004484 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004484:	e02e      	b.n	80044e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	2180      	movs	r1, #128	; 0x80
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f848 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e03a      	b.n	800451e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	3302      	adds	r3, #2
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e007      	b.n	80044d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1cb      	bne.n	8004486 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2200      	movs	r2, #0
 80044f6:	2140      	movs	r1, #64	; 0x40
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f814 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e006      	b.n	800451e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b086      	sub	sp, #24
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	e03b      	b.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d037      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004540:	f7fd ff12 	bl	8002368 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	6a3a      	ldr	r2, [r7, #32]
 800454c:	429a      	cmp	r2, r3
 800454e:	d302      	bcc.n	8004556 <UART_WaitOnFlagUntilTimeout+0x30>
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e03a      	b.n	80045d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d023      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d020      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b40      	cmp	r3, #64	; 0x40
 8004572:	d01d      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b08      	cmp	r3, #8
 8004580:	d116      	bne.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f81d 	bl	80045d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2208      	movs	r2, #8
 80045a2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e00f      	b.n	80045d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	429a      	cmp	r2, r3
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d0b4      	beq.n	8004538 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b095      	sub	sp, #84	; 0x54
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004600:	643a      	str	r2, [r7, #64]	; 0x40
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e5      	bne.n	80045e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3314      	adds	r3, #20
 800461a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	61fb      	str	r3, [r7, #28]
   return(result);
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3314      	adds	r3, #20
 8004632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800463a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e5      	bne.n	8004614 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	2b01      	cmp	r3, #1
 800464e:	d119      	bne.n	8004684 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f023 0310 	bic.w	r3, r3, #16
 8004666:	647b      	str	r3, [r7, #68]	; 0x44
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004670:	61ba      	str	r2, [r7, #24]
 8004672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6979      	ldr	r1, [r7, #20]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	613b      	str	r3, [r7, #16]
   return(result);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e5      	bne.n	8004650 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004692:	bf00      	nop
 8004694:	3754      	adds	r7, #84	; 0x54
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a4:	b0c0      	sub	sp, #256	; 0x100
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	68d9      	ldr	r1, [r3, #12]
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	ea40 0301 	orr.w	r3, r0, r1
 80046c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	431a      	orrs	r2, r3
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046f8:	f021 010c 	bic.w	r1, r1, #12
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004706:	430b      	orrs	r3, r1
 8004708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471a:	6999      	ldr	r1, [r3, #24]
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	ea40 0301 	orr.w	r3, r0, r1
 8004726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b8f      	ldr	r3, [pc, #572]	; (800496c <UART_SetConfig+0x2cc>)
 8004730:	429a      	cmp	r2, r3
 8004732:	d005      	beq.n	8004740 <UART_SetConfig+0xa0>
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b8d      	ldr	r3, [pc, #564]	; (8004970 <UART_SetConfig+0x2d0>)
 800473c:	429a      	cmp	r2, r3
 800473e:	d104      	bne.n	800474a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7ff fb2e 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8004744:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004748:	e003      	b.n	8004752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800474a:	f7ff fb15 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 800474e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475c:	f040 810c 	bne.w	8004978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004764:	2200      	movs	r2, #0
 8004766:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800476a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800476e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004772:	4622      	mov	r2, r4
 8004774:	462b      	mov	r3, r5
 8004776:	1891      	adds	r1, r2, r2
 8004778:	65b9      	str	r1, [r7, #88]	; 0x58
 800477a:	415b      	adcs	r3, r3
 800477c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800477e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004782:	4621      	mov	r1, r4
 8004784:	eb12 0801 	adds.w	r8, r2, r1
 8004788:	4629      	mov	r1, r5
 800478a:	eb43 0901 	adc.w	r9, r3, r1
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800479a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800479e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047a2:	4690      	mov	r8, r2
 80047a4:	4699      	mov	r9, r3
 80047a6:	4623      	mov	r3, r4
 80047a8:	eb18 0303 	adds.w	r3, r8, r3
 80047ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047b0:	462b      	mov	r3, r5
 80047b2:	eb49 0303 	adc.w	r3, r9, r3
 80047b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047ce:	460b      	mov	r3, r1
 80047d0:	18db      	adds	r3, r3, r3
 80047d2:	653b      	str	r3, [r7, #80]	; 0x50
 80047d4:	4613      	mov	r3, r2
 80047d6:	eb42 0303 	adc.w	r3, r2, r3
 80047da:	657b      	str	r3, [r7, #84]	; 0x54
 80047dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047e4:	f7fc faa0 	bl	8000d28 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4b61      	ldr	r3, [pc, #388]	; (8004974 <UART_SetConfig+0x2d4>)
 80047ee:	fba3 2302 	umull	r2, r3, r3, r2
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	011c      	lsls	r4, r3, #4
 80047f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004800:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	1891      	adds	r1, r2, r2
 800480e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004810:	415b      	adcs	r3, r3
 8004812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004818:	4641      	mov	r1, r8
 800481a:	eb12 0a01 	adds.w	sl, r2, r1
 800481e:	4649      	mov	r1, r9
 8004820:	eb43 0b01 	adc.w	fp, r3, r1
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004838:	4692      	mov	sl, r2
 800483a:	469b      	mov	fp, r3
 800483c:	4643      	mov	r3, r8
 800483e:	eb1a 0303 	adds.w	r3, sl, r3
 8004842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004846:	464b      	mov	r3, r9
 8004848:	eb4b 0303 	adc.w	r3, fp, r3
 800484c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800485c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004864:	460b      	mov	r3, r1
 8004866:	18db      	adds	r3, r3, r3
 8004868:	643b      	str	r3, [r7, #64]	; 0x40
 800486a:	4613      	mov	r3, r2
 800486c:	eb42 0303 	adc.w	r3, r2, r3
 8004870:	647b      	str	r3, [r7, #68]	; 0x44
 8004872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800487a:	f7fc fa55 	bl	8000d28 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4611      	mov	r1, r2
 8004884:	4b3b      	ldr	r3, [pc, #236]	; (8004974 <UART_SetConfig+0x2d4>)
 8004886:	fba3 2301 	umull	r2, r3, r3, r1
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2264      	movs	r2, #100	; 0x64
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	1acb      	subs	r3, r1, r3
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800489a:	4b36      	ldr	r3, [pc, #216]	; (8004974 <UART_SetConfig+0x2d4>)
 800489c:	fba3 2302 	umull	r2, r3, r3, r2
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048a8:	441c      	add	r4, r3
 80048aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80048c4:	415b      	adcs	r3, r3
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048cc:	4641      	mov	r1, r8
 80048ce:	1851      	adds	r1, r2, r1
 80048d0:	6339      	str	r1, [r7, #48]	; 0x30
 80048d2:	4649      	mov	r1, r9
 80048d4:	414b      	adcs	r3, r1
 80048d6:	637b      	str	r3, [r7, #52]	; 0x34
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048e4:	4659      	mov	r1, fp
 80048e6:	00cb      	lsls	r3, r1, #3
 80048e8:	4651      	mov	r1, sl
 80048ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ee:	4651      	mov	r1, sl
 80048f0:	00ca      	lsls	r2, r1, #3
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	4603      	mov	r3, r0
 80048f8:	4642      	mov	r2, r8
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004900:	464b      	mov	r3, r9
 8004902:	460a      	mov	r2, r1
 8004904:	eb42 0303 	adc.w	r3, r2, r3
 8004908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004918:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800491c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004920:	460b      	mov	r3, r1
 8004922:	18db      	adds	r3, r3, r3
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
 8004926:	4613      	mov	r3, r2
 8004928:	eb42 0303 	adc.w	r3, r2, r3
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004936:	f7fc f9f7 	bl	8000d28 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <UART_SetConfig+0x2d4>)
 8004940:	fba3 1302 	umull	r1, r3, r3, r2
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	2164      	movs	r1, #100	; 0x64
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	3332      	adds	r3, #50	; 0x32
 8004952:	4a08      	ldr	r2, [pc, #32]	; (8004974 <UART_SetConfig+0x2d4>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	f003 0207 	and.w	r2, r3, #7
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4422      	add	r2, r4
 8004966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004968:	e106      	b.n	8004b78 <UART_SetConfig+0x4d8>
 800496a:	bf00      	nop
 800496c:	40011000 	.word	0x40011000
 8004970:	40011400 	.word	0x40011400
 8004974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004982:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800498a:	4642      	mov	r2, r8
 800498c:	464b      	mov	r3, r9
 800498e:	1891      	adds	r1, r2, r2
 8004990:	6239      	str	r1, [r7, #32]
 8004992:	415b      	adcs	r3, r3
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800499a:	4641      	mov	r1, r8
 800499c:	1854      	adds	r4, r2, r1
 800499e:	4649      	mov	r1, r9
 80049a0:	eb43 0501 	adc.w	r5, r3, r1
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	00eb      	lsls	r3, r5, #3
 80049ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049b2:	00e2      	lsls	r2, r4, #3
 80049b4:	4614      	mov	r4, r2
 80049b6:	461d      	mov	r5, r3
 80049b8:	4643      	mov	r3, r8
 80049ba:	18e3      	adds	r3, r4, r3
 80049bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049c0:	464b      	mov	r3, r9
 80049c2:	eb45 0303 	adc.w	r3, r5, r3
 80049c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049e6:	4629      	mov	r1, r5
 80049e8:	008b      	lsls	r3, r1, #2
 80049ea:	4621      	mov	r1, r4
 80049ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f0:	4621      	mov	r1, r4
 80049f2:	008a      	lsls	r2, r1, #2
 80049f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049f8:	f7fc f996 	bl	8000d28 <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4b60      	ldr	r3, [pc, #384]	; (8004b84 <UART_SetConfig+0x4e4>)
 8004a02:	fba3 2302 	umull	r2, r3, r3, r2
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	011c      	lsls	r4, r3, #4
 8004a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	1891      	adds	r1, r2, r2
 8004a22:	61b9      	str	r1, [r7, #24]
 8004a24:	415b      	adcs	r3, r3
 8004a26:	61fb      	str	r3, [r7, #28]
 8004a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	1851      	adds	r1, r2, r1
 8004a30:	6139      	str	r1, [r7, #16]
 8004a32:	4649      	mov	r1, r9
 8004a34:	414b      	adcs	r3, r1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a44:	4659      	mov	r1, fp
 8004a46:	00cb      	lsls	r3, r1, #3
 8004a48:	4651      	mov	r1, sl
 8004a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4e:	4651      	mov	r1, sl
 8004a50:	00ca      	lsls	r2, r1, #3
 8004a52:	4610      	mov	r0, r2
 8004a54:	4619      	mov	r1, r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	4642      	mov	r2, r8
 8004a5a:	189b      	adds	r3, r3, r2
 8004a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a60:	464b      	mov	r3, r9
 8004a62:	460a      	mov	r2, r1
 8004a64:	eb42 0303 	adc.w	r3, r2, r3
 8004a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a84:	4649      	mov	r1, r9
 8004a86:	008b      	lsls	r3, r1, #2
 8004a88:	4641      	mov	r1, r8
 8004a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a8e:	4641      	mov	r1, r8
 8004a90:	008a      	lsls	r2, r1, #2
 8004a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a96:	f7fc f947 	bl	8000d28 <__aeabi_uldivmod>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4b38      	ldr	r3, [pc, #224]	; (8004b84 <UART_SetConfig+0x4e4>)
 8004aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2264      	movs	r2, #100	; 0x64
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	1acb      	subs	r3, r1, r3
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	3332      	adds	r3, #50	; 0x32
 8004ab4:	4a33      	ldr	r2, [pc, #204]	; (8004b84 <UART_SetConfig+0x4e4>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac0:	441c      	add	r4, r3
 8004ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	673b      	str	r3, [r7, #112]	; 0x70
 8004aca:	677a      	str	r2, [r7, #116]	; 0x74
 8004acc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	1891      	adds	r1, r2, r2
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	415b      	adcs	r3, r3
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	1851      	adds	r1, r2, r1
 8004ae4:	6039      	str	r1, [r7, #0]
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	414b      	adcs	r3, r1
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004af8:	4659      	mov	r1, fp
 8004afa:	00cb      	lsls	r3, r1, #3
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b02:	4651      	mov	r1, sl
 8004b04:	00ca      	lsls	r2, r1, #3
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b12:	464b      	mov	r3, r9
 8004b14:	460a      	mov	r2, r1
 8004b16:	eb42 0303 	adc.w	r3, r2, r3
 8004b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	663b      	str	r3, [r7, #96]	; 0x60
 8004b26:	667a      	str	r2, [r7, #100]	; 0x64
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b34:	4649      	mov	r1, r9
 8004b36:	008b      	lsls	r3, r1, #2
 8004b38:	4641      	mov	r1, r8
 8004b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3e:	4641      	mov	r1, r8
 8004b40:	008a      	lsls	r2, r1, #2
 8004b42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b46:	f7fc f8ef 	bl	8000d28 <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <UART_SetConfig+0x4e4>)
 8004b50:	fba3 1302 	umull	r1, r3, r3, r2
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	2164      	movs	r1, #100	; 0x64
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	3332      	adds	r3, #50	; 0x32
 8004b62:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <UART_SetConfig+0x4e4>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	f003 020f 	and.w	r2, r3, #15
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4422      	add	r2, r4
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b84:	51eb851f 	.word	0x51eb851f

08004b88 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f103 0208 	add.w	r2, r3, #8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f103 0208 	add.w	r2, r3, #8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f103 0208 	add.w	r2, r3, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8004c1e:	bf00      	nop
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d103      	bne.n	8004c4a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e00c      	b.n	8004c64 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e002      	b.n	8004c58 <vListInsert+0x2e>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d2f6      	bcs.n	8004c52 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8004c90:	bf00      	nop
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );



    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6892      	ldr	r2, [r2, #8]
 8004cb2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6852      	ldr	r2, [r2, #4]
 8004cbc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d103      	bne.n	8004cd0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	1e5a      	subs	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d05d      	beq.n	8004de0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d059      	beq.n	8004de0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d34:	2100      	movs	r1, #0
 8004d36:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d000      	beq.n	8004d40 <xQueueGenericReset+0x50>
 8004d3e:	2101      	movs	r1, #1
 8004d40:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d14c      	bne.n	8004de0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004d46:	f002 f93d 	bl	8006fc4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	6939      	ldr	r1, [r7, #16]
 8004d54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	441a      	add	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2200      	movs	r2, #0
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d76:	3b01      	subs	r3, #1
 8004d78:	6939      	ldr	r1, [r7, #16]
 8004d7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	441a      	add	r2, r3
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	22ff      	movs	r2, #255	; 0xff
 8004d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d114      	bne.n	8004dc6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01a      	beq.n	8004dda <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3310      	adds	r3, #16
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 f9c5 	bl	8006138 <xTaskRemoveFromEventList>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d012      	beq.n	8004dda <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004db4:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <xQueueGenericReset+0x11c>)
 8004db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	e009      	b.n	8004dda <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	3310      	adds	r3, #16
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fedc 	bl	8004b88 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	3324      	adds	r3, #36	; 0x24
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff fed7 	bl	8004b88 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004dda:	f002 f923 	bl	8007024 <vPortExitCritical>
 8004dde:	e001      	b.n	8004de4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <xQueueGenericReset+0x110>
    __asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	60bb      	str	r3, [r7, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8004e00:	697b      	ldr	r3, [r7, #20]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	e000ed04 	.word	0xe000ed04

08004e10 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d02e      	beq.n	8004e86 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004e28:	2100      	movs	r1, #0
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d000      	beq.n	8004e38 <xQueueGenericCreate+0x28>
 8004e36:	2101      	movs	r1, #1
 8004e38:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d123      	bne.n	8004e86 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004e46:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004e4a:	d81c      	bhi.n	8004e86 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
 8004e54:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	3350      	adds	r3, #80	; 0x50
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f002 f9de 	bl	800721c <pvPortMalloc>
 8004e60:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01c      	beq.n	8004ea2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	3350      	adds	r3, #80	; 0x50
 8004e70:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e72:	79fa      	ldrb	r2, [r7, #7]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f814 	bl	8004eac <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004e84:	e00d      	b.n	8004ea2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <xQueueGenericCreate+0x92>
    __asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	613b      	str	r3, [r7, #16]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
    }
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eda:	2101      	movs	r1, #1
 8004edc:	69b8      	ldr	r0, [r7, #24]
 8004ede:	f7ff ff07 	bl	8004cf0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	78fa      	ldrb	r2, [r7, #3]
 8004ee6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	68f9      	ldr	r1, [r7, #12]
 8004ef0:	2073      	movs	r0, #115	; 0x73
 8004ef2:	f003 fbc5 	bl	8008680 <SEGGER_SYSVIEW_RecordU32x3>
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b08f      	sub	sp, #60	; 0x3c
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	62bb      	str	r3, [r7, #40]	; 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <xQueueReceive+0x30>
    __asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	623b      	str	r3, [r7, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d103      	bne.n	8004f3e <xQueueReceive+0x3e>
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <xQueueReceive+0x42>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <xQueueReceive+0x44>
 8004f42:	2300      	movs	r3, #0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <xQueueReceive+0x5e>
    __asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	61fb      	str	r3, [r7, #28]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f5e:	f001 fafd 	bl	800655c <xTaskGetSchedulerState>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <xQueueReceive+0x6e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <xQueueReceive+0x72>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <xQueueReceive+0x74>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <xQueueReceive+0x8e>
    __asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	61bb      	str	r3, [r7, #24]
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <xQueueReceive+0x8c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004f8e:	f002 f819 	bl	8006fc4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d02f      	beq.n	8004ffe <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa2:	f000 f8bd 	bl	8005120 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f004 f8f5 	bl	8009198 <SEGGER_SYSVIEW_ShrinkId>
 8004fae:	4604      	mov	r4, r0
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	f004 f8f1 	bl	8009198 <SEGGER_SYSVIEW_ShrinkId>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2101      	movs	r1, #1
 8004fbc:	9100      	str	r1, [sp, #0]
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	205c      	movs	r0, #92	; 0x5c
 8004fc2:	f003 fbd3 	bl	800876c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00f      	beq.n	8004ff6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	3310      	adds	r3, #16
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f001 f8ac 	bl	8006138 <xTaskRemoveFromEventList>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004fe6:	4b4d      	ldr	r3, [pc, #308]	; (800511c <xQueueReceive+0x21c>)
 8004fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004ff6:	f002 f815 	bl	8007024 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e08a      	b.n	8005114 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d113      	bne.n	800502c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005004:	f002 f80e 	bl	8007024 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	4618      	mov	r0, r3
 800500c:	f004 f8c4 	bl	8009198 <SEGGER_SYSVIEW_ShrinkId>
 8005010:	4604      	mov	r4, r0
 8005012:	2000      	movs	r0, #0
 8005014:	f004 f8c0 	bl	8009198 <SEGGER_SYSVIEW_ShrinkId>
 8005018:	4602      	mov	r2, r0
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2101      	movs	r1, #1
 800501e:	9100      	str	r1, [sp, #0]
 8005020:	4621      	mov	r1, r4
 8005022:	205c      	movs	r0, #92	; 0x5c
 8005024:	f003 fba2 	bl	800876c <SEGGER_SYSVIEW_RecordU32x4>
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8005028:	2300      	movs	r3, #0
 800502a:	e073      	b.n	8005114 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005032:	f107 0310 	add.w	r3, r7, #16
 8005036:	4618      	mov	r0, r3
 8005038:	f001 f956 	bl	80062e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800503c:	2301      	movs	r3, #1
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005040:	f001 fff0 	bl	8007024 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005044:	f000 fd4e 	bl	8005ae4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005048:	f001 ffbc 	bl	8006fc4 <vPortEnterCritical>
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005052:	b25b      	sxtb	r3, r3
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d103      	bne.n	8005062 <xQueueReceive+0x162>
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005068:	b25b      	sxtb	r3, r3
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d103      	bne.n	8005078 <xQueueReceive+0x178>
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005078:	f001 ffd4 	bl	8007024 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800507c:	1d3a      	adds	r2, r7, #4
 800507e:	f107 0310 	add.w	r3, r7, #16
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f001 f945 	bl	8006314 <xTaskCheckForTimeOut>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d124      	bne.n	80050da <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005092:	f000 f8bd 	bl	8005210 <prvIsQueueEmpty>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d018      	beq.n	80050ce <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	3324      	adds	r3, #36	; 0x24
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	4611      	mov	r1, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 ffdb 	bl	8006060 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80050aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ac:	f000 f85e 	bl	800516c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80050b0:	f000 fd26 	bl	8005b00 <xTaskResumeAll>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f47f af69 	bne.w	8004f8e <xQueueReceive+0x8e>
                {
                    taskYIELD_WITHIN_API();
 80050bc:	4b17      	ldr	r3, [pc, #92]	; (800511c <xQueueReceive+0x21c>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	e75f      	b.n	8004f8e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80050ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d0:	f000 f84c 	bl	800516c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80050d4:	f000 fd14 	bl	8005b00 <xTaskResumeAll>
 80050d8:	e759      	b.n	8004f8e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80050da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050dc:	f000 f846 	bl	800516c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80050e0:	f000 fd0e 	bl	8005b00 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e6:	f000 f893 	bl	8005210 <prvIsQueueEmpty>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f43f af4e 	beq.w	8004f8e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	4618      	mov	r0, r3
 80050f6:	f004 f84f 	bl	8009198 <SEGGER_SYSVIEW_ShrinkId>
 80050fa:	4604      	mov	r4, r0
 80050fc:	2000      	movs	r0, #0
 80050fe:	f004 f84b 	bl	8009198 <SEGGER_SYSVIEW_ShrinkId>
 8005102:	4602      	mov	r2, r0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2101      	movs	r1, #1
 8005108:	9100      	str	r1, [sp, #0]
 800510a:	4621      	mov	r1, r4
 800510c:	205c      	movs	r0, #92	; 0x5c
 800510e:	f003 fb2d 	bl	800876c <SEGGER_SYSVIEW_RecordU32x4>
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8005112:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8005114:	4618      	mov	r0, r3
 8005116:	3734      	adds	r7, #52	; 0x34
 8005118:	46bd      	mov	sp, r7
 800511a:	bd90      	pop	{r4, r7, pc}
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d018      	beq.n	8005164 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	441a      	add	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	429a      	cmp	r2, r3
 800514a:	d303      	bcc.n	8005154 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68d9      	ldr	r1, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	461a      	mov	r2, r3
 800515e:	6838      	ldr	r0, [r7, #0]
 8005160:	f005 f997 	bl	800a492 <memcpy>
    }
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005174:	f001 ff26 	bl	8006fc4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800517e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005180:	e011      	b.n	80051a6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d012      	beq.n	80051b0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3324      	adds	r3, #36	; 0x24
 800518e:	4618      	mov	r0, r3
 8005190:	f000 ffd2 	bl	8006138 <xTaskRemoveFromEventList>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800519a:	f001 f921 	bl	80063e0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80051a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	dce9      	bgt.n	8005182 <prvUnlockQueue+0x16>
 80051ae:	e000      	b.n	80051b2 <prvUnlockQueue+0x46>
                    break;
 80051b0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	22ff      	movs	r2, #255	; 0xff
 80051b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80051ba:	f001 ff33 	bl	8007024 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80051be:	f001 ff01 	bl	8006fc4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051c8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80051ca:	e011      	b.n	80051f0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d012      	beq.n	80051fa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3310      	adds	r3, #16
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 ffad 	bl	8006138 <xTaskRemoveFromEventList>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80051e4:	f001 f8fc 	bl	80063e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80051f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	dce9      	bgt.n	80051cc <prvUnlockQueue+0x60>
 80051f8:	e000      	b.n	80051fc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80051fa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	22ff      	movs	r2, #255	; 0xff
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005204:	f001 ff0e 	bl	8007024 <vPortExitCritical>
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005218:	f001 fed4 	bl	8006fc4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005224:	2301      	movs	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e001      	b.n	800522e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800522e:	f001 fef9 	bl	8007024 <vPortExitCritical>

    return xReturn;
 8005232:	68fb      	ldr	r3, [r7, #12]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005246:	2300      	movs	r3, #0
 8005248:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <vQueueAddToRegistry+0x2a>
    __asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60fb      	str	r3, [r7, #12]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d024      	beq.n	80052b6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e01e      	b.n	80052b0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005272:	4a1c      	ldr	r2, [pc, #112]	; (80052e4 <vQueueAddToRegistry+0xa8>)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4413      	add	r3, r2
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	429a      	cmp	r2, r3
 8005280:	d105      	bne.n	800528e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4a17      	ldr	r2, [pc, #92]	; (80052e4 <vQueueAddToRegistry+0xa8>)
 8005288:	4413      	add	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
                    break;
 800528c:	e013      	b.n	80052b6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10a      	bne.n	80052aa <vQueueAddToRegistry+0x6e>
 8005294:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <vQueueAddToRegistry+0xa8>)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d104      	bne.n	80052aa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4a0f      	ldr	r2, [pc, #60]	; (80052e4 <vQueueAddToRegistry+0xa8>)
 80052a6:	4413      	add	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	3301      	adds	r3, #1
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b07      	cmp	r3, #7
 80052b4:	d9dd      	bls.n	8005272 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00f      	beq.n	80052dc <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f003 ff64 	bl	8009198 <SEGGER_SYSVIEW_ShrinkId>
 80052d0:	4601      	mov	r1, r0
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	2071      	movs	r0, #113	; 0x71
 80052d8:	f003 f978 	bl	80085cc <SEGGER_SYSVIEW_RecordU32x2>
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80052dc:	bf00      	nop
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20000444 	.word	0x20000444

080052e8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80052f8:	f001 fe64 	bl	8006fc4 <vPortEnterCritical>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005302:	b25b      	sxtb	r3, r3
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d103      	bne.n	8005312 <vQueueWaitForMessageRestricted+0x2a>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005318:	b25b      	sxtb	r3, r3
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d103      	bne.n	8005328 <vQueueWaitForMessageRestricted+0x40>
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005328:	f001 fe7c 	bl	8007024 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3324      	adds	r3, #36	; 0x24
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	4618      	mov	r0, r3
 800533e:	f000 feb3 	bl	80060a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005342:	6978      	ldr	r0, [r7, #20]
 8005344:	f7ff ff12 	bl	800516c <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8005348:	bf00      	nop
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE usStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af04      	add	r7, sp, #16
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	80fb      	strh	r3, [r7, #6]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4618      	mov	r0, r3
 8005366:	f001 ff59 	bl	800721c <pvPortMalloc>
 800536a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d013      	beq.n	800539a <prvCreateTask+0x4a>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8005372:	2058      	movs	r0, #88	; 0x58
 8005374:	f001 ff52 	bl	800721c <pvPortMalloc>
 8005378:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <prvCreateTask+0x42>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005380:	2258      	movs	r2, #88	; 0x58
 8005382:	2100      	movs	r1, #0
 8005384:	6978      	ldr	r0, [r7, #20]
 8005386:	f005 f816 	bl	800a3b6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
 8005390:	e005      	b.n	800539e <prvCreateTask+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005392:	6938      	ldr	r0, [r7, #16]
 8005394:	f002 f86e 	bl	8007474 <vPortFree>
 8005398:	e001      	b.n	800539e <prvCreateTask+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <prvCreateTask+0x70>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053a4:	88fa      	ldrh	r2, [r7, #6]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9303      	str	r3, [sp, #12]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	9302      	str	r3, [sp, #8]
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f829 	bl	8005412 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80053c0:	697b      	ldr	r3, [r7, #20]
    }
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b088      	sub	sp, #32
 80053ce:	af02      	add	r7, sp, #8
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	603b      	str	r3, [r7, #0]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80fb      	strh	r3, [r7, #6]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff ffb1 	bl	8005350 <prvCreateTask>
 80053ee:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <xTaskCreate+0x38>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = tskNO_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80053f6:	6938      	ldr	r0, [r7, #16]
 80053f8:	f000 f89a 	bl	8005530 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80053fc:	2301      	movs	r3, #1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	e002      	b.n	8005408 <xTaskCreate+0x3e>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8005408:	697b      	ldr	r3, [r7, #20]
    }
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b088      	sub	sp, #32
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	461a      	mov	r2, r3
 800542a:	21a5      	movs	r1, #165	; 0xa5
 800542c:	f004 ffc3 	bl	800a3b6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800543a:	3b01      	subs	r3, #1
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f023 0307 	bic.w	r3, r3, #7
 8005448:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <prvInitialiseNewTask+0x58>
    __asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	617b      	str	r3, [r7, #20]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01e      	beq.n	80054ae <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	e012      	b.n	800549c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	7819      	ldrb	r1, [r3, #0]
 800547e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	3334      	adds	r3, #52	; 0x34
 8005486:	460a      	mov	r2, r1
 8005488:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	4413      	add	r3, r2
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3301      	adds	r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b09      	cmp	r3, #9
 80054a0:	d9e9      	bls.n	8005476 <prvInitialiseNewTask+0x64>
 80054a2:	e000      	b.n	80054a6 <prvInitialiseNewTask+0x94>
            {
                break;
 80054a4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d90a      	bls.n	80054ca <prvInitialiseNewTask+0xb8>
    __asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	613b      	str	r3, [r7, #16]
}
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d901      	bls.n	80054d4 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054d0:	2304      	movs	r3, #4
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054de:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	3304      	adds	r3, #4
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff fb6f 	bl	8004bc8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	3318      	adds	r3, #24
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fb6a 	bl	8004bc8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	f1c3 0205 	rsb	r2, r3, #5
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005508:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	68f9      	ldr	r1, [r7, #12]
 800550e:	69b8      	ldr	r0, [r7, #24]
 8005510:	f001 fb60 	bl	8006bd4 <pxPortInitialiseStack>
 8005514:	4602      	mov	r2, r0
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005524:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005526:	bf00      	nop
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8005530:	b5b0      	push	{r4, r5, r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af02      	add	r7, sp, #8
 8005536:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8005538:	f001 fd44 	bl	8006fc4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks++;
 800553c:	4b4f      	ldr	r3, [pc, #316]	; (800567c <prvAddNewTaskToReadyList+0x14c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3301      	adds	r3, #1
 8005542:	4a4e      	ldr	r2, [pc, #312]	; (800567c <prvAddNewTaskToReadyList+0x14c>)
 8005544:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8005546:	4b4e      	ldr	r3, [pc, #312]	; (8005680 <prvAddNewTaskToReadyList+0x150>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800554e:	4a4c      	ldr	r2, [pc, #304]	; (8005680 <prvAddNewTaskToReadyList+0x150>)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005554:	4b49      	ldr	r3, [pc, #292]	; (800567c <prvAddNewTaskToReadyList+0x14c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d110      	bne.n	800557e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800555c:	f000 ff64 	bl	8006428 <prvInitialiseTaskLists>
 8005560:	e00d      	b.n	800557e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8005562:	4b48      	ldr	r3, [pc, #288]	; (8005684 <prvAddNewTaskToReadyList+0x154>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800556a:	4b45      	ldr	r3, [pc, #276]	; (8005680 <prvAddNewTaskToReadyList+0x150>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	429a      	cmp	r2, r3
 8005576:	d802      	bhi.n	800557e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8005578:	4a41      	ldr	r2, [pc, #260]	; (8005680 <prvAddNewTaskToReadyList+0x150>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800557e:	4b42      	ldr	r3, [pc, #264]	; (8005688 <prvAddNewTaskToReadyList+0x158>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	4a40      	ldr	r2, [pc, #256]	; (8005688 <prvAddNewTaskToReadyList+0x158>)
 8005586:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005588:	4b3f      	ldr	r3, [pc, #252]	; (8005688 <prvAddNewTaskToReadyList+0x158>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <prvAddNewTaskToReadyList+0x94>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4618      	mov	r0, r3
 800559a:	f003 fcd7 	bl	8008f4c <SEGGER_SYSVIEW_OnTaskCreate>
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	461d      	mov	r5, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461c      	mov	r4, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	1ae3      	subs	r3, r4, r3
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	462b      	mov	r3, r5
 80055c0:	f002 f954 	bl	800786c <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f003 fd44 	bl	8009054 <SEGGER_SYSVIEW_OnTaskStartReady>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	2201      	movs	r2, #1
 80055d2:	409a      	lsls	r2, r3
 80055d4:	4b2d      	ldr	r3, [pc, #180]	; (800568c <prvAddNewTaskToReadyList+0x15c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4313      	orrs	r3, r2
 80055da:	4a2c      	ldr	r2, [pc, #176]	; (800568c <prvAddNewTaskToReadyList+0x15c>)
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e2:	492b      	ldr	r1, [pc, #172]	; (8005690 <prvAddNewTaskToReadyList+0x160>)
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	3304      	adds	r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	609a      	str	r2, [r3, #8]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	3204      	adds	r2, #4
 800560a:	605a      	str	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	1d1a      	adds	r2, r3, #4
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <prvAddNewTaskToReadyList+0x160>)
 8005622:	441a      	add	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	615a      	str	r2, [r3, #20]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	4918      	ldr	r1, [pc, #96]	; (8005690 <prvAddNewTaskToReadyList+0x160>)
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	1c59      	adds	r1, r3, #1
 800563c:	4814      	ldr	r0, [pc, #80]	; (8005690 <prvAddNewTaskToReadyList+0x160>)
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4403      	add	r3, r0
 8005648:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800564a:	f001 fceb 	bl	8007024 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800564e:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <prvAddNewTaskToReadyList+0x154>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <prvAddNewTaskToReadyList+0x144>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <prvAddNewTaskToReadyList+0x150>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	429a      	cmp	r2, r3
 8005662:	d207      	bcs.n	8005674 <prvAddNewTaskToReadyList+0x144>
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <prvAddNewTaskToReadyList+0x164>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bdb0      	pop	{r4, r5, r7, pc}
 800567c:	2000055c 	.word	0x2000055c
 8005680:	20000484 	.word	0x20000484
 8005684:	20000568 	.word	0x20000568
 8005688:	20000578 	.word	0x20000578
 800568c:	20000564 	.word	0x20000564
 8005690:	20000488 	.word	0x20000488
 8005694:	e000ed04 	.word	0xe000ed04

08005698 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
            BaseType_t xTaskRunningOnCore;
        #endif

        traceENTER_vTaskSuspend( xTaskToSuspend );

        taskENTER_CRITICAL();
 80056a0:	f001 fc90 	bl	8006fc4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <vTaskSuspend+0x18>
 80056aa:	4b4a      	ldr	r3, [pc, #296]	; (80057d4 <vTaskSuspend+0x13c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	e000      	b.n	80056b2 <vTaskSuspend+0x1a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f003 fd6e 	bl	8009198 <SEGGER_SYSVIEW_ShrinkId>
 80056bc:	4603      	mov	r3, r0
 80056be:	4619      	mov	r1, r3
 80056c0:	2029      	movs	r0, #41	; 0x29
 80056c2:	f002 ff47 	bl	8008554 <SEGGER_SYSVIEW_RecordU32>
                xTaskRunningOnCore = pxTCB->xTaskRunState;
            #endif

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	3304      	adds	r3, #4
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fae6 	bl	8004c9c <uxListRemove>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d115      	bne.n	8005702 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056da:	493f      	ldr	r1, [pc, #252]	; (80057d8 <vTaskSuspend+0x140>)
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <vTaskSuspend+0x6a>
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	2201      	movs	r2, #1
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	43da      	mvns	r2, r3
 80056f8:	4b38      	ldr	r3, [pc, #224]	; (80057dc <vTaskSuspend+0x144>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4013      	ands	r3, r2
 80056fe:	4a37      	ldr	r2, [pc, #220]	; (80057dc <vTaskSuspend+0x144>)
 8005700:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	3318      	adds	r3, #24
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fac4 	bl	8004c9c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	211b      	movs	r1, #27
 8005718:	4618      	mov	r0, r3
 800571a:	f003 fcdd 	bl	80090d8 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	3304      	adds	r3, #4
 8005722:	4619      	mov	r1, r3
 8005724:	482e      	ldr	r0, [pc, #184]	; (80057e0 <vTaskSuspend+0x148>)
 8005726:	f7ff fa5c 	bl	8004be2 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e010      	b.n	8005752 <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	4413      	add	r3, r2
 8005736:	3354      	adds	r3, #84	; 0x54
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d105      	bne.n	800574c <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	4413      	add	r3, r2
 8005746:	3354      	adds	r3, #84	; 0x54
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	3301      	adds	r3, #1
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	ddeb      	ble.n	8005730 <vTaskSuspend+0x98>
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }

        #if ( configNUMBER_OF_CORES == 1 )
        {
            taskEXIT_CRITICAL();
 8005758:	f001 fc64 	bl	8007024 <vPortExitCritical>

            if( xSchedulerRunning != pdFALSE )
 800575c:	4b21      	ldr	r3, [pc, #132]	; (80057e4 <vTaskSuspend+0x14c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <vTaskSuspend+0xd8>
            {
                /* Reset the next expected unblock time in case it referred to the
                 * task that is now in the Suspended state. */
                taskENTER_CRITICAL();
 8005764:	f001 fc2e 	bl	8006fc4 <vPortEnterCritical>
                {
                    prvResetNextTaskUnblockTime();
 8005768:	f000 fedc 	bl	8006524 <prvResetNextTaskUnblockTime>
                }
                taskEXIT_CRITICAL();
 800576c:	f001 fc5a 	bl	8007024 <vPortExitCritical>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( pxTCB == pxCurrentTCB )
 8005770:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <vTaskSuspend+0x13c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	429a      	cmp	r2, r3
 8005778:	d127      	bne.n	80057ca <vTaskSuspend+0x132>
            {
                if( xSchedulerRunning != pdFALSE )
 800577a:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <vTaskSuspend+0x14c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d017      	beq.n	80057b2 <vTaskSuspend+0x11a>
                {
                    /* The current task has just been suspended. */
                    configASSERT( uxSchedulerSuspended == 0 );
 8005782:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <vTaskSuspend+0x150>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <vTaskSuspend+0x108>
    __asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	60fb      	str	r3, [r7, #12]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <vTaskSuspend+0x106>
                    portYIELD_WITHIN_API();
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <vTaskSuspend+0x154>)
 80057a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
            taskEXIT_CRITICAL();
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskSuspend();
    }
 80057b0:	e00b      	b.n	80057ca <vTaskSuspend+0x132>
                    if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <vTaskSuspend+0x148>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <vTaskSuspend+0x158>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d103      	bne.n	80057c6 <vTaskSuspend+0x12e>
                        pxCurrentTCB = NULL;
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <vTaskSuspend+0x13c>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]
    }
 80057c4:	e001      	b.n	80057ca <vTaskSuspend+0x132>
                        vTaskSwitchContext();
 80057c6:	f000 fbe1 	bl	8005f8c <vTaskSwitchContext>
    }
 80057ca:	bf00      	nop
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000484 	.word	0x20000484
 80057d8:	20000488 	.word	0x20000488
 80057dc:	20000564 	.word	0x20000564
 80057e0:	20000548 	.word	0x20000548
 80057e4:	20000568 	.word	0x20000568
 80057e8:	20000584 	.word	0x20000584
 80057ec:	e000ed04 	.word	0xe000ed04
 80057f0:	2000055c 	.word	0x2000055c

080057f4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	60fb      	str	r3, [r7, #12]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <prvTaskIsTaskSuspended+0x2c>
    __asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	60bb      	str	r3, [r7, #8]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	4a14      	ldr	r2, [pc, #80]	; (8005878 <prvTaskIsTaskSuspended+0x84>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d11e      	bne.n	8005868 <prvTaskIsTaskSuspended+0x74>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	4a13      	ldr	r2, [pc, #76]	; (800587c <prvTaskIsTaskSuspended+0x88>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d019      	beq.n	8005868 <prvTaskIsTaskSuspended+0x74>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because it is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	2b00      	cmp	r3, #0
 800583a:	d115      	bne.n	8005868 <prvTaskIsTaskSuspended+0x74>
                        /* The task does not appear on the event list item of
                         * and of the RTOS objects, but could still be in the
                         * blocked state if it is waiting on its notification
                         * rather than waiting on an object.  If not, is
                         * suspended. */
                        xReturn = pdTRUE;
 800583c:	2301      	movs	r3, #1
 800583e:	617b      	str	r3, [r7, #20]

                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	e00d      	b.n	8005862 <prvTaskIsTaskSuspended+0x6e>
                        {
                            if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4413      	add	r3, r2
 800584c:	3354      	adds	r3, #84	; 0x54
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b01      	cmp	r3, #1
 8005854:	d102      	bne.n	800585c <prvTaskIsTaskSuspended+0x68>
                            {
                                xReturn = pdFALSE;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
                                break;
 800585a:	e005      	b.n	8005868 <prvTaskIsTaskSuspended+0x74>
                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	3301      	adds	r3, #1
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	ddee      	ble.n	8005846 <prvTaskIsTaskSuspended+0x52>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005868:	697b      	ldr	r3, [r7, #20]
    }
 800586a:	4618      	mov	r0, r3
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000548 	.word	0x20000548
 800587c:	2000051c 	.word	0x2000051c

08005880 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskResume( xTaskToResume );

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <vTaskResume+0x28>
    __asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60fb      	str	r3, [r7, #12]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <vTaskResume+0x26>

        #if ( configNUMBER_OF_CORES == 1 )

            /* The parameter cannot be NULL as it is impossible to resume the
             * currently executing task. */
            if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80058a8:	4b3a      	ldr	r3, [pc, #232]	; (8005994 <vTaskResume+0x114>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d06c      	beq.n	800598c <vTaskResume+0x10c>
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d069      	beq.n	800598c <vTaskResume+0x10c>
             * to check their run state here. Therefore, we get into a critical
             * section and check if the task is actually suspended or not. */
            if( pxTCB != NULL )
        #endif
        {
            taskENTER_CRITICAL();
 80058b8:	f001 fb84 	bl	8006fc4 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80058bc:	6978      	ldr	r0, [r7, #20]
 80058be:	f7ff ff99 	bl	80057f4 <prvTaskIsTaskSuspended>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d05f      	beq.n	8005988 <vTaskResume+0x108>
                {
                    traceTASK_RESUME( pxTCB );
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f003 fc64 	bl	8009198 <SEGGER_SYSVIEW_ShrinkId>
 80058d0:	4603      	mov	r3, r0
 80058d2:	4619      	mov	r1, r3
 80058d4:	202a      	movs	r0, #42	; 0x2a
 80058d6:	f002 fe3d 	bl	8008554 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	3304      	adds	r3, #4
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff f9dc 	bl	8004c9c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f003 fbb4 	bl	8009054 <SEGGER_SYSVIEW_OnTaskStartReady>
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	2201      	movs	r2, #1
 80058f2:	409a      	lsls	r2, r3
 80058f4:	4b28      	ldr	r3, [pc, #160]	; (8005998 <vTaskResume+0x118>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	4a27      	ldr	r2, [pc, #156]	; (8005998 <vTaskResume+0x118>)
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005902:	4926      	ldr	r1, [pc, #152]	; (800599c <vTaskResume+0x11c>)
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	3304      	adds	r3, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	609a      	str	r2, [r3, #8]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	3204      	adds	r2, #4
 800592a:	605a      	str	r2, [r3, #4]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	1d1a      	adds	r2, r3, #4
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	609a      	str	r2, [r3, #8]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4a16      	ldr	r2, [pc, #88]	; (800599c <vTaskResume+0x11c>)
 8005942:	441a      	add	r2, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	615a      	str	r2, [r3, #20]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	4913      	ldr	r1, [pc, #76]	; (800599c <vTaskResume+0x11c>)
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	480f      	ldr	r0, [pc, #60]	; (800599c <vTaskResume+0x11c>)
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4403      	add	r3, r0
 8005968:	6019      	str	r1, [r3, #0]

                    /* This yield may not cause the task just resumed to run,
                     * but will leave the lists in the correct state for the
                     * next yield. */
                    taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <vTaskResume+0x114>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	429a      	cmp	r2, r3
 8005976:	d207      	bcs.n	8005988 <vTaskResume+0x108>
 8005978:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <vTaskResume+0x120>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005988:	f001 fb4c 	bl	8007024 <vPortExitCritical>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskResume();
    }
 800598c:	bf00      	nop
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000484 	.word	0x20000484
 8005998:	20000564 	.word	0x20000564
 800599c:	20000488 	.word	0x20000488
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80059aa:	2301      	movs	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e011      	b.n	80059dc <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80059b8:	4a1c      	ldr	r2, [pc, #112]	; (8005a2c <prvCreateIdleTasks+0x88>)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	7819      	ldrb	r1, [r3, #0]
 80059c0:	1d3a      	adds	r2, r7, #4
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4413      	add	r3, r2
 80059c6:	460a      	mov	r2, r1
 80059c8:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80059ca:	1d3a      	adds	r2, r7, #4
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4413      	add	r3, r2
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d006      	beq.n	80059e4 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	3301      	adds	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b09      	cmp	r3, #9
 80059e0:	ddea      	ble.n	80059b8 <prvCreateIdleTasks+0x14>
 80059e2:	e000      	b.n	80059e6 <prvCreateIdleTasks+0x42>
        {
            break;
 80059e4:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80059e6:	2300      	movs	r3, #0
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	e015      	b.n	8005a18 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80059ec:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <prvCreateIdleTasks+0x8c>)
 80059ee:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4a0f      	ldr	r2, [pc, #60]	; (8005a34 <prvCreateIdleTasks+0x90>)
 80059f6:	4413      	add	r3, r2
 80059f8:	1d39      	adds	r1, r7, #4
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	2300      	movs	r3, #0
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	2300      	movs	r3, #0
 8005a02:	2282      	movs	r2, #130	; 0x82
 8005a04:	6938      	ldr	r0, [r7, #16]
 8005a06:	f7ff fce0 	bl	80053ca <xTaskCreate>
 8005a0a:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d006      	beq.n	8005a20 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	3301      	adds	r3, #1
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	dde6      	ble.n	80059ec <prvCreateIdleTasks+0x48>
 8005a1e:	e000      	b.n	8005a22 <prvCreateIdleTasks+0x7e>
        {
            break;
 8005a20:	bf00      	nop
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xReturn;
 8005a22:	69fb      	ldr	r3, [r7, #28]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	0800e0a8 	.word	0x0800e0a8
 8005a30:	080063f9 	.word	0x080063f9
 8005a34:	20000580 	.word	0x20000580

08005a38 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8005a3e:	f7ff ffb1 	bl	80059a4 <prvCreateIdleTasks>
 8005a42:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d102      	bne.n	8005a50 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8005a4a:	f000 fe39 	bl	80066c0 <xTimerCreateTimerTask>
 8005a4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d124      	bne.n	8005aa0 <vTaskStartScheduler+0x68>
    __asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	60bb      	str	r3, [r7, #8]
}
 8005a68:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005a6a:	4b18      	ldr	r3, [pc, #96]	; (8005acc <vTaskStartScheduler+0x94>)
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005a72:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <vTaskStartScheduler+0x98>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a78:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <vTaskStartScheduler+0x9c>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005a7e:	4b16      	ldr	r3, [pc, #88]	; (8005ad8 <vTaskStartScheduler+0xa0>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4b16      	ldr	r3, [pc, #88]	; (8005adc <vTaskStartScheduler+0xa4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d102      	bne.n	8005a90 <vTaskStartScheduler+0x58>
 8005a8a:	f003 fa43 	bl	8008f14 <SEGGER_SYSVIEW_OnIdle>
 8005a8e:	e004      	b.n	8005a9a <vTaskStartScheduler+0x62>
 8005a90:	4b12      	ldr	r3, [pc, #72]	; (8005adc <vTaskStartScheduler+0xa4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f003 fa9b 	bl	8008fd0 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8005a9a:	f001 f92b 	bl	8006cf4 <xPortStartScheduler>
 8005a9e:	e00e      	b.n	8005abe <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d10a      	bne.n	8005abe <vTaskStartScheduler+0x86>
    __asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	607b      	str	r3, [r7, #4]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005abe:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <vTaskStartScheduler+0xa8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	2000057c 	.word	0x2000057c
 8005ad0:	20000568 	.word	0x20000568
 8005ad4:	20000560 	.word	0x20000560
 8005ad8:	20000580 	.word	0x20000580
 8005adc:	20000484 	.word	0x20000484
 8005ae0:	20000018 	.word	0x20000018

08005ae4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        ++uxSchedulerSuspended;
 8005ae8:	4b04      	ldr	r3, [pc, #16]	; (8005afc <vTaskSuspendAll+0x18>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	4a03      	ldr	r2, [pc, #12]	; (8005afc <vTaskSuspendAll+0x18>)
 8005af0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8005af2:	bf00      	nop
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	20000584 	.word	0x20000584

08005b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8005b0e:	f001 fa59 	bl	8006fc4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8005b12:	2300      	movs	r3, #0
 8005b14:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8005b16:	4b76      	ldr	r3, [pc, #472]	; (8005cf0 <xTaskResumeAll+0x1f0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <xTaskResumeAll+0x34>
    __asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	603b      	str	r3, [r7, #0]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <xTaskResumeAll+0x32>

            --uxSchedulerSuspended;
 8005b34:	4b6e      	ldr	r3, [pc, #440]	; (8005cf0 <xTaskResumeAll+0x1f0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	4a6d      	ldr	r2, [pc, #436]	; (8005cf0 <xTaskResumeAll+0x1f0>)
 8005b3c:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005b3e:	4b6c      	ldr	r3, [pc, #432]	; (8005cf0 <xTaskResumeAll+0x1f0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f040 80cc 	bne.w	8005ce0 <xTaskResumeAll+0x1e0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b48:	4b6a      	ldr	r3, [pc, #424]	; (8005cf4 <xTaskResumeAll+0x1f4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80c7 	beq.w	8005ce0 <xTaskResumeAll+0x1e0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b52:	e090      	b.n	8005c76 <xTaskResumeAll+0x176>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005b54:	4b68      	ldr	r3, [pc, #416]	; (8005cf8 <xTaskResumeAll+0x1f8>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	6a12      	ldr	r2, [r2, #32]
 8005b6a:	609a      	str	r2, [r3, #8]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	69d2      	ldr	r2, [r2, #28]
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	3318      	adds	r3, #24
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d103      	bne.n	8005b8a <xTaskResumeAll+0x8a>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	6a1a      	ldr	r2, [r3, #32]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	1e5a      	subs	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	68d2      	ldr	r2, [r2, #12]
 8005ba8:	609a      	str	r2, [r3, #8]
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	6892      	ldr	r2, [r2, #8]
 8005bb2:	605a      	str	r2, [r3, #4]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d103      	bne.n	8005bc8 <xTaskResumeAll+0xc8>
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	605a      	str	r2, [r3, #4]
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	615a      	str	r2, [r3, #20]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	1e5a      	subs	r2, r3, #1
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f003 fa3a 	bl	8009054 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	2201      	movs	r2, #1
 8005be6:	409a      	lsls	r2, r3
 8005be8:	4b44      	ldr	r3, [pc, #272]	; (8005cfc <xTaskResumeAll+0x1fc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	4a43      	ldr	r2, [pc, #268]	; (8005cfc <xTaskResumeAll+0x1fc>)
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf6:	4942      	ldr	r1, [pc, #264]	; (8005d00 <xTaskResumeAll+0x200>)
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	3304      	adds	r3, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	607b      	str	r3, [r7, #4]
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	609a      	str	r2, [r3, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	3204      	adds	r2, #4
 8005c1e:	605a      	str	r2, [r3, #4]
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	1d1a      	adds	r2, r3, #4
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4a32      	ldr	r2, [pc, #200]	; (8005d00 <xTaskResumeAll+0x200>)
 8005c36:	441a      	add	r2, r3
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	615a      	str	r2, [r3, #20]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	492f      	ldr	r1, [pc, #188]	; (8005d00 <xTaskResumeAll+0x200>)
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	1c59      	adds	r1, r3, #1
 8005c50:	482b      	ldr	r0, [pc, #172]	; (8005d00 <xTaskResumeAll+0x200>)
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4403      	add	r3, r0
 8005c5c:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c62:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <xTaskResumeAll+0x204>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d904      	bls.n	8005c76 <xTaskResumeAll+0x176>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8005c6c:	4a26      	ldr	r2, [pc, #152]	; (8005d08 <xTaskResumeAll+0x208>)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2101      	movs	r1, #1
 8005c72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c76:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <xTaskResumeAll+0x1f8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f47f af6a 	bne.w	8005b54 <xTaskResumeAll+0x54>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <xTaskResumeAll+0x18a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8005c86:	f000 fc4d 	bl	8006524 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c8a:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <xTaskResumeAll+0x20c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d012      	beq.n	8005cbc <xTaskResumeAll+0x1bc>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8005c96:	f000 f85f 	bl	8005d58 <xTaskIncrementTick>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <xTaskResumeAll+0x1aa>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8005ca0:	4a19      	ldr	r2, [pc, #100]	; (8005d08 <xTaskResumeAll+0x208>)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1ef      	bne.n	8005c96 <xTaskResumeAll+0x196>

                            xPendedTicks = 0;
 8005cb6:	4b15      	ldr	r3, [pc, #84]	; (8005d0c <xTaskResumeAll+0x20c>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8005cbc:	4a12      	ldr	r2, [pc, #72]	; (8005d08 <xTaskResumeAll+0x208>)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <xTaskResumeAll+0x1e0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <xTaskResumeAll+0x204>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <xTaskResumeAll+0x210>)
 8005cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005ce0:	f001 f9a0 	bl	8007024 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3720      	adds	r7, #32
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000584 	.word	0x20000584
 8005cf4:	2000055c 	.word	0x2000055c
 8005cf8:	2000051c 	.word	0x2000051c
 8005cfc:	20000564 	.word	0x20000564
 8005d00:	20000488 	.word	0x20000488
 8005d04:	20000484 	.word	0x20000484
 8005d08:	20000570 	.word	0x20000570
 8005d0c:	2000056c 	.word	0x2000056c
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <xTaskGetTickCount+0x1c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8005d20:	687b      	ldr	r3, [r7, #4]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000560 	.word	0x20000560

08005d34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d3a:	f001 fa2f 	bl	800719c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005d42:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <xTaskGetTickCountFromISR+0x20>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
 8005d48:	683b      	ldr	r3, [r7, #0]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000560 	.word	0x20000560

08005d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08a      	sub	sp, #40	; 0x28
 8005d5c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005d62:	4b7f      	ldr	r3, [pc, #508]	; (8005f60 <xTaskIncrementTick+0x208>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 80f0 	bne.w	8005f4c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d6c:	4b7d      	ldr	r3, [pc, #500]	; (8005f64 <xTaskIncrementTick+0x20c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3301      	adds	r3, #1
 8005d72:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005d74:	4a7b      	ldr	r2, [pc, #492]	; (8005f64 <xTaskIncrementTick+0x20c>)
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d120      	bne.n	8005dc2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005d80:	4b79      	ldr	r3, [pc, #484]	; (8005f68 <xTaskIncrementTick+0x210>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <xTaskIncrementTick+0x48>
    __asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	607b      	str	r3, [r7, #4]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <xTaskIncrementTick+0x46>
 8005da0:	4b71      	ldr	r3, [pc, #452]	; (8005f68 <xTaskIncrementTick+0x210>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	4b71      	ldr	r3, [pc, #452]	; (8005f6c <xTaskIncrementTick+0x214>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a6f      	ldr	r2, [pc, #444]	; (8005f68 <xTaskIncrementTick+0x210>)
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	4a6f      	ldr	r2, [pc, #444]	; (8005f6c <xTaskIncrementTick+0x214>)
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	4b6e      	ldr	r3, [pc, #440]	; (8005f70 <xTaskIncrementTick+0x218>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	4a6d      	ldr	r2, [pc, #436]	; (8005f70 <xTaskIncrementTick+0x218>)
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	f000 fbb1 	bl	8006524 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005dc2:	4b6c      	ldr	r3, [pc, #432]	; (8005f74 <xTaskIncrementTick+0x21c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6a3a      	ldr	r2, [r7, #32]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	f0c0 80aa 	bcc.w	8005f22 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dce:	4b66      	ldr	r3, [pc, #408]	; (8005f68 <xTaskIncrementTick+0x210>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8005dd8:	4b66      	ldr	r3, [pc, #408]	; (8005f74 <xTaskIncrementTick+0x21c>)
 8005dda:	f04f 32ff 	mov.w	r2, #4294967295
 8005dde:	601a      	str	r2, [r3, #0]
                    break;
 8005de0:	e09f      	b.n	8005f22 <xTaskIncrementTick+0x1ca>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005de2:	4b61      	ldr	r3, [pc, #388]	; (8005f68 <xTaskIncrementTick+0x210>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005df2:	6a3a      	ldr	r2, [r7, #32]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d203      	bcs.n	8005e02 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005dfa:	4a5e      	ldr	r2, [pc, #376]	; (8005f74 <xTaskIncrementTick+0x21c>)
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	6013      	str	r3, [r2, #0]
                        break;
 8005e00:	e08f      	b.n	8005f22 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	68d2      	ldr	r2, [r2, #12]
 8005e10:	609a      	str	r2, [r3, #8]
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	6892      	ldr	r2, [r2, #8]
 8005e1a:	605a      	str	r2, [r3, #4]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	3304      	adds	r3, #4
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d103      	bne.n	8005e30 <xTaskIncrementTick+0xd8>
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	605a      	str	r2, [r3, #4]
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2200      	movs	r2, #0
 8005e34:	615a      	str	r2, [r3, #20]
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	1e5a      	subs	r2, r3, #1
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01e      	beq.n	8005e86 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	6a12      	ldr	r2, [r2, #32]
 8005e56:	609a      	str	r2, [r3, #8]
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	69d2      	ldr	r2, [r2, #28]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	3318      	adds	r3, #24
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d103      	bne.n	8005e76 <xTaskIncrementTick+0x11e>
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	6a1a      	ldr	r2, [r3, #32]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	1e5a      	subs	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f003 f8e3 	bl	8009054 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	2201      	movs	r2, #1
 8005e94:	409a      	lsls	r2, r3
 8005e96:	4b38      	ldr	r3, [pc, #224]	; (8005f78 <xTaskIncrementTick+0x220>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	4a36      	ldr	r2, [pc, #216]	; (8005f78 <xTaskIncrementTick+0x220>)
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea4:	4935      	ldr	r1, [pc, #212]	; (8005f7c <xTaskIncrementTick+0x224>)
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60bb      	str	r3, [r7, #8]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	60da      	str	r2, [r3, #12]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	3204      	adds	r2, #4
 8005ecc:	605a      	str	r2, [r3, #4]
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	1d1a      	adds	r2, r3, #4
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	609a      	str	r2, [r3, #8]
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4a26      	ldr	r2, [pc, #152]	; (8005f7c <xTaskIncrementTick+0x224>)
 8005ee4:	441a      	add	r2, r3
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	615a      	str	r2, [r3, #20]
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eee:	4923      	ldr	r1, [pc, #140]	; (8005f7c <xTaskIncrementTick+0x224>)
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	1c59      	adds	r1, r3, #1
 8005efe:	481f      	ldr	r0, [pc, #124]	; (8005f7c <xTaskIncrementTick+0x224>)
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4403      	add	r3, r0
 8005f0a:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	4b1b      	ldr	r3, [pc, #108]	; (8005f80 <xTaskIncrementTick+0x228>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	429a      	cmp	r2, r3
 8005f18:	f67f af59 	bls.w	8005dce <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f20:	e755      	b.n	8005dce <xTaskIncrementTick+0x76>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8005f22:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <xTaskIncrementTick+0x228>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f28:	4914      	ldr	r1, [pc, #80]	; (8005f7c <xTaskIncrementTick+0x224>)
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d901      	bls.n	8005f3e <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <xTaskIncrementTick+0x22c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8005f46:	2301      	movs	r3, #1
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4a:	e004      	b.n	8005f56 <xTaskIncrementTick+0x1fe>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        ++xPendedTicks;
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <xTaskIncrementTick+0x230>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a0d      	ldr	r2, [pc, #52]	; (8005f88 <xTaskIncrementTick+0x230>)
 8005f54:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3728      	adds	r7, #40	; 0x28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20000584 	.word	0x20000584
 8005f64:	20000560 	.word	0x20000560
 8005f68:	20000514 	.word	0x20000514
 8005f6c:	20000518 	.word	0x20000518
 8005f70:	20000574 	.word	0x20000574
 8005f74:	2000057c 	.word	0x2000057c
 8005f78:	20000564 	.word	0x20000564
 8005f7c:	20000488 	.word	0x20000488
 8005f80:	20000484 	.word	0x20000484
 8005f84:	20000570 	.word	0x20000570
 8005f88:	2000056c 	.word	0x2000056c

08005f8c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8005f92:	4b2d      	ldr	r3, [pc, #180]	; (8006048 <vTaskSwitchContext+0xbc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005f9a:	4b2c      	ldr	r3, [pc, #176]	; (800604c <vTaskSwitchContext+0xc0>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8005fa0:	e04e      	b.n	8006040 <vTaskSwitchContext+0xb4>
            xYieldPendings[ 0 ] = pdFALSE;
 8005fa2:	4b2a      	ldr	r3, [pc, #168]	; (800604c <vTaskSwitchContext+0xc0>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8005fa8:	4b29      	ldr	r3, [pc, #164]	; (8006050 <vTaskSwitchContext+0xc4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	fab3 f383 	clz	r3, r3
 8005fb4:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8005fb6:	7afb      	ldrb	r3, [r7, #11]
 8005fb8:	f1c3 031f 	rsb	r3, r3, #31
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	4925      	ldr	r1, [pc, #148]	; (8006054 <vTaskSwitchContext+0xc8>)
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10a      	bne.n	8005fe8 <vTaskSwitchContext+0x5c>
    __asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	607b      	str	r3, [r7, #4]
}
 8005fe4:	bf00      	nop
 8005fe6:	e7fe      	b.n	8005fe6 <vTaskSwitchContext+0x5a>
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4a18      	ldr	r2, [pc, #96]	; (8006054 <vTaskSwitchContext+0xc8>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3308      	adds	r3, #8
 800600a:	429a      	cmp	r2, r3
 800600c:	d103      	bne.n	8006016 <vTaskSwitchContext+0x8a>
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a0e      	ldr	r2, [pc, #56]	; (8006058 <vTaskSwitchContext+0xcc>)
 800601e:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8006020:	4b0e      	ldr	r3, [pc, #56]	; (800605c <vTaskSwitchContext+0xd0>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <vTaskSwitchContext+0xcc>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d102      	bne.n	8006032 <vTaskSwitchContext+0xa6>
 800602c:	f002 ff72 	bl	8008f14 <SEGGER_SYSVIEW_OnIdle>
 8006030:	e004      	b.n	800603c <vTaskSwitchContext+0xb0>
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <vTaskSwitchContext+0xcc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f002 ffca 	bl	8008fd0 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <vTaskSwitchContext+0xcc>)
 800603e:	681b      	ldr	r3, [r3, #0]
    }
 8006040:	bf00      	nop
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000584 	.word	0x20000584
 800604c:	20000570 	.word	0x20000570
 8006050:	20000564 	.word	0x20000564
 8006054:	20000488 	.word	0x20000488
 8006058:	20000484 	.word	0x20000484
 800605c:	20000580 	.word	0x20000580

08006060 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10a      	bne.n	8006086 <vTaskPlaceOnEventList+0x26>
    __asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	60fb      	str	r3, [r7, #12]
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006086:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <vTaskPlaceOnEventList+0x44>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3318      	adds	r3, #24
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fe fdcb 	bl	8004c2a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006094:	2101      	movs	r1, #1
 8006096:	6838      	ldr	r0, [r7, #0]
 8006098:	f000 fa7e 	bl	8006598 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000484 	.word	0x20000484

080060a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <vTaskPlaceOnEventListRestricted+0x28>
    __asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	613b      	str	r3, [r7, #16]
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	4b17      	ldr	r3, [pc, #92]	; (8006134 <vTaskPlaceOnEventListRestricted+0x8c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	61da      	str	r2, [r3, #28]
 80060de:	4b15      	ldr	r3, [pc, #84]	; (8006134 <vTaskPlaceOnEventListRestricted+0x8c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	6892      	ldr	r2, [r2, #8]
 80060e6:	621a      	str	r2, [r3, #32]
 80060e8:	4b12      	ldr	r3, [pc, #72]	; (8006134 <vTaskPlaceOnEventListRestricted+0x8c>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	3218      	adds	r2, #24
 80060f2:	605a      	str	r2, [r3, #4]
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <vTaskPlaceOnEventListRestricted+0x8c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f103 0218 	add.w	r2, r3, #24
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	629a      	str	r2, [r3, #40]	; 0x28
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006118:	f04f 33ff 	mov.w	r3, #4294967295
 800611c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800611e:	2024      	movs	r0, #36	; 0x24
 8006120:	f002 f9fa 	bl	8008518 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	68b8      	ldr	r0, [r7, #8]
 8006128:	f000 fa36 	bl	8006598 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800612c:	bf00      	nop
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000484 	.word	0x20000484

08006138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <xTaskRemoveFromEventList+0x2c>
    __asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	60fb      	str	r3, [r7, #12]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	6a3a      	ldr	r2, [r7, #32]
 8006170:	6a12      	ldr	r2, [r2, #32]
 8006172:	609a      	str	r2, [r3, #8]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	6a3a      	ldr	r2, [r7, #32]
 800617a:	69d2      	ldr	r2, [r2, #28]
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	3318      	adds	r3, #24
 8006186:	429a      	cmp	r2, r3
 8006188:	d103      	bne.n	8006192 <xTaskRemoveFromEventList+0x5a>
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	6a1a      	ldr	r2, [r3, #32]
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	2200      	movs	r2, #0
 8006196:	629a      	str	r2, [r3, #40]	; 0x28
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	1e5a      	subs	r2, r3, #1
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80061a2:	4b4b      	ldr	r3, [pc, #300]	; (80062d0 <xTaskRemoveFromEventList+0x198>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d162      	bne.n	8006270 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	68d2      	ldr	r2, [r2, #12]
 80061b8:	609a      	str	r2, [r3, #8]
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	6892      	ldr	r2, [r2, #8]
 80061c2:	605a      	str	r2, [r3, #4]
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	3304      	adds	r3, #4
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d103      	bne.n	80061d8 <xTaskRemoveFromEventList+0xa0>
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	605a      	str	r2, [r3, #4]
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	2200      	movs	r2, #0
 80061dc:	615a      	str	r2, [r3, #20]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	1e5a      	subs	r2, r3, #1
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f002 ff32 	bl	8009054 <SEGGER_SYSVIEW_OnTaskStartReady>
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	2201      	movs	r2, #1
 80061f6:	409a      	lsls	r2, r3
 80061f8:	4b36      	ldr	r3, [pc, #216]	; (80062d4 <xTaskRemoveFromEventList+0x19c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	4a35      	ldr	r2, [pc, #212]	; (80062d4 <xTaskRemoveFromEventList+0x19c>)
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	4934      	ldr	r1, [pc, #208]	; (80062d8 <xTaskRemoveFromEventList+0x1a0>)
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	3304      	adds	r3, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	609a      	str	r2, [r3, #8]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	60da      	str	r2, [r3, #12]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	6a3a      	ldr	r2, [r7, #32]
 800622c:	3204      	adds	r2, #4
 800622e:	605a      	str	r2, [r3, #4]
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	1d1a      	adds	r2, r3, #4
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	609a      	str	r2, [r3, #8]
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <xTaskRemoveFromEventList+0x1a0>)
 8006246:	441a      	add	r2, r3
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	615a      	str	r2, [r3, #20]
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006250:	4921      	ldr	r1, [pc, #132]	; (80062d8 <xTaskRemoveFromEventList+0x1a0>)
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	1c59      	adds	r1, r3, #1
 8006260:	481d      	ldr	r0, [pc, #116]	; (80062d8 <xTaskRemoveFromEventList+0x1a0>)
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4403      	add	r3, r0
 800626c:	6019      	str	r1, [r3, #0]
 800626e:	e01b      	b.n	80062a8 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006270:	4b1a      	ldr	r3, [pc, #104]	; (80062dc <xTaskRemoveFromEventList+0x1a4>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	61da      	str	r2, [r3, #28]
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	621a      	str	r2, [r3, #32]
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	6a3a      	ldr	r2, [r7, #32]
 800628a:	3218      	adds	r2, #24
 800628c:	605a      	str	r2, [r3, #4]
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	f103 0218 	add.w	r2, r3, #24
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	609a      	str	r2, [r3, #8]
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	4a10      	ldr	r2, [pc, #64]	; (80062dc <xTaskRemoveFromEventList+0x1a4>)
 800629c:	629a      	str	r2, [r3, #40]	; 0x28
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <xTaskRemoveFromEventList+0x1a4>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	4a0d      	ldr	r2, [pc, #52]	; (80062dc <xTaskRemoveFromEventList+0x1a4>)
 80062a6:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ac:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <xTaskRemoveFromEventList+0x1a8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d905      	bls.n	80062c2 <xTaskRemoveFromEventList+0x18a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80062b6:	2301      	movs	r3, #1
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80062ba:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <xTaskRemoveFromEventList+0x1ac>)
 80062bc:	2201      	movs	r2, #1
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	e001      	b.n	80062c6 <xTaskRemoveFromEventList+0x18e>
        }
        else
        {
            xReturn = pdFALSE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3728      	adds	r7, #40	; 0x28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000584 	.word	0x20000584
 80062d4:	20000564 	.word	0x20000564
 80062d8:	20000488 	.word	0x20000488
 80062dc:	2000051c 	.word	0x2000051c
 80062e0:	20000484 	.word	0x20000484
 80062e4:	20000570 	.word	0x20000570

080062e8 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <vTaskInternalSetTimeOutState+0x24>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80062f8:	4b05      	ldr	r3, [pc, #20]	; (8006310 <vTaskInternalSetTimeOutState+0x28>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	20000574 	.word	0x20000574
 8006310:	20000560 	.word	0x20000560

08006314 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <xTaskCheckForTimeOut+0x26>
    __asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	613b      	str	r3, [r7, #16]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <xTaskCheckForTimeOut+0x42>
    __asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
}
 8006352:	bf00      	nop
 8006354:	e7fe      	b.n	8006354 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006356:	f000 fe35 	bl	8006fc4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800635a:	4b1f      	ldr	r3, [pc, #124]	; (80063d8 <xTaskCheckForTimeOut+0xc4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006372:	d102      	bne.n	800637a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006374:	2300      	movs	r3, #0
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	e026      	b.n	80063c8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b17      	ldr	r3, [pc, #92]	; (80063dc <xTaskCheckForTimeOut+0xc8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d00a      	beq.n	800639c <xTaskCheckForTimeOut+0x88>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	429a      	cmp	r2, r3
 800638e:	d305      	bcc.n	800639c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006390:	2301      	movs	r3, #1
 8006392:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	e015      	b.n	80063c8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d20b      	bcs.n	80063be <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	1ad2      	subs	r2, r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff ff98 	bl	80062e8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	e004      	b.n	80063c8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80063c4:	2301      	movs	r3, #1
 80063c6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80063c8:	f000 fe2c 	bl	8007024 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80063cc:	69fb      	ldr	r3, [r7, #28]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000560 	.word	0x20000560
 80063dc:	20000574 	.word	0x20000574

080063e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80063e4:	4b03      	ldr	r3, [pc, #12]	; (80063f4 <vTaskMissedYield+0x14>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80063ea:	bf00      	nop
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	20000570 	.word	0x20000570

080063f8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006400:	f000 f852 	bl	80064a8 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <prvIdleTask+0x28>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d9f9      	bls.n	8006400 <prvIdleTask+0x8>
            {
                taskYIELD();
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <prvIdleTask+0x2c>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800641c:	e7f0      	b.n	8006400 <prvIdleTask+0x8>
 800641e:	bf00      	nop
 8006420:	20000488 	.word	0x20000488
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800642e:	2300      	movs	r3, #0
 8006430:	607b      	str	r3, [r7, #4]
 8006432:	e00c      	b.n	800644e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4a12      	ldr	r2, [pc, #72]	; (8006488 <prvInitialiseTaskLists+0x60>)
 8006440:	4413      	add	r3, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fba0 	bl	8004b88 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3301      	adds	r3, #1
 800644c:	607b      	str	r3, [r7, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b04      	cmp	r3, #4
 8006452:	d9ef      	bls.n	8006434 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006454:	480d      	ldr	r0, [pc, #52]	; (800648c <prvInitialiseTaskLists+0x64>)
 8006456:	f7fe fb97 	bl	8004b88 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800645a:	480d      	ldr	r0, [pc, #52]	; (8006490 <prvInitialiseTaskLists+0x68>)
 800645c:	f7fe fb94 	bl	8004b88 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006460:	480c      	ldr	r0, [pc, #48]	; (8006494 <prvInitialiseTaskLists+0x6c>)
 8006462:	f7fe fb91 	bl	8004b88 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006466:	480c      	ldr	r0, [pc, #48]	; (8006498 <prvInitialiseTaskLists+0x70>)
 8006468:	f7fe fb8e 	bl	8004b88 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800646c:	480b      	ldr	r0, [pc, #44]	; (800649c <prvInitialiseTaskLists+0x74>)
 800646e:	f7fe fb8b 	bl	8004b88 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006472:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <prvInitialiseTaskLists+0x78>)
 8006474:	4a05      	ldr	r2, [pc, #20]	; (800648c <prvInitialiseTaskLists+0x64>)
 8006476:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <prvInitialiseTaskLists+0x7c>)
 800647a:	4a05      	ldr	r2, [pc, #20]	; (8006490 <prvInitialiseTaskLists+0x68>)
 800647c:	601a      	str	r2, [r3, #0]
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000488 	.word	0x20000488
 800648c:	200004ec 	.word	0x200004ec
 8006490:	20000500 	.word	0x20000500
 8006494:	2000051c 	.word	0x2000051c
 8006498:	20000530 	.word	0x20000530
 800649c:	20000548 	.word	0x20000548
 80064a0:	20000514 	.word	0x20000514
 80064a4:	20000518 	.word	0x20000518

080064a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064ae:	e019      	b.n	80064e4 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80064b0:	f000 fd88 	bl	8006fc4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <prvCheckTasksWaitingTermination+0x50>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe fbeb 	bl	8004c9c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80064c6:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <prvCheckTasksWaitingTermination+0x54>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	4a0b      	ldr	r2, [pc, #44]	; (80064fc <prvCheckTasksWaitingTermination+0x54>)
 80064ce:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <prvCheckTasksWaitingTermination+0x58>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <prvCheckTasksWaitingTermination+0x58>)
 80064d8:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80064da:	f000 fda3 	bl	8007024 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f810 	bl	8006504 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <prvCheckTasksWaitingTermination+0x58>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e1      	bne.n	80064b0 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000530 	.word	0x20000530
 80064fc:	2000055c 	.word	0x2000055c
 8006500:	20000544 	.word	0x20000544

08006504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	4618      	mov	r0, r3
 8006512:	f000 ffaf 	bl	8007474 <vPortFree>
            vPortFree( pxTCB );
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 ffac 	bl	8007474 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006528:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <prvResetNextTaskUnblockTime+0x30>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d104      	bne.n	800653c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006532:	4b09      	ldr	r3, [pc, #36]	; (8006558 <prvResetNextTaskUnblockTime+0x34>)
 8006534:	f04f 32ff 	mov.w	r2, #4294967295
 8006538:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800653a:	e005      	b.n	8006548 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <prvResetNextTaskUnblockTime+0x30>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a04      	ldr	r2, [pc, #16]	; (8006558 <prvResetNextTaskUnblockTime+0x34>)
 8006546:	6013      	str	r3, [r2, #0]
}
 8006548:	bf00      	nop
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000514 	.word	0x20000514
 8006558:	2000057c 	.word	0x2000057c

0800655c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <xTaskGetSchedulerState+0x34>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d102      	bne.n	8006570 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800656a:	2301      	movs	r3, #1
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	e008      	b.n	8006582 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006570:	4b08      	ldr	r3, [pc, #32]	; (8006594 <xTaskGetSchedulerState+0x38>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8006578:	2302      	movs	r3, #2
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	e001      	b.n	8006582 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800657e:	2300      	movs	r3, #0
 8006580:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8006582:	687b      	ldr	r3, [r7, #4]
    }
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	20000568 	.word	0x20000568
 8006594:	20000584 	.word	0x20000584

08006598 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80065a2:	4b40      	ldr	r3, [pc, #256]	; (80066a4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80065a8:	4b3f      	ldr	r3, [pc, #252]	; (80066a8 <prvAddCurrentTaskToDelayedList+0x110>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80065ae:	4b3f      	ldr	r3, [pc, #252]	; (80066ac <prvAddCurrentTaskToDelayedList+0x114>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065b4:	4b3e      	ldr	r3, [pc, #248]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3304      	adds	r3, #4
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fb6e 	bl	8004c9c <uxListRemove>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10b      	bne.n	80065de <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80065c6:	4b3a      	ldr	r3, [pc, #232]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	2201      	movs	r2, #1
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43da      	mvns	r2, r3
 80065d4:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <prvAddCurrentTaskToDelayedList+0x11c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4013      	ands	r3, r2
 80065da:	4a36      	ldr	r2, [pc, #216]	; (80066b4 <prvAddCurrentTaskToDelayedList+0x11c>)
 80065dc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d12a      	bne.n	800663c <prvAddCurrentTaskToDelayedList+0xa4>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d027      	beq.n	800663c <prvAddCurrentTaskToDelayedList+0xa4>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
        	traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80065ec:	4b30      	ldr	r3, [pc, #192]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	211b      	movs	r1, #27
 80065f2:	4618      	mov	r0, r3
 80065f4:	f002 fd70 	bl	80090d8 <SEGGER_SYSVIEW_OnTaskStopReady>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f8:	4b2f      	ldr	r3, [pc, #188]	; (80066b8 <prvAddCurrentTaskToDelayedList+0x120>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	4b2c      	ldr	r3, [pc, #176]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	609a      	str	r2, [r3, #8]
 8006606:	4b2a      	ldr	r3, [pc, #168]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	6892      	ldr	r2, [r2, #8]
 800660e:	60da      	str	r2, [r3, #12]
 8006610:	4b27      	ldr	r3, [pc, #156]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	3204      	adds	r2, #4
 800661a:	605a      	str	r2, [r3, #4]
 800661c:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	1d1a      	adds	r2, r3, #4
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	609a      	str	r2, [r3, #8]
 8006626:	4b22      	ldr	r3, [pc, #136]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a23      	ldr	r2, [pc, #140]	; (80066b8 <prvAddCurrentTaskToDelayedList+0x120>)
 800662c:	615a      	str	r2, [r3, #20]
 800662e:	4b22      	ldr	r3, [pc, #136]	; (80066b8 <prvAddCurrentTaskToDelayedList+0x120>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3301      	adds	r3, #1
 8006634:	4a20      	ldr	r2, [pc, #128]	; (80066b8 <prvAddCurrentTaskToDelayedList+0x120>)
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800663a:	e02e      	b.n	800669a <prvAddCurrentTaskToDelayedList+0x102>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4413      	add	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006644:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	429a      	cmp	r2, r3
 8006652:	d20d      	bcs.n	8006670 <prvAddCurrentTaskToDelayedList+0xd8>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006654:	4b16      	ldr	r3, [pc, #88]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2104      	movs	r1, #4
 800665a:	4618      	mov	r0, r3
 800665c:	f002 fd3c 	bl	80090d8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006660:	4b13      	ldr	r3, [pc, #76]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	6978      	ldr	r0, [r7, #20]
 800666a:	f7fe fade 	bl	8004c2a <vListInsert>
}
 800666e:	e014      	b.n	800669a <prvAddCurrentTaskToDelayedList+0x102>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8006670:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2104      	movs	r1, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f002 fd2e 	bl	80090d8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800667c:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x118>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	69b8      	ldr	r0, [r7, #24]
 8006686:	f7fe fad0 	bl	8004c2a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800668a:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <prvAddCurrentTaskToDelayedList+0x124>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	429a      	cmp	r2, r3
 8006692:	d202      	bcs.n	800669a <prvAddCurrentTaskToDelayedList+0x102>
                    xNextTaskUnblockTime = xTimeToWake;
 8006694:	4a09      	ldr	r2, [pc, #36]	; (80066bc <prvAddCurrentTaskToDelayedList+0x124>)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6013      	str	r3, [r2, #0]
}
 800669a:	bf00      	nop
 800669c:	3720      	adds	r7, #32
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000560 	.word	0x20000560
 80066a8:	20000514 	.word	0x20000514
 80066ac:	20000518 	.word	0x20000518
 80066b0:	20000484 	.word	0x20000484
 80066b4:	20000564 	.word	0x20000564
 80066b8:	20000548 	.word	0x20000548
 80066bc:	2000057c 	.word	0x2000057c

080066c0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80066ca:	f000 fa4d 	bl	8006b68 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <xTimerCreateTimerTask+0x54>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80066d6:	4b10      	ldr	r3, [pc, #64]	; (8006718 <xTimerCreateTimerTask+0x58>)
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	2302      	movs	r3, #2
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	2300      	movs	r3, #0
 80066e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80066e4:	490d      	ldr	r1, [pc, #52]	; (800671c <xTimerCreateTimerTask+0x5c>)
 80066e6:	480e      	ldr	r0, [pc, #56]	; (8006720 <xTimerCreateTimerTask+0x60>)
 80066e8:	f7fe fe6f 	bl	80053ca <xTaskCreate>
 80066ec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <xTimerCreateTimerTask+0x4a>
    __asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	603b      	str	r3, [r7, #0]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 800670a:	687b      	ldr	r3, [r7, #4]
    }
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	200005b8 	.word	0x200005b8
 8006718:	200005bc 	.word	0x200005bc
 800671c:	0800e0b0 	.word	0x0800e0b0
 8006720:	080067c9 	.word	0x080067c9

08006724 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006730:	e008      	b.n	8006744 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	4413      	add	r3, r2
 800673a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	18d1      	adds	r1, r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 f8dd 	bl	8006910 <prvInsertTimerInActiveList>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ea      	bne.n	8006732 <prvReloadTimer+0xe>
        }
    }
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006772:	4b14      	ldr	r3, [pc, #80]	; (80067c4 <prvProcessExpiredTimer+0x5c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3304      	adds	r3, #4
 8006780:	4618      	mov	r0, r3
 8006782:	f7fe fa8b 	bl	8004c9c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff ffc3 	bl	8006724 <prvReloadTimer>
 800679e:	e008      	b.n	80067b2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067a6:	f023 0301 	bic.w	r3, r3, #1
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	4798      	blx	r3
    }
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	200005b0 	.word	0x200005b0

080067c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067d0:	f107 0308 	add.w	r3, r7, #8
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 f857 	bl	8006888 <prvGetNextExpireTime>
 80067da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4619      	mov	r1, r3
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f803 	bl	80067ec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80067e6:	f000 f8d5 	bl	8006994 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067ea:	e7f1      	b.n	80067d0 <prvTimerTask+0x8>

080067ec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80067f6:	f7ff f975 	bl	8005ae4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067fa:	f107 0308 	add.w	r3, r7, #8
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 f866 	bl	80068d0 <prvSampleTimeNow>
 8006804:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d130      	bne.n	800686e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <prvProcessTimerOrBlockTask+0x3c>
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	429a      	cmp	r2, r3
 8006818:	d806      	bhi.n	8006828 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800681a:	f7ff f971 	bl	8005b00 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff ffa1 	bl	8006768 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006826:	e024      	b.n	8006872 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d008      	beq.n	8006840 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800682e:	4b13      	ldr	r3, [pc, #76]	; (800687c <prvProcessTimerOrBlockTask+0x90>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <prvProcessTimerOrBlockTask+0x50>
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <prvProcessTimerOrBlockTask+0x52>
 800683c:	2300      	movs	r3, #0
 800683e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006840:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <prvProcessTimerOrBlockTask+0x94>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	4619      	mov	r1, r3
 800684e:	f7fe fd4b 	bl	80052e8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006852:	f7ff f955 	bl	8005b00 <xTaskResumeAll>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800685c:	4b09      	ldr	r3, [pc, #36]	; (8006884 <prvProcessTimerOrBlockTask+0x98>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	f3bf 8f6f 	isb	sy
    }
 800686c:	e001      	b.n	8006872 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800686e:	f7ff f947 	bl	8005b00 <xTaskResumeAll>
    }
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	200005b4 	.word	0x200005b4
 8006880:	200005b8 	.word	0x200005b8
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006890:	4b0e      	ldr	r3, [pc, #56]	; (80068cc <prvGetNextExpireTime+0x44>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <prvGetNextExpireTime+0x16>
 800689a:	2201      	movs	r2, #1
 800689c:	e000      	b.n	80068a0 <prvGetNextExpireTime+0x18>
 800689e:	2200      	movs	r2, #0
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d105      	bne.n	80068b8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068ac:	4b07      	ldr	r3, [pc, #28]	; (80068cc <prvGetNextExpireTime+0x44>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	e001      	b.n	80068bc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80068bc:	68fb      	ldr	r3, [r7, #12]
    }
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	200005b0 	.word	0x200005b0

080068d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80068d8:	f7ff fa1c 	bl	8005d14 <xTaskGetTickCount>
 80068dc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <prvSampleTimeNow+0x3c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d205      	bcs.n	80068f4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80068e8:	f000 f918 	bl	8006b1c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e002      	b.n	80068fa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80068fa:	4a04      	ldr	r2, [pc, #16]	; (800690c <prvSampleTimeNow+0x3c>)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006900:	68fb      	ldr	r3, [r7, #12]
    }
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	200005c0 	.word	0x200005c0

08006910 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d812      	bhi.n	800695c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006944:	2301      	movs	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e01b      	b.n	8006982 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800694a:	4b10      	ldr	r3, [pc, #64]	; (800698c <prvInsertTimerInActiveList+0x7c>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f7fe f968 	bl	8004c2a <vListInsert>
 800695a:	e012      	b.n	8006982 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d206      	bcs.n	8006972 <prvInsertTimerInActiveList+0x62>
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d302      	bcc.n	8006972 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800696c:	2301      	movs	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	e007      	b.n	8006982 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006972:	4b07      	ldr	r3, [pc, #28]	; (8006990 <prvInsertTimerInActiveList+0x80>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3304      	adds	r3, #4
 800697a:	4619      	mov	r1, r3
 800697c:	4610      	mov	r0, r2
 800697e:	f7fe f954 	bl	8004c2a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006982:	697b      	ldr	r3, [r7, #20]
    }
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	200005b4 	.word	0x200005b4
 8006990:	200005b0 	.word	0x200005b0

08006994 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800699a:	f107 0308 	add.w	r3, r7, #8
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	605a      	str	r2, [r3, #4]
 80069a4:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80069a6:	e0a6      	b.n	8006af6 <prvProcessReceivedCommands+0x162>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f2c0 80a3 	blt.w	8006af6 <prvProcessReceivedCommands+0x162>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe f96b 	bl	8004c9c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069c6:	1d3b      	adds	r3, r7, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff ff81 	bl	80068d0 <prvSampleTimeNow>
 80069ce:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	f200 808d 	bhi.w	8006af4 <prvProcessReceivedCommands+0x160>
 80069da:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <prvProcessReceivedCommands+0x4c>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	08006a05 	.word	0x08006a05
 80069e4:	08006a05 	.word	0x08006a05
 80069e8:	08006a6d 	.word	0x08006a6d
 80069ec:	08006a81 	.word	0x08006a81
 80069f0:	08006acb 	.word	0x08006acb
 80069f4:	08006a05 	.word	0x08006a05
 80069f8:	08006a05 	.word	0x08006a05
 80069fc:	08006a6d 	.word	0x08006a6d
 8006a00:	08006a81 	.word	0x08006a81
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	18d1      	adds	r1, r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	69f8      	ldr	r0, [r7, #28]
 8006a24:	f7ff ff74 	bl	8006910 <prvInsertTimerInActiveList>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d063      	beq.n	8006af6 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	4413      	add	r3, r2
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	4619      	mov	r1, r3
 8006a48:	69f8      	ldr	r0, [r7, #28]
 8006a4a:	f7ff fe6b 	bl	8006724 <prvReloadTimer>
 8006a4e:	e008      	b.n	8006a62 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	69f8      	ldr	r0, [r7, #28]
 8006a68:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006a6a:	e044      	b.n	8006af6 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006a7e:	e03a      	b.n	8006af6 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <prvProcessReceivedCommands+0x122>
    __asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	617b      	str	r3, [r7, #20]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	18d1      	adds	r1, r2, r3
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	69f8      	ldr	r0, [r7, #28]
 8006ac4:	f7ff ff24 	bl	8006910 <prvInsertTimerInActiveList>
                        break;
 8006ac8:	e015      	b.n	8006af6 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <prvProcessReceivedCommands+0x14c>
                            {
                                vPortFree( pxTimer );
 8006ad8:	69f8      	ldr	r0, [r7, #28]
 8006ada:	f000 fccb 	bl	8007474 <vPortFree>
 8006ade:	e00a      	b.n	8006af6 <prvProcessReceivedCommands+0x162>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006af2:	e000      	b.n	8006af6 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006af4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8006af6:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <prvProcessReceivedCommands+0x184>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f107 0108 	add.w	r1, r7, #8
 8006afe:	2200      	movs	r2, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe f9fd 	bl	8004f00 <xQueueReceive>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f47f af4d 	bne.w	80069a8 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	200005b8 	.word	0x200005b8

08006b1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b22:	e009      	b.n	8006b38 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <prvSwitchTimerLists+0x44>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8006b32:	6838      	ldr	r0, [r7, #0]
 8006b34:	f7ff fe18 	bl	8006768 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b38:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <prvSwitchTimerLists+0x44>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006b42:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <prvSwitchTimerLists+0x44>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006b48:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <prvSwitchTimerLists+0x48>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a04      	ldr	r2, [pc, #16]	; (8006b60 <prvSwitchTimerLists+0x44>)
 8006b4e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006b50:	4a04      	ldr	r2, [pc, #16]	; (8006b64 <prvSwitchTimerLists+0x48>)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6013      	str	r3, [r2, #0]
    }
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	200005b0 	.word	0x200005b0
 8006b64:	200005b4 	.word	0x200005b4

08006b68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006b6c:	f000 fa2a 	bl	8006fc4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006b70:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <prvCheckForValidListAndQueue+0x54>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d11d      	bne.n	8006bb4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006b78:	4811      	ldr	r0, [pc, #68]	; (8006bc0 <prvCheckForValidListAndQueue+0x58>)
 8006b7a:	f7fe f805 	bl	8004b88 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006b7e:	4811      	ldr	r0, [pc, #68]	; (8006bc4 <prvCheckForValidListAndQueue+0x5c>)
 8006b80:	f7fe f802 	bl	8004b88 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006b84:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <prvCheckForValidListAndQueue+0x60>)
 8006b86:	4a0e      	ldr	r2, [pc, #56]	; (8006bc0 <prvCheckForValidListAndQueue+0x58>)
 8006b88:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006b8a:	4b10      	ldr	r3, [pc, #64]	; (8006bcc <prvCheckForValidListAndQueue+0x64>)
 8006b8c:	4a0d      	ldr	r2, [pc, #52]	; (8006bc4 <prvCheckForValidListAndQueue+0x5c>)
 8006b8e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8006b90:	2200      	movs	r2, #0
 8006b92:	210c      	movs	r1, #12
 8006b94:	200a      	movs	r0, #10
 8006b96:	f7fe f93b 	bl	8004e10 <xQueueGenericCreate>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4a07      	ldr	r2, [pc, #28]	; (8006bbc <prvCheckForValidListAndQueue+0x54>)
 8006b9e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006ba0:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <prvCheckForValidListAndQueue+0x54>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ba8:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <prvCheckForValidListAndQueue+0x54>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4908      	ldr	r1, [pc, #32]	; (8006bd0 <prvCheckForValidListAndQueue+0x68>)
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe fb44 	bl	800523c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006bb4:	f000 fa36 	bl	8007024 <vPortExitCritical>
    }
 8006bb8:	bf00      	nop
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	200005b8 	.word	0x200005b8
 8006bc0:	20000588 	.word	0x20000588
 8006bc4:	2000059c 	.word	0x2000059c
 8006bc8:	200005b0 	.word	0x200005b0
 8006bcc:	200005b4 	.word	0x200005b4
 8006bd0:	0800e0b8 	.word	0x0800e0b8

08006bd4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3b04      	subs	r3, #4
 8006be4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3b04      	subs	r3, #4
 8006bf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f023 0201 	bic.w	r2, r3, #1
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3b04      	subs	r3, #4
 8006c02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006c04:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <pxPortInitialiseStack+0x64>)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3b14      	subs	r3, #20
 8006c0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3b04      	subs	r3, #4
 8006c1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f06f 0202 	mvn.w	r2, #2
 8006c22:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3b20      	subs	r3, #32
 8006c28:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	08006c3d 	.word	0x08006c3d

08006c3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006c46:	4b12      	ldr	r3, [pc, #72]	; (8006c90 <prvTaskExitError+0x54>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d00a      	beq.n	8006c66 <prvTaskExitError+0x2a>
    __asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <prvTaskExitError+0x28>
    __asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	60bb      	str	r3, [r7, #8]
}
 8006c78:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006c7a:	bf00      	nop
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0fc      	beq.n	8006c7c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	2000001c 	.word	0x2000001c
	...

08006ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <pxCurrentTCBConst2>)
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	6808      	ldr	r0, [r1, #0]
 8006ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006caa:	f380 8809 	msr	PSP, r0
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f380 8811 	msr	BASEPRI, r0
 8006cba:	4770      	bx	lr
 8006cbc:	f3af 8000 	nop.w

08006cc0 <pxCurrentTCBConst2>:
 8006cc0:	20000484 	.word	0x20000484
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop

08006cc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006cc8:	4808      	ldr	r0, [pc, #32]	; (8006cec <prvPortStartFirstTask+0x24>)
 8006cca:	6800      	ldr	r0, [r0, #0]
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f380 8808 	msr	MSP, r0
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	f380 8814 	msr	CONTROL, r0
 8006cda:	b662      	cpsie	i
 8006cdc:	b661      	cpsie	f
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	df00      	svc	0
 8006ce8:	bf00      	nop
 8006cea:	0000      	.short	0x0000
 8006cec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop

08006cf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08c      	sub	sp, #48	; 0x30
 8006cf8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cfa:	4b66      	ldr	r3, [pc, #408]	; (8006e94 <xPortStartScheduler+0x1a0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a66      	ldr	r2, [pc, #408]	; (8006e98 <xPortStartScheduler+0x1a4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d10a      	bne.n	8006d1a <xPortStartScheduler+0x26>
    __asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d1a:	4b5e      	ldr	r3, [pc, #376]	; (8006e94 <xPortStartScheduler+0x1a0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a5f      	ldr	r2, [pc, #380]	; (8006e9c <xPortStartScheduler+0x1a8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10a      	bne.n	8006d3a <xPortStartScheduler+0x46>
    __asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	623b      	str	r3, [r7, #32]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <xPortStartScheduler+0x44>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8006d3a:	4b59      	ldr	r3, [pc, #356]	; (8006ea0 <xPortStartScheduler+0x1ac>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	332c      	adds	r3, #44	; 0x2c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a57      	ldr	r2, [pc, #348]	; (8006ea4 <xPortStartScheduler+0x1b0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00a      	beq.n	8006d62 <xPortStartScheduler+0x6e>
    __asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	61fb      	str	r3, [r7, #28]
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <xPortStartScheduler+0x6c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	3338      	adds	r3, #56	; 0x38
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a4f      	ldr	r2, [pc, #316]	; (8006ea8 <xPortStartScheduler+0x1b4>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00a      	beq.n	8006d84 <xPortStartScheduler+0x90>
    __asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	61bb      	str	r3, [r7, #24]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <xPortStartScheduler+0x8e>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d88:	4b48      	ldr	r3, [pc, #288]	; (8006eac <xPortStartScheduler+0x1b8>)
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	22ff      	movs	r2, #255	; 0xff
 8006d98:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	4b40      	ldr	r3, [pc, #256]	; (8006eb0 <xPortStartScheduler+0x1bc>)
 8006dae:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8006db0:	4b3f      	ldr	r3, [pc, #252]	; (8006eb0 <xPortStartScheduler+0x1bc>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10a      	bne.n	8006dce <xPortStartScheduler+0xda>
    __asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	617b      	str	r3, [r7, #20]
}
 8006dca:	bf00      	nop
 8006dcc:	e7fe      	b.n	8006dcc <xPortStartScheduler+0xd8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d012      	beq.n	8006e02 <xPortStartScheduler+0x10e>
    __asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	613b      	str	r3, [r7, #16]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <xPortStartScheduler+0xfc>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	3301      	adds	r3, #1
 8006df6:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0a:	2b80      	cmp	r3, #128	; 0x80
 8006e0c:	d0f1      	beq.n	8006df2 <xPortStartScheduler+0xfe>
        }

        if( ulImplementedPrioBits == 8 )
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d103      	bne.n	8006e1c <xPortStartScheduler+0x128>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8006e14:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <xPortStartScheduler+0x1c0>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e004      	b.n	8006e26 <xPortStartScheduler+0x132>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f1c3 0307 	rsb	r3, r3, #7
 8006e22:	4a24      	ldr	r2, [pc, #144]	; (8006eb4 <xPortStartScheduler+0x1c0>)
 8006e24:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e26:	4b23      	ldr	r3, [pc, #140]	; (8006eb4 <xPortStartScheduler+0x1c0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	4a21      	ldr	r2, [pc, #132]	; (8006eb4 <xPortStartScheduler+0x1c0>)
 8006e2e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e30:	4b20      	ldr	r3, [pc, #128]	; (8006eb4 <xPortStartScheduler+0x1c0>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e38:	4a1e      	ldr	r2, [pc, #120]	; (8006eb4 <xPortStartScheduler+0x1c0>)
 8006e3a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006e44:	4b1c      	ldr	r3, [pc, #112]	; (8006eb8 <xPortStartScheduler+0x1c4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1b      	ldr	r2, [pc, #108]	; (8006eb8 <xPortStartScheduler+0x1c4>)
 8006e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006e50:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <xPortStartScheduler+0x1c4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <xPortStartScheduler+0x1c4>)
 8006e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8006e5c:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <xPortStartScheduler+0x1c8>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006e62:	f000 f96b 	bl	800713c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006e66:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <xPortStartScheduler+0x1cc>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006e6c:	f000 f98a 	bl	8007184 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e70:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <xPortStartScheduler+0x1d0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a13      	ldr	r2, [pc, #76]	; (8006ec4 <xPortStartScheduler+0x1d0>)
 8006e76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006e7c:	f7ff ff24 	bl	8006cc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006e80:	f7ff f884 	bl	8005f8c <vTaskSwitchContext>
    prvTaskExitError();
 8006e84:	f7ff feda 	bl	8006c3c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3730      	adds	r7, #48	; 0x30
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	e000ed00 	.word	0xe000ed00
 8006e98:	410fc271 	.word	0x410fc271
 8006e9c:	410fc270 	.word	0x410fc270
 8006ea0:	e000ed08 	.word	0xe000ed08
 8006ea4:	08006ca1 	.word	0x08006ca1
 8006ea8:	08007081 	.word	0x08007081
 8006eac:	e000e400 	.word	0xe000e400
 8006eb0:	200005c4 	.word	0x200005c4
 8006eb4:	200005c8 	.word	0x200005c8
 8006eb8:	e000ed20 	.word	0xe000ed20
 8006ebc:	e000ed1c 	.word	0xe000ed1c
 8006ec0:	2000001c 	.word	0x2000001c
 8006ec4:	e000ef34 	.word	0xe000ef34

08006ec8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ece:	4b37      	ldr	r3, [pc, #220]	; (8006fac <vInitPrioGroupValue+0xe4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a37      	ldr	r2, [pc, #220]	; (8006fb0 <vInitPrioGroupValue+0xe8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d10a      	bne.n	8006eee <vInitPrioGroupValue+0x26>
    __asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	613b      	str	r3, [r7, #16]
}
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006eee:	4b2f      	ldr	r3, [pc, #188]	; (8006fac <vInitPrioGroupValue+0xe4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a30      	ldr	r2, [pc, #192]	; (8006fb4 <vInitPrioGroupValue+0xec>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d10a      	bne.n	8006f0e <vInitPrioGroupValue+0x46>
    __asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	60fb      	str	r3, [r7, #12]
}
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f0e:	4b2a      	ldr	r3, [pc, #168]	; (8006fb8 <vInitPrioGroupValue+0xf0>)
 8006f10:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	22ff      	movs	r2, #255	; 0xff
 8006f1e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	4b22      	ldr	r3, [pc, #136]	; (8006fbc <vInitPrioGroupValue+0xf4>)
 8006f34:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f36:	4b22      	ldr	r3, [pc, #136]	; (8006fc0 <vInitPrioGroupValue+0xf8>)
 8006f38:	2207      	movs	r2, #7
 8006f3a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f3c:	e009      	b.n	8006f52 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006f3e:	4b20      	ldr	r3, [pc, #128]	; (8006fc0 <vInitPrioGroupValue+0xf8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	4a1e      	ldr	r2, [pc, #120]	; (8006fc0 <vInitPrioGroupValue+0xf8>)
 8006f46:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f52:	78fb      	ldrb	r3, [r7, #3]
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b80      	cmp	r3, #128	; 0x80
 8006f5c:	d0ef      	beq.n	8006f3e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f5e:	4b18      	ldr	r3, [pc, #96]	; (8006fc0 <vInitPrioGroupValue+0xf8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f1c3 0307 	rsb	r3, r3, #7
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d00a      	beq.n	8006f80 <vInitPrioGroupValue+0xb8>
    __asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	60bb      	str	r3, [r7, #8]
}
 8006f7c:	bf00      	nop
 8006f7e:	e7fe      	b.n	8006f7e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f80:	4b0f      	ldr	r3, [pc, #60]	; (8006fc0 <vInitPrioGroupValue+0xf8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	4a0e      	ldr	r2, [pc, #56]	; (8006fc0 <vInitPrioGroupValue+0xf8>)
 8006f88:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	; (8006fc0 <vInitPrioGroupValue+0xf8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f92:	4a0b      	ldr	r2, [pc, #44]	; (8006fc0 <vInitPrioGroupValue+0xf8>)
 8006f94:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	e000ed00 	.word	0xe000ed00
 8006fb0:	410fc271 	.word	0x410fc271
 8006fb4:	410fc270 	.word	0x410fc270
 8006fb8:	e000e400 	.word	0xe000e400
 8006fbc:	200005c4 	.word	0x200005c4
 8006fc0:	200005c8 	.word	0x200005c8

08006fc4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
    __asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	607b      	str	r3, [r7, #4]
}
 8006fdc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006fde:	4b0f      	ldr	r3, [pc, #60]	; (800701c <vPortEnterCritical+0x58>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	4a0d      	ldr	r2, [pc, #52]	; (800701c <vPortEnterCritical+0x58>)
 8006fe6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	; (800701c <vPortEnterCritical+0x58>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d10f      	bne.n	8007010 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <vPortEnterCritical+0x5c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <vPortEnterCritical+0x4c>
    __asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	603b      	str	r3, [r7, #0]
}
 800700c:	bf00      	nop
 800700e:	e7fe      	b.n	800700e <vPortEnterCritical+0x4a>
    }
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	2000001c 	.word	0x2000001c
 8007020:	e000ed04 	.word	0xe000ed04

08007024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800702a:	4b12      	ldr	r3, [pc, #72]	; (8007074 <vPortExitCritical+0x50>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <vPortExitCritical+0x24>
    __asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	607b      	str	r3, [r7, #4]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <vPortExitCritical+0x50>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3b01      	subs	r3, #1
 800704e:	4a09      	ldr	r2, [pc, #36]	; (8007074 <vPortExitCritical+0x50>)
 8007050:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007052:	4b08      	ldr	r3, [pc, #32]	; (8007074 <vPortExitCritical+0x50>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d105      	bne.n	8007066 <vPortExitCritical+0x42>
 800705a:	2300      	movs	r3, #0
 800705c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8007064:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	2000001c 	.word	0x2000001c
	...

08007080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007080:	f3ef 8009 	mrs	r0, PSP
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <pxCurrentTCBConst>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	f01e 0f10 	tst.w	lr, #16
 8007090:	bf08      	it	eq
 8007092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709a:	6010      	str	r0, [r2, #0]
 800709c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070a4:	f380 8811 	msr	BASEPRI, r0
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f7fe ff6c 	bl	8005f8c <vTaskSwitchContext>
 80070b4:	f04f 0000 	mov.w	r0, #0
 80070b8:	f380 8811 	msr	BASEPRI, r0
 80070bc:	bc09      	pop	{r0, r3}
 80070be:	6819      	ldr	r1, [r3, #0]
 80070c0:	6808      	ldr	r0, [r1, #0]
 80070c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c6:	f01e 0f10 	tst.w	lr, #16
 80070ca:	bf08      	it	eq
 80070cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070d0:	f380 8809 	msr	PSP, r0
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	f3af 8000 	nop.w

080070e0 <pxCurrentTCBConst>:
 80070e0:	20000484 	.word	0x20000484
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop

080070e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
    __asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	607b      	str	r3, [r7, #4]
}
 8007100:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8007102:	f001 fe8d 	bl	8008e20 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007106:	f7fe fe27 	bl	8005d58 <xTaskIncrementTick>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d006      	beq.n	800711e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8007110:	f001 fee4 	bl	8008edc <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007114:	4b08      	ldr	r3, [pc, #32]	; (8007138 <SysTick_Handler+0x50>)
 8007116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	e001      	b.n	8007122 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800711e:	f001 fec1 	bl	8008ea4 <SEGGER_SYSVIEW_RecordExitISR>
 8007122:	2300      	movs	r3, #0
 8007124:	603b      	str	r3, [r7, #0]
    __asm volatile
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	f383 8811 	msr	BASEPRI, r3
}
 800712c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007140:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <vPortSetupTimerInterrupt+0x34>)
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007146:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <vPortSetupTimerInterrupt+0x38>)
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <vPortSetupTimerInterrupt+0x3c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0a      	ldr	r2, [pc, #40]	; (800717c <vPortSetupTimerInterrupt+0x40>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	099b      	lsrs	r3, r3, #6
 8007158:	4a09      	ldr	r2, [pc, #36]	; (8007180 <vPortSetupTimerInterrupt+0x44>)
 800715a:	3b01      	subs	r3, #1
 800715c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800715e:	4b04      	ldr	r3, [pc, #16]	; (8007170 <vPortSetupTimerInterrupt+0x34>)
 8007160:	2207      	movs	r2, #7
 8007162:	601a      	str	r2, [r3, #0]
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	e000e010 	.word	0xe000e010
 8007174:	e000e018 	.word	0xe000e018
 8007178:	2000000c 	.word	0x2000000c
 800717c:	10624dd3 	.word	0x10624dd3
 8007180:	e000e014 	.word	0xe000e014

08007184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007194 <vPortEnableVFP+0x10>
 8007188:	6801      	ldr	r1, [r0, #0]
 800718a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800718e:	6001      	str	r1, [r0, #0]
 8007190:	4770      	bx	lr
 8007192:	0000      	.short	0x0000
 8007194:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop

0800719c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80071a2:	f3ef 8305 	mrs	r3, IPSR
 80071a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b0f      	cmp	r3, #15
 80071ac:	d914      	bls.n	80071d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071ae:	4a17      	ldr	r2, [pc, #92]	; (800720c <vPortValidateInterruptPriority+0x70>)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071b8:	4b15      	ldr	r3, [pc, #84]	; (8007210 <vPortValidateInterruptPriority+0x74>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	7afa      	ldrb	r2, [r7, #11]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d20a      	bcs.n	80071d8 <vPortValidateInterruptPriority+0x3c>
    __asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	607b      	str	r3, [r7, #4]
}
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071d8:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <vPortValidateInterruptPriority+0x78>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071e0:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <vPortValidateInterruptPriority+0x7c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d90a      	bls.n	80071fe <vPortValidateInterruptPriority+0x62>
    __asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	603b      	str	r3, [r7, #0]
}
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <vPortValidateInterruptPriority+0x60>
    }
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	e000e3f0 	.word	0xe000e3f0
 8007210:	200005c4 	.word	0x200005c4
 8007214:	e000ed0c 	.word	0xe000ed0c
 8007218:	200005c8 	.word	0x200005c8

0800721c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08e      	sub	sp, #56	; 0x38
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d022      	beq.n	8007274 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800722e:	2308      	movs	r3, #8
 8007230:	43db      	mvns	r3, r3
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	429a      	cmp	r2, r3
 8007236:	d81b      	bhi.n	8007270 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8007238:	2208      	movs	r2, #8
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4413      	add	r3, r2
 800723e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	2b00      	cmp	r3, #0
 8007248:	d014      	beq.n	8007274 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	f1c3 0308 	rsb	r3, r3, #8
 8007254:	62bb      	str	r3, [r7, #40]	; 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	43db      	mvns	r3, r3
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d804      	bhi.n	800726a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	4413      	add	r3, r2
 8007266:	607b      	str	r3, [r7, #4]
 8007268:	e004      	b.n	8007274 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	607b      	str	r3, [r7, #4]
 800726e:	e001      	b.n	8007274 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8007274:	f7fe fc36 	bl	8005ae4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007278:	4b77      	ldr	r3, [pc, #476]	; (8007458 <pvPortMalloc+0x23c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8007280:	f000 f970 	bl	8007564 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	f2c0 80ce 	blt.w	8007428 <pvPortMalloc+0x20c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 80ca 	beq.w	8007428 <pvPortMalloc+0x20c>
 8007294:	4b71      	ldr	r3, [pc, #452]	; (800745c <pvPortMalloc+0x240>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	429a      	cmp	r2, r3
 800729c:	f200 80c4 	bhi.w	8007428 <pvPortMalloc+0x20c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80072a0:	4b6f      	ldr	r3, [pc, #444]	; (8007460 <pvPortMalloc+0x244>)
 80072a2:	633b      	str	r3, [r7, #48]	; 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80072a4:	4b6e      	ldr	r3, [pc, #440]	; (8007460 <pvPortMalloc+0x244>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	637b      	str	r3, [r7, #52]	; 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ac:	4a6d      	ldr	r2, [pc, #436]	; (8007464 <pvPortMalloc+0x248>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d305      	bcc.n	80072be <pvPortMalloc+0xa2>
 80072b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b4:	4a6c      	ldr	r2, [pc, #432]	; (8007468 <pvPortMalloc+0x24c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d801      	bhi.n	80072be <pvPortMalloc+0xa2>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <pvPortMalloc+0xa4>
 80072be:	2300      	movs	r3, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d127      	bne.n	8007314 <pvPortMalloc+0xf8>
    __asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	623b      	str	r3, [r7, #32]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80072da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072dc:	633b      	str	r3, [r7, #48]	; 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80072de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	4a5f      	ldr	r2, [pc, #380]	; (8007464 <pvPortMalloc+0x248>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d305      	bcc.n	80072f8 <pvPortMalloc+0xdc>
 80072ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ee:	4a5e      	ldr	r2, [pc, #376]	; (8007468 <pvPortMalloc+0x24c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d801      	bhi.n	80072f8 <pvPortMalloc+0xdc>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <pvPortMalloc+0xde>
 80072f8:	2300      	movs	r3, #0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <pvPortMalloc+0xf8>
    __asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	61fb      	str	r3, [r7, #28]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <pvPortMalloc+0xf6>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8007314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d903      	bls.n	8007326 <pvPortMalloc+0x10a>
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1d9      	bne.n	80072da <pvPortMalloc+0xbe>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007326:	4b4c      	ldr	r3, [pc, #304]	; (8007458 <pvPortMalloc+0x23c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800732c:	429a      	cmp	r2, r3
 800732e:	d07b      	beq.n	8007428 <pvPortMalloc+0x20c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2208      	movs	r2, #8
 8007336:	4413      	add	r3, r2
 8007338:	62fb      	str	r3, [r7, #44]	; 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	4a49      	ldr	r2, [pc, #292]	; (8007464 <pvPortMalloc+0x248>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d305      	bcc.n	800734e <pvPortMalloc+0x132>
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	4a48      	ldr	r2, [pc, #288]	; (8007468 <pvPortMalloc+0x24c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d801      	bhi.n	800734e <pvPortMalloc+0x132>
 800734a:	2301      	movs	r3, #1
 800734c:	e000      	b.n	8007350 <pvPortMalloc+0x134>
 800734e:	2300      	movs	r3, #0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <pvPortMalloc+0x14e>
    __asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	61bb      	str	r3, [r7, #24]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <pvPortMalloc+0x14c>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	429a      	cmp	r2, r3
 800737a:	d90a      	bls.n	8007392 <pvPortMalloc+0x176>
    __asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	617b      	str	r3, [r7, #20]
}
 800738e:	bf00      	nop
 8007390:	e7fe      	b.n	8007390 <pvPortMalloc+0x174>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	1ad2      	subs	r2, r2, r3
 800739a:	2308      	movs	r3, #8
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	429a      	cmp	r2, r3
 80073a0:	d923      	bls.n	80073ea <pvPortMalloc+0x1ce>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4413      	add	r3, r2
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <pvPortMalloc+0x1ae>
    __asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	613b      	str	r3, [r7, #16]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <pvPortMalloc+0x1ac>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	1ad2      	subs	r2, r2, r3
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80073d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073ea:	4b1c      	ldr	r3, [pc, #112]	; (800745c <pvPortMalloc+0x240>)
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	4a19      	ldr	r2, [pc, #100]	; (800745c <pvPortMalloc+0x240>)
 80073f6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073f8:	4b18      	ldr	r3, [pc, #96]	; (800745c <pvPortMalloc+0x240>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	4b1b      	ldr	r3, [pc, #108]	; (800746c <pvPortMalloc+0x250>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d203      	bcs.n	800740c <pvPortMalloc+0x1f0>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007404:	4b15      	ldr	r3, [pc, #84]	; (800745c <pvPortMalloc+0x240>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a18      	ldr	r2, [pc, #96]	; (800746c <pvPortMalloc+0x250>)
 800740a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007416:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800741e:	4b14      	ldr	r3, [pc, #80]	; (8007470 <pvPortMalloc+0x254>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3301      	adds	r3, #1
 8007424:	4a12      	ldr	r2, [pc, #72]	; (8007470 <pvPortMalloc+0x254>)
 8007426:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007428:	f7fe fb6a 	bl	8005b00 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <pvPortMalloc+0x230>
    __asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	60fb      	str	r3, [r7, #12]
}
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <pvPortMalloc+0x22e>
    return pvReturn;
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800744e:	4618      	mov	r0, r3
 8007450:	3738      	adds	r7, #56	; 0x38
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200131d4 	.word	0x200131d4
 800745c:	200131d8 	.word	0x200131d8
 8007460:	200131cc 	.word	0x200131cc
 8007464:	200005cc 	.word	0x200005cc
 8007468:	200131cb 	.word	0x200131cb
 800746c:	200131dc 	.word	0x200131dc
 8007470:	200131e0 	.word	0x200131e0

08007474 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b088      	sub	sp, #32
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d061      	beq.n	800754a <vPortFree+0xd6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007486:	2308      	movs	r3, #8
 8007488:	425b      	negs	r3, r3
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	4a2f      	ldr	r2, [pc, #188]	; (8007554 <vPortFree+0xe0>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d305      	bcc.n	80074a8 <vPortFree+0x34>
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	4a2e      	ldr	r2, [pc, #184]	; (8007558 <vPortFree+0xe4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d801      	bhi.n	80074a8 <vPortFree+0x34>
 80074a4:	2301      	movs	r3, #1
 80074a6:	e000      	b.n	80074aa <vPortFree+0x36>
 80074a8:	2300      	movs	r3, #0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <vPortFree+0x50>
    __asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	617b      	str	r3, [r7, #20]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	db0a      	blt.n	80074e2 <vPortFree+0x6e>
    __asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	613b      	str	r3, [r7, #16]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <vPortFree+0x6c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <vPortFree+0x8c>
    __asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	60fb      	str	r3, [r7, #12]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <vPortFree+0x8a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	0fdb      	lsrs	r3, r3, #31
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01c      	beq.n	800754a <vPortFree+0xd6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d118      	bne.n	800754a <vPortFree+0xd6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8007524:	f7fe fade 	bl	8005ae4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	4b0b      	ldr	r3, [pc, #44]	; (800755c <vPortFree+0xe8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4413      	add	r3, r2
 8007532:	4a0a      	ldr	r2, [pc, #40]	; (800755c <vPortFree+0xe8>)
 8007534:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007536:	69b8      	ldr	r0, [r7, #24]
 8007538:	f000 f86e 	bl	8007618 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800753c:	4b08      	ldr	r3, [pc, #32]	; (8007560 <vPortFree+0xec>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	4a07      	ldr	r2, [pc, #28]	; (8007560 <vPortFree+0xec>)
 8007544:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007546:	f7fe fadb 	bl	8005b00 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800754a:	bf00      	nop
 800754c:	3720      	adds	r7, #32
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	200005cc 	.word	0x200005cc
 8007558:	200131cb 	.word	0x200131cb
 800755c:	200131d8 	.word	0x200131d8
 8007560:	200131e4 	.word	0x200131e4

08007564 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800756a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800756e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007570:	4b24      	ldr	r3, [pc, #144]	; (8007604 <prvHeapInit+0xa0>)
 8007572:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3307      	adds	r3, #7
 8007582:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0307 	bic.w	r3, r3, #7
 800758a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	4a1c      	ldr	r2, [pc, #112]	; (8007604 <prvHeapInit+0xa0>)
 8007594:	4413      	add	r3, r2
 8007596:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4a1b      	ldr	r2, [pc, #108]	; (8007608 <prvHeapInit+0xa4>)
 800759c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800759e:	4b1a      	ldr	r3, [pc, #104]	; (8007608 <prvHeapInit+0xa4>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4413      	add	r3, r2
 80075aa:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80075ac:	2208      	movs	r2, #8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f023 0307 	bic.w	r3, r3, #7
 80075ba:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a13      	ldr	r2, [pc, #76]	; (800760c <prvHeapInit+0xa8>)
 80075c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80075c2:	4b12      	ldr	r3, [pc, #72]	; (800760c <prvHeapInit+0xa8>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2200      	movs	r2, #0
 80075c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80075ca:	4b10      	ldr	r3, [pc, #64]	; (800760c <prvHeapInit+0xa8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	1ad2      	subs	r2, r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80075e0:	4b0a      	ldr	r3, [pc, #40]	; (800760c <prvHeapInit+0xa8>)
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	4a08      	ldr	r2, [pc, #32]	; (8007610 <prvHeapInit+0xac>)
 80075ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	4a07      	ldr	r2, [pc, #28]	; (8007614 <prvHeapInit+0xb0>)
 80075f6:	6013      	str	r3, [r2, #0]
}
 80075f8:	bf00      	nop
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	200005cc 	.word	0x200005cc
 8007608:	200131cc 	.word	0x200131cc
 800760c:	200131d4 	.word	0x200131d4
 8007610:	200131dc 	.word	0x200131dc
 8007614:	200131d8 	.word	0x200131d8

08007618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8007620:	4b36      	ldr	r3, [pc, #216]	; (80076fc <prvInsertBlockIntoFreeList+0xe4>)
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	e002      	b.n	800762c <prvInsertBlockIntoFreeList+0x14>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	429a      	cmp	r2, r3
 8007634:	d8f7      	bhi.n	8007626 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	4a30      	ldr	r2, [pc, #192]	; (80076fc <prvInsertBlockIntoFreeList+0xe4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d017      	beq.n	800766e <prvInsertBlockIntoFreeList+0x56>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	4a2f      	ldr	r2, [pc, #188]	; (8007700 <prvInsertBlockIntoFreeList+0xe8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d305      	bcc.n	8007652 <prvInsertBlockIntoFreeList+0x3a>
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	4a2e      	ldr	r2, [pc, #184]	; (8007704 <prvInsertBlockIntoFreeList+0xec>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d801      	bhi.n	8007652 <prvInsertBlockIntoFreeList+0x3a>
 800764e:	2301      	movs	r3, #1
 8007650:	e000      	b.n	8007654 <prvInsertBlockIntoFreeList+0x3c>
 8007652:	2300      	movs	r3, #0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <prvInsertBlockIntoFreeList+0x56>
    __asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	60fb      	str	r3, [r7, #12]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4413      	add	r3, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d108      	bne.n	8007692 <prvInsertBlockIntoFreeList+0x7a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	441a      	add	r2, r3
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	441a      	add	r2, r3
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d118      	bne.n	80076d8 <prvInsertBlockIntoFreeList+0xc0>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b17      	ldr	r3, [pc, #92]	; (8007708 <prvInsertBlockIntoFreeList+0xf0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d00d      	beq.n	80076ce <prvInsertBlockIntoFreeList+0xb6>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	441a      	add	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	e008      	b.n	80076e0 <prvInsertBlockIntoFreeList+0xc8>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80076ce:	4b0e      	ldr	r3, [pc, #56]	; (8007708 <prvInsertBlockIntoFreeList+0xf0>)
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	e003      	b.n	80076e0 <prvInsertBlockIntoFreeList+0xc8>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d002      	beq.n	80076ee <prvInsertBlockIntoFreeList+0xd6>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80076ee:	bf00      	nop
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	200131cc 	.word	0x200131cc
 8007700:	200005cc 	.word	0x200005cc
 8007704:	200131cb 	.word	0x200131cb
 8007708:	200131d4 	.word	0x200131d4

0800770c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007710:	4803      	ldr	r0, [pc, #12]	; (8007720 <_cbSendSystemDesc+0x14>)
 8007712:	f001 fb2f 	bl	8008d74 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007716:	4803      	ldr	r0, [pc, #12]	; (8007724 <_cbSendSystemDesc+0x18>)
 8007718:	f001 fb2c 	bl	8008d74 <SEGGER_SYSVIEW_SendSysDesc>
}
 800771c:	bf00      	nop
 800771e:	bd80      	pop	{r7, pc}
 8007720:	0800e0c0 	.word	0x0800e0c0
 8007724:	0800e100 	.word	0x0800e100

08007728 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <SEGGER_SYSVIEW_Conf+0x20>)
 800772e:	6818      	ldr	r0, [r3, #0]
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <SEGGER_SYSVIEW_Conf+0x20>)
 8007732:	6819      	ldr	r1, [r3, #0]
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <SEGGER_SYSVIEW_Conf+0x24>)
 8007736:	4a06      	ldr	r2, [pc, #24]	; (8007750 <SEGGER_SYSVIEW_Conf+0x28>)
 8007738:	f000 fe9a 	bl	8008470 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800773c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007740:	f000 feda 	bl	80084f8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007744:	bf00      	nop
 8007746:	bd80      	pop	{r7, pc}
 8007748:	2000000c 	.word	0x2000000c
 800774c:	0800770d 	.word	0x0800770d
 8007750:	0800e19c 	.word	0x0800e19c

08007754 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007756:	b085      	sub	sp, #20
 8007758:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800775a:	2300      	movs	r3, #0
 800775c:	607b      	str	r3, [r7, #4]
 800775e:	e033      	b.n	80077c8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007760:	491e      	ldr	r1, [pc, #120]	; (80077dc <_cbSendTaskList+0x88>)
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	491a      	ldr	r1, [pc, #104]	; (80077dc <_cbSendTaskList+0x88>)
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	3304      	adds	r3, #4
 8007780:	6819      	ldr	r1, [r3, #0]
 8007782:	4c16      	ldr	r4, [pc, #88]	; (80077dc <_cbSendTaskList+0x88>)
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4423      	add	r3, r4
 8007790:	3308      	adds	r3, #8
 8007792:	681c      	ldr	r4, [r3, #0]
 8007794:	4d11      	ldr	r5, [pc, #68]	; (80077dc <_cbSendTaskList+0x88>)
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4613      	mov	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	442b      	add	r3, r5
 80077a2:	330c      	adds	r3, #12
 80077a4:	681d      	ldr	r5, [r3, #0]
 80077a6:	4e0d      	ldr	r6, [pc, #52]	; (80077dc <_cbSendTaskList+0x88>)
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4433      	add	r3, r6
 80077b4:	3310      	adds	r3, #16
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	462b      	mov	r3, r5
 80077bc:	4622      	mov	r2, r4
 80077be:	f000 f8bd 	bl	800793c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3301      	adds	r3, #1
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <_cbSendTaskList+0x8c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3c6      	bcc.n	8007760 <_cbSendTaskList+0xc>
  }
}
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077dc:	200131e8 	.word	0x200131e8
 80077e0:	20013288 	.word	0x20013288

080077e4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80077e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80077ec:	f7fe faa2 	bl	8005d34 <xTaskGetTickCountFromISR>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2200      	movs	r2, #0
 80077f4:	469a      	mov	sl, r3
 80077f6:	4693      	mov	fp, r2
 80077f8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80077fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	f04f 0a00 	mov.w	sl, #0
 8007808:	f04f 0b00 	mov.w	fp, #0
 800780c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8007810:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007814:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007818:	4652      	mov	r2, sl
 800781a:	465b      	mov	r3, fp
 800781c:	1a14      	subs	r4, r2, r0
 800781e:	eb63 0501 	sbc.w	r5, r3, r1
 8007822:	f04f 0200 	mov.w	r2, #0
 8007826:	f04f 0300 	mov.w	r3, #0
 800782a:	00ab      	lsls	r3, r5, #2
 800782c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8007830:	00a2      	lsls	r2, r4, #2
 8007832:	4614      	mov	r4, r2
 8007834:	461d      	mov	r5, r3
 8007836:	eb14 0800 	adds.w	r8, r4, r0
 800783a:	eb45 0901 	adc.w	r9, r5, r1
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	f04f 0300 	mov.w	r3, #0
 8007846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800784a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800784e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007852:	4690      	mov	r8, r2
 8007854:	4699      	mov	r9, r3
 8007856:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800785a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800785e:	4610      	mov	r0, r2
 8007860:	4619      	mov	r1, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800786c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af02      	add	r7, sp, #8
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800787a:	2205      	movs	r2, #5
 800787c:	492b      	ldr	r1, [pc, #172]	; (800792c <SYSVIEW_AddTask+0xc0>)
 800787e:	68b8      	ldr	r0, [r7, #8]
 8007880:	f002 fd89 	bl	800a396 <memcmp>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d04b      	beq.n	8007922 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800788a:	4b29      	ldr	r3, [pc, #164]	; (8007930 <SYSVIEW_AddTask+0xc4>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b07      	cmp	r3, #7
 8007890:	d903      	bls.n	800789a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8007892:	4828      	ldr	r0, [pc, #160]	; (8007934 <SYSVIEW_AddTask+0xc8>)
 8007894:	f001 fd76 	bl	8009384 <SEGGER_SYSVIEW_Warn>
    return;
 8007898:	e044      	b.n	8007924 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800789a:	4b25      	ldr	r3, [pc, #148]	; (8007930 <SYSVIEW_AddTask+0xc4>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4926      	ldr	r1, [pc, #152]	; (8007938 <SYSVIEW_AddTask+0xcc>)
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	440b      	add	r3, r1
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80078ae:	4b20      	ldr	r3, [pc, #128]	; (8007930 <SYSVIEW_AddTask+0xc4>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4921      	ldr	r1, [pc, #132]	; (8007938 <SYSVIEW_AddTask+0xcc>)
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	3304      	adds	r3, #4
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80078c4:	4b1a      	ldr	r3, [pc, #104]	; (8007930 <SYSVIEW_AddTask+0xc4>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	491b      	ldr	r1, [pc, #108]	; (8007938 <SYSVIEW_AddTask+0xcc>)
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	3308      	adds	r3, #8
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80078da:	4b15      	ldr	r3, [pc, #84]	; (8007930 <SYSVIEW_AddTask+0xc4>)
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	4916      	ldr	r1, [pc, #88]	; (8007938 <SYSVIEW_AddTask+0xcc>)
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	440b      	add	r3, r1
 80078ea:	330c      	adds	r3, #12
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80078f0:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <SYSVIEW_AddTask+0xc4>)
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	4910      	ldr	r1, [pc, #64]	; (8007938 <SYSVIEW_AddTask+0xcc>)
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	440b      	add	r3, r1
 8007900:	3310      	adds	r3, #16
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007906:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <SYSVIEW_AddTask+0xc4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3301      	adds	r3, #1
 800790c:	4a08      	ldr	r2, [pc, #32]	; (8007930 <SYSVIEW_AddTask+0xc4>)
 800790e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	68b9      	ldr	r1, [r7, #8]
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 f80e 	bl	800793c <SYSVIEW_SendTaskInfo>
 8007920:	e000      	b.n	8007924 <SYSVIEW_AddTask+0xb8>
    return;
 8007922:	bf00      	nop

}
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	0800e110 	.word	0x0800e110
 8007930:	20013288 	.word	0x20013288
 8007934:	0800e118 	.word	0x0800e118
 8007938:	200131e8 	.word	0x200131e8

0800793c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800793c:	b580      	push	{r7, lr}
 800793e:	b08a      	sub	sp, #40	; 0x28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800794a:	f107 0314 	add.w	r3, r7, #20
 800794e:	2214      	movs	r2, #20
 8007950:	2100      	movs	r1, #0
 8007952:	4618      	mov	r0, r3
 8007954:	f002 fd2f 	bl	800a3b6 <memset>
  TaskInfo.TaskID     = TaskID;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800796c:	f107 0314 	add.w	r3, r7, #20
 8007970:	4618      	mov	r0, r3
 8007972:	f001 f907 	bl	8008b84 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007976:	bf00      	nop
 8007978:	3728      	adds	r7, #40	; 0x28
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
	...

08007980 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007986:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <_DoInit+0xa0>)
 8007988:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800798a:	22a8      	movs	r2, #168	; 0xa8
 800798c:	2100      	movs	r1, #0
 800798e:	6838      	ldr	r0, [r7, #0]
 8007990:	f002 fd11 	bl	800a3b6 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2203      	movs	r2, #3
 8007998:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2203      	movs	r2, #3
 800799e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	4a20      	ldr	r2, [pc, #128]	; (8007a24 <_DoInit+0xa4>)
 80079a4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	4a1f      	ldr	r2, [pc, #124]	; (8007a28 <_DoInit+0xa8>)
 80079aa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079b2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2200      	movs	r2, #0
 80079b8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2200      	movs	r2, #0
 80079be:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	4a16      	ldr	r2, [pc, #88]	; (8007a24 <_DoInit+0xa4>)
 80079ca:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	4a17      	ldr	r2, [pc, #92]	; (8007a2c <_DoInit+0xac>)
 80079d0:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2210      	movs	r2, #16
 80079d6:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2200      	movs	r2, #0
 80079dc:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2200      	movs	r2, #0
 80079e2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2200      	movs	r2, #0
 80079e8:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80079ea:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80079ee:	2300      	movs	r3, #0
 80079f0:	607b      	str	r3, [r7, #4]
 80079f2:	e00c      	b.n	8007a0e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f1c3 030f 	rsb	r3, r3, #15
 80079fa:	4a0d      	ldr	r2, [pc, #52]	; (8007a30 <_DoInit+0xb0>)
 80079fc:	5cd1      	ldrb	r1, [r2, r3]
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4413      	add	r3, r2
 8007a04:	460a      	mov	r2, r1
 8007a06:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	607b      	str	r3, [r7, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b0f      	cmp	r3, #15
 8007a12:	d9ef      	bls.n	80079f4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007a14:	f3bf 8f5f 	dmb	sy
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	2001328c 	.word	0x2001328c
 8007a24:	0800e168 	.word	0x0800e168
 8007a28:	20013334 	.word	0x20013334
 8007a2c:	20013734 	.word	0x20013734
 8007a30:	0800e1a4 	.word	0x0800e1a4

08007a34 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	; 0x28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8007a40:	2300      	movs	r3, #0
 8007a42:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d905      	bls.n	8007a64 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
 8007a62:	e007      	b.n	8007a74 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	69b9      	ldr	r1, [r7, #24]
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	1acb      	subs	r3, r1, r3
 8007a6e:	4413      	add	r3, r2
 8007a70:	3b01      	subs	r3, #1
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	bf28      	it	cs
 8007a82:	4613      	movcs	r3, r2
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8007a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	bf28      	it	cs
 8007a8e:	4613      	movcs	r3, r2
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	4413      	add	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	6978      	ldr	r0, [r7, #20]
 8007aa2:	f002 fcf6 	bl	800a492 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8007aa6:	6a3a      	ldr	r2, [r7, #32]
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	4413      	add	r3, r2
 8007aac:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	4413      	add	r3, r2
 8007ab4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	4413      	add	r3, r2
 8007ac4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d101      	bne.n	8007ad4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007ad4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1b2      	bne.n	8007a4a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3728      	adds	r7, #40	; 0x28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b088      	sub	sp, #32
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d911      	bls.n	8007b36 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	4413      	add	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	6938      	ldr	r0, [r7, #16]
 8007b22:	f002 fcb6 	bl	800a492 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007b26:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	441a      	add	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8007b34:	e01f      	b.n	8007b76 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	4413      	add	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	6938      	ldr	r0, [r7, #16]
 8007b4a:	f002 fca2 	bl	800a492 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	4413      	add	r3, r2
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6938      	ldr	r0, [r7, #16]
 8007b68:	f002 fc93 	bl	800a492 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007b6c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	60da      	str	r2, [r3, #12]
}
 8007b76:	bf00      	nop
 8007b78:	3720      	adds	r7, #32
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8007b7e:	b480      	push	{r7}
 8007b80:	b087      	sub	sp, #28
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d808      	bhi.n	8007bac <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	1ad2      	subs	r2, r2, r3
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	e004      	b.n	8007bb6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	617b      	str	r3, [r7, #20]
  }
  return r;
 8007bb6:	697b      	ldr	r3, [r7, #20]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08c      	sub	sp, #48	; 0x30
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007bd0:	4b3e      	ldr	r3, [pc, #248]	; (8007ccc <SEGGER_RTT_ReadNoLock+0x108>)
 8007bd2:	623b      	str	r3, [r7, #32]
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b53      	cmp	r3, #83	; 0x53
 8007bdc:	d001      	beq.n	8007be2 <SEGGER_RTT_ReadNoLock+0x1e>
 8007bde:	f7ff fecf 	bl	8007980 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4613      	mov	r3, r2
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	4413      	add	r3, r2
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	3360      	adds	r3, #96	; 0x60
 8007bee:	4a37      	ldr	r2, [pc, #220]	; (8007ccc <SEGGER_RTT_ReadNoLock+0x108>)
 8007bf0:	4413      	add	r3, r2
 8007bf2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8007c04:	2300      	movs	r3, #0
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d92b      	bls.n	8007c68 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	bf28      	it	cs
 8007c22:	4613      	movcs	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	4413      	add	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	6939      	ldr	r1, [r7, #16]
 8007c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c36:	f002 fc2c 	bl	800a492 <memcpy>
    NumBytesRead += NumBytesRem;
 8007c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	4413      	add	r3, r2
 8007c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	4413      	add	r3, r2
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	4413      	add	r3, r2
 8007c58:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d101      	bne.n	8007c68 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8007c64:	2300      	movs	r3, #0
 8007c66:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4293      	cmp	r3, r2
 8007c76:	bf28      	it	cs
 8007c78:	4613      	movcs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d019      	beq.n	8007cb6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	4413      	add	r3, r2
 8007c8a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	6939      	ldr	r1, [r7, #16]
 8007c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c92:	f002 fbfe 	bl	800a492 <memcpy>
    NumBytesRead += NumBytesRem;
 8007c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cc0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3730      	adds	r7, #48	; 0x30
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	2001328c 	.word	0x2001328c

08007cd0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	4413      	add	r3, r2
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	4a1f      	ldr	r2, [pc, #124]	; (8007d6c <SEGGER_RTT_WriteNoLock+0x9c>)
 8007cee:	4413      	add	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d029      	beq.n	8007d4e <SEGGER_RTT_WriteNoLock+0x7e>
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d82e      	bhi.n	8007d5c <SEGGER_RTT_WriteNoLock+0x8c>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <SEGGER_RTT_WriteNoLock+0x38>
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d013      	beq.n	8007d2e <SEGGER_RTT_WriteNoLock+0x5e>
 8007d06:	e029      	b.n	8007d5c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8007d08:	6978      	ldr	r0, [r7, #20]
 8007d0a:	f7ff ff38 	bl	8007b7e <_GetAvailWriteSpace>
 8007d0e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d202      	bcs.n	8007d1e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8007d1c:	e021      	b.n	8007d62 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	69b9      	ldr	r1, [r7, #24]
 8007d26:	6978      	ldr	r0, [r7, #20]
 8007d28:	f7ff fee1 	bl	8007aee <_WriteNoCheck>
    break;
 8007d2c:	e019      	b.n	8007d62 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8007d2e:	6978      	ldr	r0, [r7, #20]
 8007d30:	f7ff ff25 	bl	8007b7e <_GetAvailWriteSpace>
 8007d34:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	bf28      	it	cs
 8007d3e:	4613      	movcs	r3, r2
 8007d40:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8007d42:	69fa      	ldr	r2, [r7, #28]
 8007d44:	69b9      	ldr	r1, [r7, #24]
 8007d46:	6978      	ldr	r0, [r7, #20]
 8007d48:	f7ff fed1 	bl	8007aee <_WriteNoCheck>
    break;
 8007d4c:	e009      	b.n	8007d62 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	69b9      	ldr	r1, [r7, #24]
 8007d52:	6978      	ldr	r0, [r7, #20]
 8007d54:	f7ff fe6e 	bl	8007a34 <_WriteBlocking>
 8007d58:	61f8      	str	r0, [r7, #28]
    break;
 8007d5a:	e002      	b.n	8007d62 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61fb      	str	r3, [r7, #28]
    break;
 8007d60:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8007d62:	69fb      	ldr	r3, [r7, #28]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3720      	adds	r7, #32
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	2001328c 	.word	0x2001328c

08007d70 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8007d7c:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <SEGGER_RTT_Write+0x48>)
 8007d7e:	61fb      	str	r3, [r7, #28]
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b53      	cmp	r3, #83	; 0x53
 8007d88:	d001      	beq.n	8007d8e <SEGGER_RTT_Write+0x1e>
 8007d8a:	f7ff fdf9 	bl	8007980 <_DoInit>
  SEGGER_RTT_LOCK();
 8007d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8007d92:	f04f 0120 	mov.w	r1, #32
 8007d96:	f381 8811 	msr	BASEPRI, r1
 8007d9a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff ff95 	bl	8007cd0 <SEGGER_RTT_WriteNoLock>
 8007da6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8007dae:	697b      	ldr	r3, [r7, #20]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3720      	adds	r7, #32
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	2001328c 	.word	0x2001328c

08007dbc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007dca:	4b3d      	ldr	r3, [pc, #244]	; (8007ec0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007dcc:	61bb      	str	r3, [r7, #24]
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b53      	cmp	r3, #83	; 0x53
 8007dd6:	d001      	beq.n	8007ddc <SEGGER_RTT_AllocUpBuffer+0x20>
 8007dd8:	f7ff fdd2 	bl	8007980 <_DoInit>
  SEGGER_RTT_LOCK();
 8007ddc:	f3ef 8311 	mrs	r3, BASEPRI
 8007de0:	f04f 0120 	mov.w	r1, #32
 8007de4:	f381 8811 	msr	BASEPRI, r1
 8007de8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007dea:	4b35      	ldr	r3, [pc, #212]	; (8007ec0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007dec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8007df2:	6939      	ldr	r1, [r7, #16]
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	4613      	mov	r3, r2
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	4413      	add	r3, r2
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	440b      	add	r3, r1
 8007e02:	3304      	adds	r3, #4
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d008      	beq.n	8007e1c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	dbeb      	blt.n	8007df2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8007e1a:	e000      	b.n	8007e1e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007e1c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	da3f      	bge.n	8007ea8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007e28:	6939      	ldr	r1, [r7, #16]
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	4613      	mov	r3, r2
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	4413      	add	r3, r2
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	440b      	add	r3, r1
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007e3c:	6939      	ldr	r1, [r7, #16]
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	4613      	mov	r3, r2
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4413      	add	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8007e52:	6939      	ldr	r1, [r7, #16]
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	4613      	mov	r3, r2
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	4413      	add	r3, r2
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	440b      	add	r3, r1
 8007e60:	3320      	adds	r3, #32
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007e66:	6939      	ldr	r1, [r7, #16]
 8007e68:	69fa      	ldr	r2, [r7, #28]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	4413      	add	r3, r2
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	440b      	add	r3, r1
 8007e74:	3328      	adds	r3, #40	; 0x28
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007e7a:	6939      	ldr	r1, [r7, #16]
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	4413      	add	r3, r2
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	440b      	add	r3, r1
 8007e88:	3324      	adds	r3, #36	; 0x24
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8007e8e:	6939      	ldr	r1, [r7, #16]
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	4613      	mov	r3, r2
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	4413      	add	r3, r2
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	440b      	add	r3, r1
 8007e9c:	332c      	adds	r3, #44	; 0x2c
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007ea2:	f3bf 8f5f 	dmb	sy
 8007ea6:	e002      	b.n	8007eae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007eb4:	69fb      	ldr	r3, [r7, #28]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	2001328c 	.word	0x2001328c

08007ec4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	; 0x28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8007ed2:	4b21      	ldr	r3, [pc, #132]	; (8007f58 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007ed4:	623b      	str	r3, [r7, #32]
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b53      	cmp	r3, #83	; 0x53
 8007ede:	d001      	beq.n	8007ee4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8007ee0:	f7ff fd4e 	bl	8007980 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007ee4:	4b1c      	ldr	r3, [pc, #112]	; (8007f58 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007ee6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d82c      	bhi.n	8007f48 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8007eee:	f3ef 8311 	mrs	r3, BASEPRI
 8007ef2:	f04f 0120 	mov.w	r1, #32
 8007ef6:	f381 8811 	msr	BASEPRI, r1
 8007efa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4613      	mov	r3, r2
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	4413      	add	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	3360      	adds	r3, #96	; 0x60
 8007f08:	69fa      	ldr	r2, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00e      	beq.n	8007f32 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f36:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007f38:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
 8007f46:	e002      	b.n	8007f4e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3728      	adds	r7, #40	; 0x28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	2001328c 	.word	0x2001328c

08007f5c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	60fa      	str	r2, [r7, #12]
 8007f72:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b80      	cmp	r3, #128	; 0x80
 8007f78:	d90a      	bls.n	8007f90 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8007f7a:	2380      	movs	r3, #128	; 0x80
 8007f7c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8007f7e:	e007      	b.n	8007f90 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	1c53      	adds	r3, r2, #1
 8007f84:	60bb      	str	r3, [r7, #8]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1c59      	adds	r1, r3, #1
 8007f8a:	60f9      	str	r1, [r7, #12]
 8007f8c:	7812      	ldrb	r2, [r2, #0]
 8007f8e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	1e5a      	subs	r2, r3, #1
 8007f94:	607a      	str	r2, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <_EncodeStr+0x46>
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1ee      	bne.n	8007f80 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8007fae:	68fb      	ldr	r3, [r7, #12]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3307      	adds	r3, #7
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007fda:	4b34      	ldr	r3, [pc, #208]	; (80080ac <_HandleIncomingPacket+0xd8>)
 8007fdc:	7e1b      	ldrb	r3, [r3, #24]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	1cfb      	adds	r3, r7, #3
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	f7ff fded 	bl	8007bc4 <SEGGER_RTT_ReadNoLock>
 8007fea:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d057      	beq.n	80080a2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	2b80      	cmp	r3, #128	; 0x80
 8007ff6:	d031      	beq.n	800805c <_HandleIncomingPacket+0x88>
 8007ff8:	2b80      	cmp	r3, #128	; 0x80
 8007ffa:	dc40      	bgt.n	800807e <_HandleIncomingPacket+0xaa>
 8007ffc:	2b07      	cmp	r3, #7
 8007ffe:	dc15      	bgt.n	800802c <_HandleIncomingPacket+0x58>
 8008000:	2b00      	cmp	r3, #0
 8008002:	dd3c      	ble.n	800807e <_HandleIncomingPacket+0xaa>
 8008004:	3b01      	subs	r3, #1
 8008006:	2b06      	cmp	r3, #6
 8008008:	d839      	bhi.n	800807e <_HandleIncomingPacket+0xaa>
 800800a:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <_HandleIncomingPacket+0x3c>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008033 	.word	0x08008033
 8008014:	08008039 	.word	0x08008039
 8008018:	0800803f 	.word	0x0800803f
 800801c:	08008045 	.word	0x08008045
 8008020:	0800804b 	.word	0x0800804b
 8008024:	08008051 	.word	0x08008051
 8008028:	08008057 	.word	0x08008057
 800802c:	2b7f      	cmp	r3, #127	; 0x7f
 800802e:	d033      	beq.n	8008098 <_HandleIncomingPacket+0xc4>
 8008030:	e025      	b.n	800807e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008032:	f000 fc2d 	bl	8008890 <SEGGER_SYSVIEW_Start>
      break;
 8008036:	e034      	b.n	80080a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008038:	f000 fce4 	bl	8008a04 <SEGGER_SYSVIEW_Stop>
      break;
 800803c:	e031      	b.n	80080a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800803e:	f000 febd 	bl	8008dbc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008042:	e02e      	b.n	80080a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008044:	f000 fe82 	bl	8008d4c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008048:	e02b      	b.n	80080a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800804a:	f000 fd01 	bl	8008a50 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800804e:	e028      	b.n	80080a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008050:	f001 f95a 	bl	8009308 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008054:	e025      	b.n	80080a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008056:	f001 f939 	bl	80092cc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800805a:	e022      	b.n	80080a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800805c:	4b13      	ldr	r3, [pc, #76]	; (80080ac <_HandleIncomingPacket+0xd8>)
 800805e:	7e1b      	ldrb	r3, [r3, #24]
 8008060:	4618      	mov	r0, r3
 8008062:	1cfb      	adds	r3, r7, #3
 8008064:	2201      	movs	r2, #1
 8008066:	4619      	mov	r1, r3
 8008068:	f7ff fdac 	bl	8007bc4 <SEGGER_RTT_ReadNoLock>
 800806c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d013      	beq.n	800809c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	4618      	mov	r0, r3
 8008078:	f001 f89e 	bl	80091b8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800807c:	e00e      	b.n	800809c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	b25b      	sxtb	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	da0c      	bge.n	80080a0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008086:	4b09      	ldr	r3, [pc, #36]	; (80080ac <_HandleIncomingPacket+0xd8>)
 8008088:	7e1b      	ldrb	r3, [r3, #24]
 800808a:	4618      	mov	r0, r3
 800808c:	1cfb      	adds	r3, r7, #3
 800808e:	2201      	movs	r2, #1
 8008090:	4619      	mov	r1, r3
 8008092:	f7ff fd97 	bl	8007bc4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008096:	e003      	b.n	80080a0 <_HandleIncomingPacket+0xcc>
      break;
 8008098:	bf00      	nop
 800809a:	e002      	b.n	80080a2 <_HandleIncomingPacket+0xce>
      break;
 800809c:	bf00      	nop
 800809e:	e000      	b.n	80080a2 <_HandleIncomingPacket+0xce>
      break;
 80080a0:	bf00      	nop
    }
  }
}
 80080a2:	bf00      	nop
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	2001474c 	.word	0x2001474c

080080b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08c      	sub	sp, #48	; 0x30
 80080b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80080b6:	2301      	movs	r3, #1
 80080b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80080ba:	1d3b      	adds	r3, r7, #4
 80080bc:	3301      	adds	r3, #1
 80080be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080c4:	4b31      	ldr	r3, [pc, #196]	; (800818c <_TrySendOverflowPacket+0xdc>)
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ca:	e00b      	b.n	80080e4 <_TrySendOverflowPacket+0x34>
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	1c59      	adds	r1, r3, #1
 80080d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80080d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080da:	b2d2      	uxtb	r2, r2
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	09db      	lsrs	r3, r3, #7
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	2b7f      	cmp	r3, #127	; 0x7f
 80080e8:	d8f0      	bhi.n	80080cc <_TrySendOverflowPacket+0x1c>
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080f2:	b2d2      	uxtb	r2, r2
 80080f4:	701a      	strb	r2, [r3, #0]
 80080f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80080fa:	4b25      	ldr	r3, [pc, #148]	; (8008190 <_TrySendOverflowPacket+0xe0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008100:	4b22      	ldr	r3, [pc, #136]	; (800818c <_TrySendOverflowPacket+0xdc>)
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	623b      	str	r3, [r7, #32]
 8008112:	e00b      	b.n	800812c <_TrySendOverflowPacket+0x7c>
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	b2da      	uxtb	r2, r3
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	1c59      	adds	r1, r3, #1
 800811c:	6279      	str	r1, [r7, #36]	; 0x24
 800811e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	09db      	lsrs	r3, r3, #7
 800812a:	623b      	str	r3, [r7, #32]
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	2b7f      	cmp	r3, #127	; 0x7f
 8008130:	d8f0      	bhi.n	8008114 <_TrySendOverflowPacket+0x64>
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	627a      	str	r2, [r7, #36]	; 0x24
 8008138:	6a3a      	ldr	r2, [r7, #32]
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8008142:	4b12      	ldr	r3, [pc, #72]	; (800818c <_TrySendOverflowPacket+0xdc>)
 8008144:	785b      	ldrb	r3, [r3, #1]
 8008146:	4618      	mov	r0, r3
 8008148:	1d3b      	adds	r3, r7, #4
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	461a      	mov	r2, r3
 8008150:	1d3b      	adds	r3, r7, #4
 8008152:	4619      	mov	r1, r3
 8008154:	f7f8 f83c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008158:	4603      	mov	r3, r0
 800815a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008162:	4a0a      	ldr	r2, [pc, #40]	; (800818c <_TrySendOverflowPacket+0xdc>)
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008168:	4b08      	ldr	r3, [pc, #32]	; (800818c <_TrySendOverflowPacket+0xdc>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	3b01      	subs	r3, #1
 800816e:	b2da      	uxtb	r2, r3
 8008170:	4b06      	ldr	r3, [pc, #24]	; (800818c <_TrySendOverflowPacket+0xdc>)
 8008172:	701a      	strb	r2, [r3, #0]
 8008174:	e004      	b.n	8008180 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <_TrySendOverflowPacket+0xdc>)
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	3301      	adds	r3, #1
 800817c:	4a03      	ldr	r2, [pc, #12]	; (800818c <_TrySendOverflowPacket+0xdc>)
 800817e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008180:	693b      	ldr	r3, [r7, #16]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3730      	adds	r7, #48	; 0x30
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	2001474c 	.word	0x2001474c
 8008190:	e0001004 	.word	0xe0001004

08008194 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	; 0x28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80081a0:	4b98      	ldr	r3, [pc, #608]	; (8008404 <_SendPacket+0x270>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d010      	beq.n	80081ca <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80081a8:	4b96      	ldr	r3, [pc, #600]	; (8008404 <_SendPacket+0x270>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 812d 	beq.w	800840c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80081b2:	4b94      	ldr	r3, [pc, #592]	; (8008404 <_SendPacket+0x270>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d109      	bne.n	80081ce <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80081ba:	f7ff ff79 	bl	80080b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80081be:	4b91      	ldr	r3, [pc, #580]	; (8008404 <_SendPacket+0x270>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	f040 8124 	bne.w	8008410 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80081c8:	e001      	b.n	80081ce <_SendPacket+0x3a>
    goto Send;
 80081ca:	bf00      	nop
 80081cc:	e000      	b.n	80081d0 <_SendPacket+0x3c>
Send:
 80081ce:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b1f      	cmp	r3, #31
 80081d4:	d809      	bhi.n	80081ea <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80081d6:	4b8b      	ldr	r3, [pc, #556]	; (8008404 <_SendPacket+0x270>)
 80081d8:	69da      	ldr	r2, [r3, #28]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	fa22 f303 	lsr.w	r3, r2, r3
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f040 8115 	bne.w	8008414 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b17      	cmp	r3, #23
 80081ee:	d807      	bhi.n	8008200 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e0c4      	b.n	800838a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	2b7f      	cmp	r3, #127	; 0x7f
 800820c:	d912      	bls.n	8008234 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	09da      	lsrs	r2, r3, #7
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3b01      	subs	r3, #1
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	b2d2      	uxtb	r2, r2
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	3a01      	subs	r2, #1
 8008226:	60fa      	str	r2, [r7, #12]
 8008228:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800822c:	b2da      	uxtb	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	e006      	b.n	8008242 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3b01      	subs	r3, #1
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	b2da      	uxtb	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b7e      	cmp	r3, #126	; 0x7e
 8008246:	d807      	bhi.n	8008258 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3b01      	subs	r3, #1
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	b2da      	uxtb	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e098      	b.n	800838a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800825e:	d212      	bcs.n	8008286 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	09da      	lsrs	r2, r3, #7
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3b01      	subs	r3, #1
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	b2d2      	uxtb	r2, r2
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	3a01      	subs	r2, #1
 8008278:	60fa      	str	r2, [r7, #12]
 800827a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800827e:	b2da      	uxtb	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	e081      	b.n	800838a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800828c:	d21d      	bcs.n	80082ca <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	0b9a      	lsrs	r2, r3, #14
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3b01      	subs	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	09db      	lsrs	r3, r3, #7
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	3a01      	subs	r2, #1
 80082a8:	60fa      	str	r2, [r7, #12]
 80082aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	3a01      	subs	r2, #1
 80082bc:	60fa      	str	r2, [r7, #12]
 80082be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	701a      	strb	r2, [r3, #0]
 80082c8:	e05f      	b.n	800838a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082d0:	d228      	bcs.n	8008324 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	0d5a      	lsrs	r2, r3, #21
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3b01      	subs	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	0b9b      	lsrs	r3, r3, #14
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	3a01      	subs	r2, #1
 80082ec:	60fa      	str	r2, [r7, #12]
 80082ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	09db      	lsrs	r3, r3, #7
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	3a01      	subs	r2, #1
 8008302:	60fa      	str	r2, [r7, #12]
 8008304:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008308:	b2da      	uxtb	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	b2db      	uxtb	r3, r3
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	3a01      	subs	r2, #1
 8008316:	60fa      	str	r2, [r7, #12]
 8008318:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800831c:	b2da      	uxtb	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	e032      	b.n	800838a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	0f1a      	lsrs	r2, r3, #28
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3b01      	subs	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	b2d2      	uxtb	r2, r2
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	0d5b      	lsrs	r3, r3, #21
 8008338:	b2db      	uxtb	r3, r3
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	3a01      	subs	r2, #1
 800833e:	60fa      	str	r2, [r7, #12]
 8008340:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008344:	b2da      	uxtb	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	0b9b      	lsrs	r3, r3, #14
 800834e:	b2db      	uxtb	r3, r3
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	3a01      	subs	r2, #1
 8008354:	60fa      	str	r2, [r7, #12]
 8008356:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800835a:	b2da      	uxtb	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	09db      	lsrs	r3, r3, #7
 8008364:	b2db      	uxtb	r3, r3
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	3a01      	subs	r2, #1
 800836a:	60fa      	str	r2, [r7, #12]
 800836c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008370:	b2da      	uxtb	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	3a01      	subs	r2, #1
 800837e:	60fa      	str	r2, [r7, #12]
 8008380:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008384:	b2da      	uxtb	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800838a:	4b1f      	ldr	r3, [pc, #124]	; (8008408 <_SendPacket+0x274>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008390:	4b1c      	ldr	r3, [pc, #112]	; (8008404 <_SendPacket+0x270>)
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	623b      	str	r3, [r7, #32]
 80083a2:	e00b      	b.n	80083bc <_SendPacket+0x228>
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	1c59      	adds	r1, r3, #1
 80083ac:	6279      	str	r1, [r7, #36]	; 0x24
 80083ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	09db      	lsrs	r3, r3, #7
 80083ba:	623b      	str	r3, [r7, #32]
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	2b7f      	cmp	r3, #127	; 0x7f
 80083c0:	d8f0      	bhi.n	80083a4 <_SendPacket+0x210>
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	627a      	str	r2, [r7, #36]	; 0x24
 80083c8:	6a3a      	ldr	r2, [r7, #32]
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80083d2:	4b0c      	ldr	r3, [pc, #48]	; (8008404 <_SendPacket+0x270>)
 80083d4:	785b      	ldrb	r3, [r3, #1]
 80083d6:	4618      	mov	r0, r3
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	68f9      	ldr	r1, [r7, #12]
 80083e2:	f7f7 fef5 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80083e6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80083ee:	4a05      	ldr	r2, [pc, #20]	; (8008404 <_SendPacket+0x270>)
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	60d3      	str	r3, [r2, #12]
 80083f4:	e00f      	b.n	8008416 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80083f6:	4b03      	ldr	r3, [pc, #12]	; (8008404 <_SendPacket+0x270>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	3301      	adds	r3, #1
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	4b01      	ldr	r3, [pc, #4]	; (8008404 <_SendPacket+0x270>)
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	e008      	b.n	8008416 <_SendPacket+0x282>
 8008404:	2001474c 	.word	0x2001474c
 8008408:	e0001004 	.word	0xe0001004
    goto SendDone;
 800840c:	bf00      	nop
 800840e:	e002      	b.n	8008416 <_SendPacket+0x282>
      goto SendDone;
 8008410:	bf00      	nop
 8008412:	e000      	b.n	8008416 <_SendPacket+0x282>
      goto SendDone;
 8008414:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8008416:	4b14      	ldr	r3, [pc, #80]	; (8008468 <_SendPacket+0x2d4>)
 8008418:	7e1b      	ldrb	r3, [r3, #24]
 800841a:	4619      	mov	r1, r3
 800841c:	4a13      	ldr	r2, [pc, #76]	; (800846c <_SendPacket+0x2d8>)
 800841e:	460b      	mov	r3, r1
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	440b      	add	r3, r1
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4413      	add	r3, r2
 8008428:	336c      	adds	r3, #108	; 0x6c
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	4b0e      	ldr	r3, [pc, #56]	; (8008468 <_SendPacket+0x2d4>)
 800842e:	7e1b      	ldrb	r3, [r3, #24]
 8008430:	4618      	mov	r0, r3
 8008432:	490e      	ldr	r1, [pc, #56]	; (800846c <_SendPacket+0x2d8>)
 8008434:	4603      	mov	r3, r0
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	4403      	add	r3, r0
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	440b      	add	r3, r1
 800843e:	3370      	adds	r3, #112	; 0x70
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d00b      	beq.n	800845e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008446:	4b08      	ldr	r3, [pc, #32]	; (8008468 <_SendPacket+0x2d4>)
 8008448:	789b      	ldrb	r3, [r3, #2]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d107      	bne.n	800845e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800844e:	4b06      	ldr	r3, [pc, #24]	; (8008468 <_SendPacket+0x2d4>)
 8008450:	2201      	movs	r2, #1
 8008452:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008454:	f7ff fdbe 	bl	8007fd4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008458:	4b03      	ldr	r3, [pc, #12]	; (8008468 <_SendPacket+0x2d4>)
 800845a:	2200      	movs	r2, #0
 800845c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800845e:	bf00      	nop
 8008460:	3728      	adds	r7, #40	; 0x28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	2001474c 	.word	0x2001474c
 800846c:	2001328c 	.word	0x2001328c

08008470 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af02      	add	r7, sp, #8
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800847e:	2300      	movs	r3, #0
 8008480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008484:	4917      	ldr	r1, [pc, #92]	; (80084e4 <SEGGER_SYSVIEW_Init+0x74>)
 8008486:	4818      	ldr	r0, [pc, #96]	; (80084e8 <SEGGER_SYSVIEW_Init+0x78>)
 8008488:	f7ff fc98 	bl	8007dbc <SEGGER_RTT_AllocUpBuffer>
 800848c:	4603      	mov	r3, r0
 800848e:	b2da      	uxtb	r2, r3
 8008490:	4b16      	ldr	r3, [pc, #88]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 8008492:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8008494:	4b15      	ldr	r3, [pc, #84]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 8008496:	785a      	ldrb	r2, [r3, #1]
 8008498:	4b14      	ldr	r3, [pc, #80]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 800849a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800849c:	4b13      	ldr	r3, [pc, #76]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 800849e:	7e1b      	ldrb	r3, [r3, #24]
 80084a0:	4618      	mov	r0, r3
 80084a2:	2300      	movs	r3, #0
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	2308      	movs	r3, #8
 80084a8:	4a11      	ldr	r2, [pc, #68]	; (80084f0 <SEGGER_SYSVIEW_Init+0x80>)
 80084aa:	490f      	ldr	r1, [pc, #60]	; (80084e8 <SEGGER_SYSVIEW_Init+0x78>)
 80084ac:	f7ff fd0a 	bl	8007ec4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80084b0:	4b0e      	ldr	r3, [pc, #56]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80084b6:	4b0f      	ldr	r3, [pc, #60]	; (80084f4 <SEGGER_SYSVIEW_Init+0x84>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a0c      	ldr	r2, [pc, #48]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 80084bc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80084be:	4a0b      	ldr	r2, [pc, #44]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80084c4:	4a09      	ldr	r2, [pc, #36]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80084ca:	4a08      	ldr	r2, [pc, #32]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80084d0:	4a06      	ldr	r2, [pc, #24]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <SEGGER_SYSVIEW_Init+0x7c>)
 80084d8:	2200      	movs	r2, #0
 80084da:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20013744 	.word	0x20013744
 80084e8:	0800e17c 	.word	0x0800e17c
 80084ec:	2001474c 	.word	0x2001474c
 80084f0:	20014744 	.word	0x20014744
 80084f4:	e0001004 	.word	0xe0001004

080084f8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008500:	4a04      	ldr	r2, [pc, #16]	; (8008514 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6113      	str	r3, [r2, #16]
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	2001474c 	.word	0x2001474c

08008518 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008520:	f3ef 8311 	mrs	r3, BASEPRI
 8008524:	f04f 0120 	mov.w	r1, #32
 8008528:	f381 8811 	msr	BASEPRI, r1
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	4808      	ldr	r0, [pc, #32]	; (8008550 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008530:	f7ff fd44 	bl	8007fbc <_PreparePacket>
 8008534:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	68b8      	ldr	r0, [r7, #8]
 800853c:	f7ff fe2a 	bl	8008194 <_SendPacket>
  RECORD_END();
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f383 8811 	msr	BASEPRI, r3
}
 8008546:	bf00      	nop
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	2001477c 	.word	0x2001477c

08008554 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800855e:	f3ef 8311 	mrs	r3, BASEPRI
 8008562:	f04f 0120 	mov.w	r1, #32
 8008566:	f381 8811 	msr	BASEPRI, r1
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	4816      	ldr	r0, [pc, #88]	; (80085c8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800856e:	f7ff fd25 	bl	8007fbc <_PreparePacket>
 8008572:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	61fb      	str	r3, [r7, #28]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	e00b      	b.n	800859a <SEGGER_SYSVIEW_RecordU32+0x46>
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	b2da      	uxtb	r2, r3
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	1c59      	adds	r1, r3, #1
 800858a:	61f9      	str	r1, [r7, #28]
 800858c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008590:	b2d2      	uxtb	r2, r2
 8008592:	701a      	strb	r2, [r3, #0]
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	09db      	lsrs	r3, r3, #7
 8008598:	61bb      	str	r3, [r7, #24]
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	2b7f      	cmp	r3, #127	; 0x7f
 800859e:	d8f0      	bhi.n	8008582 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	61fa      	str	r2, [r7, #28]
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	b2d2      	uxtb	r2, r2
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	68f9      	ldr	r1, [r7, #12]
 80085b4:	6938      	ldr	r0, [r7, #16]
 80085b6:	f7ff fded 	bl	8008194 <_SendPacket>
  RECORD_END();
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f383 8811 	msr	BASEPRI, r3
}
 80085c0:	bf00      	nop
 80085c2:	3720      	adds	r7, #32
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	2001477c 	.word	0x2001477c

080085cc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08c      	sub	sp, #48	; 0x30
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80085d8:	f3ef 8311 	mrs	r3, BASEPRI
 80085dc:	f04f 0120 	mov.w	r1, #32
 80085e0:	f381 8811 	msr	BASEPRI, r1
 80085e4:	61fb      	str	r3, [r7, #28]
 80085e6:	4825      	ldr	r0, [pc, #148]	; (800867c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80085e8:	f7ff fce8 	bl	8007fbc <_PreparePacket>
 80085ec:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80085fa:	e00b      	b.n	8008614 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008602:	1c59      	adds	r1, r3, #1
 8008604:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	09db      	lsrs	r3, r3, #7
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	2b7f      	cmp	r3, #127	; 0x7f
 8008618:	d8f0      	bhi.n	80085fc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008622:	b2d2      	uxtb	r2, r2
 8008624:	701a      	strb	r2, [r3, #0]
 8008626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008628:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	623b      	str	r3, [r7, #32]
 8008632:	e00b      	b.n	800864c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	b2da      	uxtb	r2, r3
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	1c59      	adds	r1, r3, #1
 800863c:	6279      	str	r1, [r7, #36]	; 0x24
 800863e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	09db      	lsrs	r3, r3, #7
 800864a:	623b      	str	r3, [r7, #32]
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	2b7f      	cmp	r3, #127	; 0x7f
 8008650:	d8f0      	bhi.n	8008634 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	627a      	str	r2, [r7, #36]	; 0x24
 8008658:	6a3a      	ldr	r2, [r7, #32]
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	6979      	ldr	r1, [r7, #20]
 8008666:	69b8      	ldr	r0, [r7, #24]
 8008668:	f7ff fd94 	bl	8008194 <_SendPacket>
  RECORD_END();
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f383 8811 	msr	BASEPRI, r3
}
 8008672:	bf00      	nop
 8008674:	3730      	adds	r7, #48	; 0x30
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	2001477c 	.word	0x2001477c

08008680 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8008680:	b580      	push	{r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800868e:	f3ef 8311 	mrs	r3, BASEPRI
 8008692:	f04f 0120 	mov.w	r1, #32
 8008696:	f381 8811 	msr	BASEPRI, r1
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	4832      	ldr	r0, [pc, #200]	; (8008768 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800869e:	f7ff fc8d 	bl	8007fbc <_PreparePacket>
 80086a2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	633b      	str	r3, [r7, #48]	; 0x30
 80086b0:	e00b      	b.n	80086ca <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b8:	1c59      	adds	r1, r3, #1
 80086ba:	6379      	str	r1, [r7, #52]	; 0x34
 80086bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086c0:	b2d2      	uxtb	r2, r2
 80086c2:	701a      	strb	r2, [r3, #0]
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	09db      	lsrs	r3, r3, #7
 80086c8:	633b      	str	r3, [r7, #48]	; 0x30
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	2b7f      	cmp	r3, #127	; 0x7f
 80086ce:	d8f0      	bhi.n	80086b2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80086d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	637a      	str	r2, [r7, #52]	; 0x34
 80086d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d8:	b2d2      	uxtb	r2, r2
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80086e8:	e00b      	b.n	8008702 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	1c59      	adds	r1, r3, #1
 80086f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80086f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086f8:	b2d2      	uxtb	r2, r2
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	09db      	lsrs	r3, r3, #7
 8008700:	62bb      	str	r3, [r7, #40]	; 0x28
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	2b7f      	cmp	r3, #127	; 0x7f
 8008706:	d8f0      	bhi.n	80086ea <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8008708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800870e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008710:	b2d2      	uxtb	r2, r2
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	623b      	str	r3, [r7, #32]
 8008720:	e00b      	b.n	800873a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	b2da      	uxtb	r2, r3
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	1c59      	adds	r1, r3, #1
 800872a:	6279      	str	r1, [r7, #36]	; 0x24
 800872c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008730:	b2d2      	uxtb	r2, r2
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	09db      	lsrs	r3, r3, #7
 8008738:	623b      	str	r3, [r7, #32]
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	2b7f      	cmp	r3, #127	; 0x7f
 800873e:	d8f0      	bhi.n	8008722 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	627a      	str	r2, [r7, #36]	; 0x24
 8008746:	6a3a      	ldr	r2, [r7, #32]
 8008748:	b2d2      	uxtb	r2, r2
 800874a:	701a      	strb	r2, [r3, #0]
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	6979      	ldr	r1, [r7, #20]
 8008754:	69b8      	ldr	r0, [r7, #24]
 8008756:	f7ff fd1d 	bl	8008194 <_SendPacket>
  RECORD_END();
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	f383 8811 	msr	BASEPRI, r3
}
 8008760:	bf00      	nop
 8008762:	3738      	adds	r7, #56	; 0x38
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	2001477c 	.word	0x2001477c

0800876c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b090      	sub	sp, #64	; 0x40
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800877a:	f3ef 8311 	mrs	r3, BASEPRI
 800877e:	f04f 0120 	mov.w	r1, #32
 8008782:	f381 8811 	msr	BASEPRI, r1
 8008786:	61fb      	str	r3, [r7, #28]
 8008788:	4840      	ldr	r0, [pc, #256]	; (800888c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800878a:	f7ff fc17 	bl	8007fbc <_PreparePacket>
 800878e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	63bb      	str	r3, [r7, #56]	; 0x38
 800879c:	e00b      	b.n	80087b6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a4:	1c59      	adds	r1, r3, #1
 80087a6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80087a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087ac:	b2d2      	uxtb	r2, r2
 80087ae:	701a      	strb	r2, [r3, #0]
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	09db      	lsrs	r3, r3, #7
 80087b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80087b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b8:	2b7f      	cmp	r3, #127	; 0x7f
 80087ba:	d8f0      	bhi.n	800879e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80087bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80087c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087c4:	b2d2      	uxtb	r2, r2
 80087c6:	701a      	strb	r2, [r3, #0]
 80087c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	637b      	str	r3, [r7, #52]	; 0x34
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	633b      	str	r3, [r7, #48]	; 0x30
 80087d4:	e00b      	b.n	80087ee <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087dc:	1c59      	adds	r1, r3, #1
 80087de:	6379      	str	r1, [r7, #52]	; 0x34
 80087e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	701a      	strb	r2, [r3, #0]
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	09db      	lsrs	r3, r3, #7
 80087ec:	633b      	str	r3, [r7, #48]	; 0x30
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	2b7f      	cmp	r3, #127	; 0x7f
 80087f2:	d8f0      	bhi.n	80087d6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80087f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	637a      	str	r2, [r7, #52]	; 0x34
 80087fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fc:	b2d2      	uxtb	r2, r2
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008802:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	62bb      	str	r3, [r7, #40]	; 0x28
 800880c:	e00b      	b.n	8008826 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	b2da      	uxtb	r2, r3
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	1c59      	adds	r1, r3, #1
 8008816:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008818:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800881c:	b2d2      	uxtb	r2, r2
 800881e:	701a      	strb	r2, [r3, #0]
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	09db      	lsrs	r3, r3, #7
 8008824:	62bb      	str	r3, [r7, #40]	; 0x28
 8008826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008828:	2b7f      	cmp	r3, #127	; 0x7f
 800882a:	d8f0      	bhi.n	800880e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008834:	b2d2      	uxtb	r2, r2
 8008836:	701a      	strb	r2, [r3, #0]
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	627b      	str	r3, [r7, #36]	; 0x24
 8008840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008842:	623b      	str	r3, [r7, #32]
 8008844:	e00b      	b.n	800885e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	b2da      	uxtb	r2, r3
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	1c59      	adds	r1, r3, #1
 800884e:	6279      	str	r1, [r7, #36]	; 0x24
 8008850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008854:	b2d2      	uxtb	r2, r2
 8008856:	701a      	strb	r2, [r3, #0]
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	09db      	lsrs	r3, r3, #7
 800885c:	623b      	str	r3, [r7, #32]
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	2b7f      	cmp	r3, #127	; 0x7f
 8008862:	d8f0      	bhi.n	8008846 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	627a      	str	r2, [r7, #36]	; 0x24
 800886a:	6a3a      	ldr	r2, [r7, #32]
 800886c:	b2d2      	uxtb	r2, r2
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	6979      	ldr	r1, [r7, #20]
 8008878:	69b8      	ldr	r0, [r7, #24]
 800887a:	f7ff fc8b 	bl	8008194 <_SendPacket>
  RECORD_END();
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	f383 8811 	msr	BASEPRI, r3
}
 8008884:	bf00      	nop
 8008886:	3740      	adds	r7, #64	; 0x40
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	2001477c 	.word	0x2001477c

08008890 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8008890:	b580      	push	{r7, lr}
 8008892:	b08c      	sub	sp, #48	; 0x30
 8008894:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8008896:	4b58      	ldr	r3, [pc, #352]	; (80089f8 <SEGGER_SYSVIEW_Start+0x168>)
 8008898:	2201      	movs	r2, #1
 800889a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800889c:	f3ef 8311 	mrs	r3, BASEPRI
 80088a0:	f04f 0120 	mov.w	r1, #32
 80088a4:	f381 8811 	msr	BASEPRI, r1
 80088a8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80088aa:	4b53      	ldr	r3, [pc, #332]	; (80089f8 <SEGGER_SYSVIEW_Start+0x168>)
 80088ac:	785b      	ldrb	r3, [r3, #1]
 80088ae:	220a      	movs	r2, #10
 80088b0:	4952      	ldr	r1, [pc, #328]	; (80089fc <SEGGER_SYSVIEW_Start+0x16c>)
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7f7 fc8c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80088be:	200a      	movs	r0, #10
 80088c0:	f7ff fe2a 	bl	8008518 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80088c4:	f3ef 8311 	mrs	r3, BASEPRI
 80088c8:	f04f 0120 	mov.w	r1, #32
 80088cc:	f381 8811 	msr	BASEPRI, r1
 80088d0:	60bb      	str	r3, [r7, #8]
 80088d2:	484b      	ldr	r0, [pc, #300]	; (8008a00 <SEGGER_SYSVIEW_Start+0x170>)
 80088d4:	f7ff fb72 	bl	8007fbc <_PreparePacket>
 80088d8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088e2:	4b45      	ldr	r3, [pc, #276]	; (80089f8 <SEGGER_SYSVIEW_Start+0x168>)
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80088e8:	e00b      	b.n	8008902 <SEGGER_SYSVIEW_Start+0x72>
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	1c59      	adds	r1, r3, #1
 80088f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80088f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088f8:	b2d2      	uxtb	r2, r2
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	09db      	lsrs	r3, r3, #7
 8008900:	62bb      	str	r3, [r7, #40]	; 0x28
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	2b7f      	cmp	r3, #127	; 0x7f
 8008906:	d8f0      	bhi.n	80088ea <SEGGER_SYSVIEW_Start+0x5a>
 8008908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800890e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008910:	b2d2      	uxtb	r2, r2
 8008912:	701a      	strb	r2, [r3, #0]
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	627b      	str	r3, [r7, #36]	; 0x24
 800891c:	4b36      	ldr	r3, [pc, #216]	; (80089f8 <SEGGER_SYSVIEW_Start+0x168>)
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	623b      	str	r3, [r7, #32]
 8008922:	e00b      	b.n	800893c <SEGGER_SYSVIEW_Start+0xac>
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	b2da      	uxtb	r2, r3
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	1c59      	adds	r1, r3, #1
 800892c:	6279      	str	r1, [r7, #36]	; 0x24
 800892e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	701a      	strb	r2, [r3, #0]
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	09db      	lsrs	r3, r3, #7
 800893a:	623b      	str	r3, [r7, #32]
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	2b7f      	cmp	r3, #127	; 0x7f
 8008940:	d8f0      	bhi.n	8008924 <SEGGER_SYSVIEW_Start+0x94>
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	627a      	str	r2, [r7, #36]	; 0x24
 8008948:	6a3a      	ldr	r2, [r7, #32]
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	61fb      	str	r3, [r7, #28]
 8008956:	4b28      	ldr	r3, [pc, #160]	; (80089f8 <SEGGER_SYSVIEW_Start+0x168>)
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	61bb      	str	r3, [r7, #24]
 800895c:	e00b      	b.n	8008976 <SEGGER_SYSVIEW_Start+0xe6>
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	b2da      	uxtb	r2, r3
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	1c59      	adds	r1, r3, #1
 8008966:	61f9      	str	r1, [r7, #28]
 8008968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	09db      	lsrs	r3, r3, #7
 8008974:	61bb      	str	r3, [r7, #24]
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b7f      	cmp	r3, #127	; 0x7f
 800897a:	d8f0      	bhi.n	800895e <SEGGER_SYSVIEW_Start+0xce>
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	61fa      	str	r2, [r7, #28]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	b2d2      	uxtb	r2, r2
 8008986:	701a      	strb	r2, [r3, #0]
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	2300      	movs	r3, #0
 8008992:	613b      	str	r3, [r7, #16]
 8008994:	e00b      	b.n	80089ae <SEGGER_SYSVIEW_Start+0x11e>
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	b2da      	uxtb	r2, r3
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	1c59      	adds	r1, r3, #1
 800899e:	6179      	str	r1, [r7, #20]
 80089a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	701a      	strb	r2, [r3, #0]
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	09db      	lsrs	r3, r3, #7
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b7f      	cmp	r3, #127	; 0x7f
 80089b2:	d8f0      	bhi.n	8008996 <SEGGER_SYSVIEW_Start+0x106>
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	617a      	str	r2, [r7, #20]
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	b2d2      	uxtb	r2, r2
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80089c4:	2218      	movs	r2, #24
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff fbe3 	bl	8008194 <_SendPacket>
      RECORD_END();
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80089d4:	4b08      	ldr	r3, [pc, #32]	; (80089f8 <SEGGER_SYSVIEW_Start+0x168>)
 80089d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80089dc:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <SEGGER_SYSVIEW_Start+0x168>)
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80089e2:	f000 f9eb 	bl	8008dbc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80089e6:	f000 f9b1 	bl	8008d4c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80089ea:	f000 fc8d 	bl	8009308 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80089ee:	bf00      	nop
 80089f0:	3730      	adds	r7, #48	; 0x30
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	2001474c 	.word	0x2001474c
 80089fc:	0800e1b8 	.word	0x0800e1b8
 8008a00:	2001477c 	.word	0x2001477c

08008a04 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8008a0e:	f04f 0120 	mov.w	r1, #32
 8008a12:	f381 8811 	msr	BASEPRI, r1
 8008a16:	607b      	str	r3, [r7, #4]
 8008a18:	480b      	ldr	r0, [pc, #44]	; (8008a48 <SEGGER_SYSVIEW_Stop+0x44>)
 8008a1a:	f7ff facf 	bl	8007fbc <_PreparePacket>
 8008a1e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008a20:	4b0a      	ldr	r3, [pc, #40]	; (8008a4c <SEGGER_SYSVIEW_Stop+0x48>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d007      	beq.n	8008a38 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008a28:	220b      	movs	r2, #11
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6838      	ldr	r0, [r7, #0]
 8008a2e:	f7ff fbb1 	bl	8008194 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008a32:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <SEGGER_SYSVIEW_Stop+0x48>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f383 8811 	msr	BASEPRI, r3
}
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	2001477c 	.word	0x2001477c
 8008a4c:	2001474c 	.word	0x2001474c

08008a50 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08c      	sub	sp, #48	; 0x30
 8008a54:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008a56:	f3ef 8311 	mrs	r3, BASEPRI
 8008a5a:	f04f 0120 	mov.w	r1, #32
 8008a5e:	f381 8811 	msr	BASEPRI, r1
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	4845      	ldr	r0, [pc, #276]	; (8008b7c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008a66:	f7ff faa9 	bl	8007fbc <_PreparePacket>
 8008a6a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a74:	4b42      	ldr	r3, [pc, #264]	; (8008b80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a7a:	e00b      	b.n	8008a94 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a82:	1c59      	adds	r1, r3, #1
 8008a84:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	09db      	lsrs	r3, r3, #7
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	2b7f      	cmp	r3, #127	; 0x7f
 8008a98:	d8f0      	bhi.n	8008a7c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aa2:	b2d2      	uxtb	r2, r2
 8008aa4:	701a      	strb	r2, [r3, #0]
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
 8008aae:	4b34      	ldr	r3, [pc, #208]	; (8008b80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	623b      	str	r3, [r7, #32]
 8008ab4:	e00b      	b.n	8008ace <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	1c59      	adds	r1, r3, #1
 8008abe:	6279      	str	r1, [r7, #36]	; 0x24
 8008ac0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ac4:	b2d2      	uxtb	r2, r2
 8008ac6:	701a      	strb	r2, [r3, #0]
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	09db      	lsrs	r3, r3, #7
 8008acc:	623b      	str	r3, [r7, #32]
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8008ad2:	d8f0      	bhi.n	8008ab6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	627a      	str	r2, [r7, #36]	; 0x24
 8008ada:	6a3a      	ldr	r2, [r7, #32]
 8008adc:	b2d2      	uxtb	r2, r2
 8008ade:	701a      	strb	r2, [r3, #0]
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	61fb      	str	r3, [r7, #28]
 8008ae8:	4b25      	ldr	r3, [pc, #148]	; (8008b80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	e00b      	b.n	8008b08 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	1c59      	adds	r1, r3, #1
 8008af8:	61f9      	str	r1, [r7, #28]
 8008afa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	09db      	lsrs	r3, r3, #7
 8008b06:	61bb      	str	r3, [r7, #24]
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b0c:	d8f0      	bhi.n	8008af0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	61fa      	str	r2, [r7, #28]
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	701a      	strb	r2, [r3, #0]
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	617b      	str	r3, [r7, #20]
 8008b22:	2300      	movs	r3, #0
 8008b24:	613b      	str	r3, [r7, #16]
 8008b26:	e00b      	b.n	8008b40 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	1c59      	adds	r1, r3, #1
 8008b30:	6179      	str	r1, [r7, #20]
 8008b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b36:	b2d2      	uxtb	r2, r2
 8008b38:	701a      	strb	r2, [r3, #0]
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	09db      	lsrs	r3, r3, #7
 8008b3e:	613b      	str	r3, [r7, #16]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	2b7f      	cmp	r3, #127	; 0x7f
 8008b44:	d8f0      	bhi.n	8008b28 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	617a      	str	r2, [r7, #20]
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	701a      	strb	r2, [r3, #0]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008b56:	2218      	movs	r2, #24
 8008b58:	6879      	ldr	r1, [r7, #4]
 8008b5a:	68b8      	ldr	r0, [r7, #8]
 8008b5c:	f7ff fb1a 	bl	8008194 <_SendPacket>
  RECORD_END();
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008b66:	4b06      	ldr	r3, [pc, #24]	; (8008b80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008b6e:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b72:	4798      	blx	r3
  }
}
 8008b74:	bf00      	nop
 8008b76:	3730      	adds	r7, #48	; 0x30
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	2001477c 	.word	0x2001477c
 8008b80:	2001474c 	.word	0x2001474c

08008b84 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b092      	sub	sp, #72	; 0x48
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8008b90:	f04f 0120 	mov.w	r1, #32
 8008b94:	f381 8811 	msr	BASEPRI, r1
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	486a      	ldr	r0, [pc, #424]	; (8008d44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008b9c:	f7ff fa0e 	bl	8007fbc <_PreparePacket>
 8008ba0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	4b66      	ldr	r3, [pc, #408]	; (8008d48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb6:	e00b      	b.n	8008bd0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bbe:	1c59      	adds	r1, r3, #1
 8008bc0:	6479      	str	r1, [r7, #68]	; 0x44
 8008bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bc6:	b2d2      	uxtb	r2, r2
 8008bc8:	701a      	strb	r2, [r3, #0]
 8008bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bcc:	09db      	lsrs	r3, r3, #7
 8008bce:	643b      	str	r3, [r7, #64]	; 0x40
 8008bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8008bd4:	d8f0      	bhi.n	8008bb8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	647a      	str	r2, [r7, #68]	; 0x44
 8008bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bf0:	e00b      	b.n	8008c0a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf8:	1c59      	adds	r1, r3, #1
 8008bfa:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008bfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c00:	b2d2      	uxtb	r2, r2
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	09db      	lsrs	r3, r3, #7
 8008c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8008c0e:	d8f0      	bhi.n	8008bf2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c18:	b2d2      	uxtb	r2, r2
 8008c1a:	701a      	strb	r2, [r3, #0]
 8008c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	4619      	mov	r1, r3
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff f997 	bl	8007f5c <_EncodeStr>
 8008c2e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008c30:	2209      	movs	r2, #9
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	6938      	ldr	r0, [r7, #16]
 8008c36:	f7ff faad 	bl	8008194 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	637b      	str	r3, [r7, #52]	; 0x34
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4b40      	ldr	r3, [pc, #256]	; (8008d48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8008c4e:	e00b      	b.n	8008c68 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c56:	1c59      	adds	r1, r3, #1
 8008c58:	6379      	str	r1, [r7, #52]	; 0x34
 8008c5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c5e:	b2d2      	uxtb	r2, r2
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	09db      	lsrs	r3, r3, #7
 8008c66:	633b      	str	r3, [r7, #48]	; 0x30
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c6c:	d8f0      	bhi.n	8008c50 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	637a      	str	r2, [r7, #52]	; 0x34
 8008c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c76:	b2d2      	uxtb	r2, r2
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c88:	e00b      	b.n	8008ca2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	1c59      	adds	r1, r3, #1
 8008c92:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008c94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	09db      	lsrs	r3, r3, #7
 8008ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8008ca6:	d8f0      	bhi.n	8008c8a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb0:	b2d2      	uxtb	r2, r2
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	623b      	str	r3, [r7, #32]
 8008cc2:	e00b      	b.n	8008cdc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	1c59      	adds	r1, r3, #1
 8008ccc:	6279      	str	r1, [r7, #36]	; 0x24
 8008cce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	701a      	strb	r2, [r3, #0]
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	09db      	lsrs	r3, r3, #7
 8008cda:	623b      	str	r3, [r7, #32]
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	2b7f      	cmp	r3, #127	; 0x7f
 8008ce0:	d8f0      	bhi.n	8008cc4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	627a      	str	r2, [r7, #36]	; 0x24
 8008ce8:	6a3a      	ldr	r2, [r7, #32]
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	61fb      	str	r3, [r7, #28]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61bb      	str	r3, [r7, #24]
 8008cfa:	e00b      	b.n	8008d14 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	1c59      	adds	r1, r3, #1
 8008d04:	61f9      	str	r1, [r7, #28]
 8008d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d0a:	b2d2      	uxtb	r2, r2
 8008d0c:	701a      	strb	r2, [r3, #0]
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	09db      	lsrs	r3, r3, #7
 8008d12:	61bb      	str	r3, [r7, #24]
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b7f      	cmp	r3, #127	; 0x7f
 8008d18:	d8f0      	bhi.n	8008cfc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	61fa      	str	r2, [r7, #28]
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	b2d2      	uxtb	r2, r2
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008d2a:	2215      	movs	r2, #21
 8008d2c:	68f9      	ldr	r1, [r7, #12]
 8008d2e:	6938      	ldr	r0, [r7, #16]
 8008d30:	f7ff fa30 	bl	8008194 <_SendPacket>
  RECORD_END();
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f383 8811 	msr	BASEPRI, r3
}
 8008d3a:	bf00      	nop
 8008d3c:	3748      	adds	r7, #72	; 0x48
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	2001477c 	.word	0x2001477c
 8008d48:	2001474c 	.word	0x2001474c

08008d4c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d008      	beq.n	8008d6a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008d62:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	4798      	blx	r3
  }
}
 8008d6a:	bf00      	nop
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	2001474c 	.word	0x2001474c

08008d74 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008d7c:	f3ef 8311 	mrs	r3, BASEPRI
 8008d80:	f04f 0120 	mov.w	r1, #32
 8008d84:	f381 8811 	msr	BASEPRI, r1
 8008d88:	617b      	str	r3, [r7, #20]
 8008d8a:	480b      	ldr	r0, [pc, #44]	; (8008db8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008d8c:	f7ff f916 	bl	8007fbc <_PreparePacket>
 8008d90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008d92:	2280      	movs	r2, #128	; 0x80
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	6938      	ldr	r0, [r7, #16]
 8008d98:	f7ff f8e0 	bl	8007f5c <_EncodeStr>
 8008d9c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008d9e:	220e      	movs	r2, #14
 8008da0:	68f9      	ldr	r1, [r7, #12]
 8008da2:	6938      	ldr	r0, [r7, #16]
 8008da4:	f7ff f9f6 	bl	8008194 <_SendPacket>
  RECORD_END();
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f383 8811 	msr	BASEPRI, r3
}
 8008dae:	bf00      	nop
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	2001477c 	.word	0x2001477c

08008dbc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008dbc:	b590      	push	{r4, r7, lr}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008dc2:	4b15      	ldr	r3, [pc, #84]	; (8008e18 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01a      	beq.n	8008e00 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008dca:	4b13      	ldr	r3, [pc, #76]	; (8008e18 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d015      	beq.n	8008e00 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008dd4:	4b10      	ldr	r3, [pc, #64]	; (8008e18 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4798      	blx	r3
 8008ddc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008de0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008de2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008de6:	f04f 0200 	mov.w	r2, #0
 8008dea:	f04f 0300 	mov.w	r3, #0
 8008dee:	000a      	movs	r2, r1
 8008df0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008df2:	4613      	mov	r3, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	4621      	mov	r1, r4
 8008df8:	200d      	movs	r0, #13
 8008dfa:	f7ff fbe7 	bl	80085cc <SEGGER_SYSVIEW_RecordU32x2>
 8008dfe:	e006      	b.n	8008e0e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008e00:	4b06      	ldr	r3, [pc, #24]	; (8008e1c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4619      	mov	r1, r3
 8008e06:	200c      	movs	r0, #12
 8008e08:	f7ff fba4 	bl	8008554 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008e0c:	bf00      	nop
 8008e0e:	bf00      	nop
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd90      	pop	{r4, r7, pc}
 8008e16:	bf00      	nop
 8008e18:	2001474c 	.word	0x2001474c
 8008e1c:	e0001004 	.word	0xe0001004

08008e20 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008e26:	f3ef 8311 	mrs	r3, BASEPRI
 8008e2a:	f04f 0120 	mov.w	r1, #32
 8008e2e:	f381 8811 	msr	BASEPRI, r1
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	4819      	ldr	r0, [pc, #100]	; (8008e9c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008e36:	f7ff f8c1 	bl	8007fbc <_PreparePacket>
 8008e3a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008e40:	4b17      	ldr	r3, [pc, #92]	; (8008ea0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e48:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	617b      	str	r3, [r7, #20]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	613b      	str	r3, [r7, #16]
 8008e52:	e00b      	b.n	8008e6c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	1c59      	adds	r1, r3, #1
 8008e5c:	6179      	str	r1, [r7, #20]
 8008e5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	09db      	lsrs	r3, r3, #7
 8008e6a:	613b      	str	r3, [r7, #16]
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e70:	d8f0      	bhi.n	8008e54 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	617a      	str	r2, [r7, #20]
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	b2d2      	uxtb	r2, r2
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008e82:	2202      	movs	r2, #2
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	68b8      	ldr	r0, [r7, #8]
 8008e88:	f7ff f984 	bl	8008194 <_SendPacket>
  RECORD_END();
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f383 8811 	msr	BASEPRI, r3
}
 8008e92:	bf00      	nop
 8008e94:	3718      	adds	r7, #24
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	2001477c 	.word	0x2001477c
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8008eae:	f04f 0120 	mov.w	r1, #32
 8008eb2:	f381 8811 	msr	BASEPRI, r1
 8008eb6:	607b      	str	r3, [r7, #4]
 8008eb8:	4807      	ldr	r0, [pc, #28]	; (8008ed8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008eba:	f7ff f87f 	bl	8007fbc <_PreparePacket>
 8008ebe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008ec0:	2203      	movs	r2, #3
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6838      	ldr	r0, [r7, #0]
 8008ec6:	f7ff f965 	bl	8008194 <_SendPacket>
  RECORD_END();
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f383 8811 	msr	BASEPRI, r3
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	2001477c 	.word	0x2001477c

08008edc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ee6:	f04f 0120 	mov.w	r1, #32
 8008eea:	f381 8811 	msr	BASEPRI, r1
 8008eee:	607b      	str	r3, [r7, #4]
 8008ef0:	4807      	ldr	r0, [pc, #28]	; (8008f10 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008ef2:	f7ff f863 	bl	8007fbc <_PreparePacket>
 8008ef6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008ef8:	2212      	movs	r2, #18
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6838      	ldr	r0, [r7, #0]
 8008efe:	f7ff f949 	bl	8008194 <_SendPacket>
  RECORD_END();
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f383 8811 	msr	BASEPRI, r3
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	2001477c 	.word	0x2001477c

08008f14 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8008f1e:	f04f 0120 	mov.w	r1, #32
 8008f22:	f381 8811 	msr	BASEPRI, r1
 8008f26:	607b      	str	r3, [r7, #4]
 8008f28:	4807      	ldr	r0, [pc, #28]	; (8008f48 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008f2a:	f7ff f847 	bl	8007fbc <_PreparePacket>
 8008f2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008f30:	2211      	movs	r2, #17
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6838      	ldr	r0, [r7, #0]
 8008f36:	f7ff f92d 	bl	8008194 <_SendPacket>
  RECORD_END();
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f383 8811 	msr	BASEPRI, r3
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	2001477c 	.word	0x2001477c

08008f4c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008f54:	f3ef 8311 	mrs	r3, BASEPRI
 8008f58:	f04f 0120 	mov.w	r1, #32
 8008f5c:	f381 8811 	msr	BASEPRI, r1
 8008f60:	617b      	str	r3, [r7, #20]
 8008f62:	4819      	ldr	r0, [pc, #100]	; (8008fc8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008f64:	f7ff f82a 	bl	8007fbc <_PreparePacket>
 8008f68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008f6e:	4b17      	ldr	r3, [pc, #92]	; (8008fcc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	61fb      	str	r3, [r7, #28]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	61bb      	str	r3, [r7, #24]
 8008f80:	e00b      	b.n	8008f9a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	1c59      	adds	r1, r3, #1
 8008f8a:	61f9      	str	r1, [r7, #28]
 8008f8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	09db      	lsrs	r3, r3, #7
 8008f98:	61bb      	str	r3, [r7, #24]
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8008f9e:	d8f0      	bhi.n	8008f82 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	61fa      	str	r2, [r7, #28]
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	b2d2      	uxtb	r2, r2
 8008faa:	701a      	strb	r2, [r3, #0]
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008fb0:	2208      	movs	r2, #8
 8008fb2:	68f9      	ldr	r1, [r7, #12]
 8008fb4:	6938      	ldr	r0, [r7, #16]
 8008fb6:	f7ff f8ed 	bl	8008194 <_SendPacket>
  RECORD_END();
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f383 8811 	msr	BASEPRI, r3
}
 8008fc0:	bf00      	nop
 8008fc2:	3720      	adds	r7, #32
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	2001477c 	.word	0x2001477c
 8008fcc:	2001474c 	.word	0x2001474c

08008fd0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8008fdc:	f04f 0120 	mov.w	r1, #32
 8008fe0:	f381 8811 	msr	BASEPRI, r1
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	4819      	ldr	r0, [pc, #100]	; (800904c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008fe8:	f7fe ffe8 	bl	8007fbc <_PreparePacket>
 8008fec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008ff2:	4b17      	ldr	r3, [pc, #92]	; (8009050 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	61fb      	str	r3, [r7, #28]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	61bb      	str	r3, [r7, #24]
 8009004:	e00b      	b.n	800901e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	b2da      	uxtb	r2, r3
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	1c59      	adds	r1, r3, #1
 800900e:	61f9      	str	r1, [r7, #28]
 8009010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	701a      	strb	r2, [r3, #0]
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	09db      	lsrs	r3, r3, #7
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b7f      	cmp	r3, #127	; 0x7f
 8009022:	d8f0      	bhi.n	8009006 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	61fa      	str	r2, [r7, #28]
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	b2d2      	uxtb	r2, r2
 800902e:	701a      	strb	r2, [r3, #0]
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009034:	2204      	movs	r2, #4
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	6938      	ldr	r0, [r7, #16]
 800903a:	f7ff f8ab 	bl	8008194 <_SendPacket>
  RECORD_END();
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f383 8811 	msr	BASEPRI, r3
}
 8009044:	bf00      	nop
 8009046:	3720      	adds	r7, #32
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	2001477c 	.word	0x2001477c
 8009050:	2001474c 	.word	0x2001474c

08009054 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800905c:	f3ef 8311 	mrs	r3, BASEPRI
 8009060:	f04f 0120 	mov.w	r1, #32
 8009064:	f381 8811 	msr	BASEPRI, r1
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	4819      	ldr	r0, [pc, #100]	; (80090d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800906c:	f7fe ffa6 	bl	8007fbc <_PreparePacket>
 8009070:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009076:	4b17      	ldr	r3, [pc, #92]	; (80090d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	61fb      	str	r3, [r7, #28]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	61bb      	str	r3, [r7, #24]
 8009088:	e00b      	b.n	80090a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	b2da      	uxtb	r2, r3
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	1c59      	adds	r1, r3, #1
 8009092:	61f9      	str	r1, [r7, #28]
 8009094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009098:	b2d2      	uxtb	r2, r2
 800909a:	701a      	strb	r2, [r3, #0]
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	09db      	lsrs	r3, r3, #7
 80090a0:	61bb      	str	r3, [r7, #24]
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	2b7f      	cmp	r3, #127	; 0x7f
 80090a6:	d8f0      	bhi.n	800908a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	61fa      	str	r2, [r7, #28]
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	b2d2      	uxtb	r2, r2
 80090b2:	701a      	strb	r2, [r3, #0]
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80090b8:	2206      	movs	r2, #6
 80090ba:	68f9      	ldr	r1, [r7, #12]
 80090bc:	6938      	ldr	r0, [r7, #16]
 80090be:	f7ff f869 	bl	8008194 <_SendPacket>
  RECORD_END();
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f383 8811 	msr	BASEPRI, r3
}
 80090c8:	bf00      	nop
 80090ca:	3720      	adds	r7, #32
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	2001477c 	.word	0x2001477c
 80090d4:	2001474c 	.word	0x2001474c

080090d8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80090e2:	f3ef 8311 	mrs	r3, BASEPRI
 80090e6:	f04f 0120 	mov.w	r1, #32
 80090ea:	f381 8811 	msr	BASEPRI, r1
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	4827      	ldr	r0, [pc, #156]	; (8009190 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80090f2:	f7fe ff63 	bl	8007fbc <_PreparePacket>
 80090f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80090fc:	4b25      	ldr	r3, [pc, #148]	; (8009194 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	627b      	str	r3, [r7, #36]	; 0x24
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	623b      	str	r3, [r7, #32]
 800910e:	e00b      	b.n	8009128 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	b2da      	uxtb	r2, r3
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	1c59      	adds	r1, r3, #1
 8009118:	6279      	str	r1, [r7, #36]	; 0x24
 800911a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800911e:	b2d2      	uxtb	r2, r2
 8009120:	701a      	strb	r2, [r3, #0]
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	09db      	lsrs	r3, r3, #7
 8009126:	623b      	str	r3, [r7, #32]
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	2b7f      	cmp	r3, #127	; 0x7f
 800912c:	d8f0      	bhi.n	8009110 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	627a      	str	r2, [r7, #36]	; 0x24
 8009134:	6a3a      	ldr	r2, [r7, #32]
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	61fb      	str	r3, [r7, #28]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	61bb      	str	r3, [r7, #24]
 8009146:	e00b      	b.n	8009160 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	b2da      	uxtb	r2, r3
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	1c59      	adds	r1, r3, #1
 8009150:	61f9      	str	r1, [r7, #28]
 8009152:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009156:	b2d2      	uxtb	r2, r2
 8009158:	701a      	strb	r2, [r3, #0]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	09db      	lsrs	r3, r3, #7
 800915e:	61bb      	str	r3, [r7, #24]
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	2b7f      	cmp	r3, #127	; 0x7f
 8009164:	d8f0      	bhi.n	8009148 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	61fa      	str	r2, [r7, #28]
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	b2d2      	uxtb	r2, r2
 8009170:	701a      	strb	r2, [r3, #0]
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8009176:	2207      	movs	r2, #7
 8009178:	68f9      	ldr	r1, [r7, #12]
 800917a:	6938      	ldr	r0, [r7, #16]
 800917c:	f7ff f80a 	bl	8008194 <_SendPacket>
  RECORD_END();
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f383 8811 	msr	BASEPRI, r3
}
 8009186:	bf00      	nop
 8009188:	3728      	adds	r7, #40	; 0x28
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	2001477c 	.word	0x2001477c
 8009194:	2001474c 	.word	0x2001474c

08009198 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80091a0:	4b04      	ldr	r3, [pc, #16]	; (80091b4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	1ad3      	subs	r3, r2, r3
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	2001474c 	.word	0x2001474c

080091b8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08c      	sub	sp, #48	; 0x30
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80091c2:	4b40      	ldr	r3, [pc, #256]	; (80092c4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d077      	beq.n	80092ba <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80091ca:	4b3e      	ldr	r3, [pc, #248]	; (80092c4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80091d0:	2300      	movs	r3, #0
 80091d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80091d4:	e008      	b.n	80091e8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d007      	beq.n	80091f2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	3301      	adds	r3, #1
 80091e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d3f2      	bcc.n	80091d6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80091f0:	e000      	b.n	80091f4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80091f2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80091f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d055      	beq.n	80092a6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80091fa:	f3ef 8311 	mrs	r3, BASEPRI
 80091fe:	f04f 0120 	mov.w	r1, #32
 8009202:	f381 8811 	msr	BASEPRI, r1
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	482f      	ldr	r0, [pc, #188]	; (80092c8 <SEGGER_SYSVIEW_SendModule+0x110>)
 800920a:	f7fe fed7 	bl	8007fbc <_PreparePacket>
 800920e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	627b      	str	r3, [r7, #36]	; 0x24
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	623b      	str	r3, [r7, #32]
 800921c:	e00b      	b.n	8009236 <SEGGER_SYSVIEW_SendModule+0x7e>
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	b2da      	uxtb	r2, r3
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	1c59      	adds	r1, r3, #1
 8009226:	6279      	str	r1, [r7, #36]	; 0x24
 8009228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800922c:	b2d2      	uxtb	r2, r2
 800922e:	701a      	strb	r2, [r3, #0]
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	09db      	lsrs	r3, r3, #7
 8009234:	623b      	str	r3, [r7, #32]
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	2b7f      	cmp	r3, #127	; 0x7f
 800923a:	d8f0      	bhi.n	800921e <SEGGER_SYSVIEW_SendModule+0x66>
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	627a      	str	r2, [r7, #36]	; 0x24
 8009242:	6a3a      	ldr	r2, [r7, #32]
 8009244:	b2d2      	uxtb	r2, r2
 8009246:	701a      	strb	r2, [r3, #0]
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	61fb      	str	r3, [r7, #28]
 8009250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	e00b      	b.n	8009270 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	b2da      	uxtb	r2, r3
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	1c59      	adds	r1, r3, #1
 8009260:	61f9      	str	r1, [r7, #28]
 8009262:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	09db      	lsrs	r3, r3, #7
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	2b7f      	cmp	r3, #127	; 0x7f
 8009274:	d8f0      	bhi.n	8009258 <SEGGER_SYSVIEW_SendModule+0xa0>
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	61fa      	str	r2, [r7, #28]
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	b2d2      	uxtb	r2, r2
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2280      	movs	r2, #128	; 0x80
 800928c:	4619      	mov	r1, r3
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7fe fe64 	bl	8007f5c <_EncodeStr>
 8009294:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009296:	2216      	movs	r2, #22
 8009298:	68f9      	ldr	r1, [r7, #12]
 800929a:	6938      	ldr	r0, [r7, #16]
 800929c:	f7fe ff7a 	bl	8008194 <_SendPacket>
      RECORD_END();
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d006      	beq.n	80092ba <SEGGER_SYSVIEW_SendModule+0x102>
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	4798      	blx	r3
    }
  }
}
 80092ba:	bf00      	nop
 80092bc:	3730      	adds	r7, #48	; 0x30
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20014774 	.word	0x20014774
 80092c8:	2001477c 	.word	0x2001477c

080092cc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80092d2:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00f      	beq.n	80092fa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80092da:	4b0a      	ldr	r3, [pc, #40]	; (8009304 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1f2      	bne.n	80092e0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20014774 	.word	0x20014774

08009308 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800930e:	f3ef 8311 	mrs	r3, BASEPRI
 8009312:	f04f 0120 	mov.w	r1, #32
 8009316:	f381 8811 	msr	BASEPRI, r1
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	4817      	ldr	r0, [pc, #92]	; (800937c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800931e:	f7fe fe4d 	bl	8007fbc <_PreparePacket>
 8009322:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	617b      	str	r3, [r7, #20]
 800932c:	4b14      	ldr	r3, [pc, #80]	; (8009380 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	e00b      	b.n	800934c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	b2da      	uxtb	r2, r3
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	1c59      	adds	r1, r3, #1
 800933c:	6179      	str	r1, [r7, #20]
 800933e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009342:	b2d2      	uxtb	r2, r2
 8009344:	701a      	strb	r2, [r3, #0]
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	09db      	lsrs	r3, r3, #7
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	2b7f      	cmp	r3, #127	; 0x7f
 8009350:	d8f0      	bhi.n	8009334 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	617a      	str	r2, [r7, #20]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009362:	221b      	movs	r2, #27
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	68b8      	ldr	r0, [r7, #8]
 8009368:	f7fe ff14 	bl	8008194 <_SendPacket>
  RECORD_END();
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f383 8811 	msr	BASEPRI, r3
}
 8009372:	bf00      	nop
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	2001477c 	.word	0x2001477c
 8009380:	20014778 	.word	0x20014778

08009384 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b08a      	sub	sp, #40	; 0x28
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800938c:	f3ef 8311 	mrs	r3, BASEPRI
 8009390:	f04f 0120 	mov.w	r1, #32
 8009394:	f381 8811 	msr	BASEPRI, r1
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	4827      	ldr	r0, [pc, #156]	; (8009438 <SEGGER_SYSVIEW_Warn+0xb4>)
 800939c:	f7fe fe0e 	bl	8007fbc <_PreparePacket>
 80093a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80093a2:	2280      	movs	r2, #128	; 0x80
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	6938      	ldr	r0, [r7, #16]
 80093a8:	f7fe fdd8 	bl	8007f5c <_EncodeStr>
 80093ac:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
 80093b2:	2301      	movs	r3, #1
 80093b4:	623b      	str	r3, [r7, #32]
 80093b6:	e00b      	b.n	80093d0 <SEGGER_SYSVIEW_Warn+0x4c>
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	1c59      	adds	r1, r3, #1
 80093c0:	6279      	str	r1, [r7, #36]	; 0x24
 80093c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093c6:	b2d2      	uxtb	r2, r2
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	09db      	lsrs	r3, r3, #7
 80093ce:	623b      	str	r3, [r7, #32]
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	2b7f      	cmp	r3, #127	; 0x7f
 80093d4:	d8f0      	bhi.n	80093b8 <SEGGER_SYSVIEW_Warn+0x34>
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	627a      	str	r2, [r7, #36]	; 0x24
 80093dc:	6a3a      	ldr	r2, [r7, #32]
 80093de:	b2d2      	uxtb	r2, r2
 80093e0:	701a      	strb	r2, [r3, #0]
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	61fb      	str	r3, [r7, #28]
 80093ea:	2300      	movs	r3, #0
 80093ec:	61bb      	str	r3, [r7, #24]
 80093ee:	e00b      	b.n	8009408 <SEGGER_SYSVIEW_Warn+0x84>
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	1c59      	adds	r1, r3, #1
 80093f8:	61f9      	str	r1, [r7, #28]
 80093fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	09db      	lsrs	r3, r3, #7
 8009406:	61bb      	str	r3, [r7, #24]
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	2b7f      	cmp	r3, #127	; 0x7f
 800940c:	d8f0      	bhi.n	80093f0 <SEGGER_SYSVIEW_Warn+0x6c>
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	61fa      	str	r2, [r7, #28]
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	b2d2      	uxtb	r2, r2
 8009418:	701a      	strb	r2, [r3, #0]
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800941e:	221a      	movs	r2, #26
 8009420:	68f9      	ldr	r1, [r7, #12]
 8009422:	6938      	ldr	r0, [r7, #16]
 8009424:	f7fe feb6 	bl	8008194 <_SendPacket>
  RECORD_END();
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f383 8811 	msr	BASEPRI, r3
}
 800942e:	bf00      	nop
 8009430:	3728      	adds	r7, #40	; 0x28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	2001477c 	.word	0x2001477c

0800943c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	2000      	movs	r0, #0
 8009450:	f7fe fc8e 	bl	8007d70 <SEGGER_RTT_Write>
  return len;
 8009454:	683b      	ldr	r3, [r7, #0]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <__cvt>:
 800945e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009462:	ec55 4b10 	vmov	r4, r5, d0
 8009466:	2d00      	cmp	r5, #0
 8009468:	460e      	mov	r6, r1
 800946a:	4619      	mov	r1, r3
 800946c:	462b      	mov	r3, r5
 800946e:	bfbb      	ittet	lt
 8009470:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009474:	461d      	movlt	r5, r3
 8009476:	2300      	movge	r3, #0
 8009478:	232d      	movlt	r3, #45	; 0x2d
 800947a:	700b      	strb	r3, [r1, #0]
 800947c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800947e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009482:	4691      	mov	r9, r2
 8009484:	f023 0820 	bic.w	r8, r3, #32
 8009488:	bfbc      	itt	lt
 800948a:	4622      	movlt	r2, r4
 800948c:	4614      	movlt	r4, r2
 800948e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009492:	d005      	beq.n	80094a0 <__cvt+0x42>
 8009494:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009498:	d100      	bne.n	800949c <__cvt+0x3e>
 800949a:	3601      	adds	r6, #1
 800949c:	2102      	movs	r1, #2
 800949e:	e000      	b.n	80094a2 <__cvt+0x44>
 80094a0:	2103      	movs	r1, #3
 80094a2:	ab03      	add	r3, sp, #12
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	ab02      	add	r3, sp, #8
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	ec45 4b10 	vmov	d0, r4, r5
 80094ae:	4653      	mov	r3, sl
 80094b0:	4632      	mov	r2, r6
 80094b2:	f001 f88d 	bl	800a5d0 <_dtoa_r>
 80094b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80094ba:	4607      	mov	r7, r0
 80094bc:	d102      	bne.n	80094c4 <__cvt+0x66>
 80094be:	f019 0f01 	tst.w	r9, #1
 80094c2:	d022      	beq.n	800950a <__cvt+0xac>
 80094c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094c8:	eb07 0906 	add.w	r9, r7, r6
 80094cc:	d110      	bne.n	80094f0 <__cvt+0x92>
 80094ce:	783b      	ldrb	r3, [r7, #0]
 80094d0:	2b30      	cmp	r3, #48	; 0x30
 80094d2:	d10a      	bne.n	80094ea <__cvt+0x8c>
 80094d4:	2200      	movs	r2, #0
 80094d6:	2300      	movs	r3, #0
 80094d8:	4620      	mov	r0, r4
 80094da:	4629      	mov	r1, r5
 80094dc:	f7f7 fb44 	bl	8000b68 <__aeabi_dcmpeq>
 80094e0:	b918      	cbnz	r0, 80094ea <__cvt+0x8c>
 80094e2:	f1c6 0601 	rsb	r6, r6, #1
 80094e6:	f8ca 6000 	str.w	r6, [sl]
 80094ea:	f8da 3000 	ldr.w	r3, [sl]
 80094ee:	4499      	add	r9, r3
 80094f0:	2200      	movs	r2, #0
 80094f2:	2300      	movs	r3, #0
 80094f4:	4620      	mov	r0, r4
 80094f6:	4629      	mov	r1, r5
 80094f8:	f7f7 fb36 	bl	8000b68 <__aeabi_dcmpeq>
 80094fc:	b108      	cbz	r0, 8009502 <__cvt+0xa4>
 80094fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8009502:	2230      	movs	r2, #48	; 0x30
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	454b      	cmp	r3, r9
 8009508:	d307      	bcc.n	800951a <__cvt+0xbc>
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800950e:	1bdb      	subs	r3, r3, r7
 8009510:	4638      	mov	r0, r7
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	b004      	add	sp, #16
 8009516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800951a:	1c59      	adds	r1, r3, #1
 800951c:	9103      	str	r1, [sp, #12]
 800951e:	701a      	strb	r2, [r3, #0]
 8009520:	e7f0      	b.n	8009504 <__cvt+0xa6>

08009522 <__exponent>:
 8009522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009524:	4603      	mov	r3, r0
 8009526:	2900      	cmp	r1, #0
 8009528:	bfb8      	it	lt
 800952a:	4249      	neglt	r1, r1
 800952c:	f803 2b02 	strb.w	r2, [r3], #2
 8009530:	bfb4      	ite	lt
 8009532:	222d      	movlt	r2, #45	; 0x2d
 8009534:	222b      	movge	r2, #43	; 0x2b
 8009536:	2909      	cmp	r1, #9
 8009538:	7042      	strb	r2, [r0, #1]
 800953a:	dd2a      	ble.n	8009592 <__exponent+0x70>
 800953c:	f10d 0207 	add.w	r2, sp, #7
 8009540:	4617      	mov	r7, r2
 8009542:	260a      	movs	r6, #10
 8009544:	4694      	mov	ip, r2
 8009546:	fb91 f5f6 	sdiv	r5, r1, r6
 800954a:	fb06 1415 	mls	r4, r6, r5, r1
 800954e:	3430      	adds	r4, #48	; 0x30
 8009550:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009554:	460c      	mov	r4, r1
 8009556:	2c63      	cmp	r4, #99	; 0x63
 8009558:	f102 32ff 	add.w	r2, r2, #4294967295
 800955c:	4629      	mov	r1, r5
 800955e:	dcf1      	bgt.n	8009544 <__exponent+0x22>
 8009560:	3130      	adds	r1, #48	; 0x30
 8009562:	f1ac 0402 	sub.w	r4, ip, #2
 8009566:	f802 1c01 	strb.w	r1, [r2, #-1]
 800956a:	1c41      	adds	r1, r0, #1
 800956c:	4622      	mov	r2, r4
 800956e:	42ba      	cmp	r2, r7
 8009570:	d30a      	bcc.n	8009588 <__exponent+0x66>
 8009572:	f10d 0209 	add.w	r2, sp, #9
 8009576:	eba2 020c 	sub.w	r2, r2, ip
 800957a:	42bc      	cmp	r4, r7
 800957c:	bf88      	it	hi
 800957e:	2200      	movhi	r2, #0
 8009580:	4413      	add	r3, r2
 8009582:	1a18      	subs	r0, r3, r0
 8009584:	b003      	add	sp, #12
 8009586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009588:	f812 5b01 	ldrb.w	r5, [r2], #1
 800958c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009590:	e7ed      	b.n	800956e <__exponent+0x4c>
 8009592:	2330      	movs	r3, #48	; 0x30
 8009594:	3130      	adds	r1, #48	; 0x30
 8009596:	7083      	strb	r3, [r0, #2]
 8009598:	70c1      	strb	r1, [r0, #3]
 800959a:	1d03      	adds	r3, r0, #4
 800959c:	e7f1      	b.n	8009582 <__exponent+0x60>
	...

080095a0 <_printf_float>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	ed2d 8b02 	vpush	{d8}
 80095a8:	b08d      	sub	sp, #52	; 0x34
 80095aa:	460c      	mov	r4, r1
 80095ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80095b0:	4616      	mov	r6, r2
 80095b2:	461f      	mov	r7, r3
 80095b4:	4605      	mov	r5, r0
 80095b6:	f000 ff07 	bl	800a3c8 <_localeconv_r>
 80095ba:	f8d0 a000 	ldr.w	sl, [r0]
 80095be:	4650      	mov	r0, sl
 80095c0:	f7f6 fea6 	bl	8000310 <strlen>
 80095c4:	2300      	movs	r3, #0
 80095c6:	930a      	str	r3, [sp, #40]	; 0x28
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	9305      	str	r3, [sp, #20]
 80095cc:	f8d8 3000 	ldr.w	r3, [r8]
 80095d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80095d4:	3307      	adds	r3, #7
 80095d6:	f023 0307 	bic.w	r3, r3, #7
 80095da:	f103 0208 	add.w	r2, r3, #8
 80095de:	f8c8 2000 	str.w	r2, [r8]
 80095e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095ea:	9307      	str	r3, [sp, #28]
 80095ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80095f0:	ee08 0a10 	vmov	s16, r0
 80095f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80095f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095fc:	4b9e      	ldr	r3, [pc, #632]	; (8009878 <_printf_float+0x2d8>)
 80095fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009602:	f7f7 fae3 	bl	8000bcc <__aeabi_dcmpun>
 8009606:	bb88      	cbnz	r0, 800966c <_printf_float+0xcc>
 8009608:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800960c:	4b9a      	ldr	r3, [pc, #616]	; (8009878 <_printf_float+0x2d8>)
 800960e:	f04f 32ff 	mov.w	r2, #4294967295
 8009612:	f7f7 fabd 	bl	8000b90 <__aeabi_dcmple>
 8009616:	bb48      	cbnz	r0, 800966c <_printf_float+0xcc>
 8009618:	2200      	movs	r2, #0
 800961a:	2300      	movs	r3, #0
 800961c:	4640      	mov	r0, r8
 800961e:	4649      	mov	r1, r9
 8009620:	f7f7 faac 	bl	8000b7c <__aeabi_dcmplt>
 8009624:	b110      	cbz	r0, 800962c <_printf_float+0x8c>
 8009626:	232d      	movs	r3, #45	; 0x2d
 8009628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800962c:	4a93      	ldr	r2, [pc, #588]	; (800987c <_printf_float+0x2dc>)
 800962e:	4b94      	ldr	r3, [pc, #592]	; (8009880 <_printf_float+0x2e0>)
 8009630:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009634:	bf94      	ite	ls
 8009636:	4690      	movls	r8, r2
 8009638:	4698      	movhi	r8, r3
 800963a:	2303      	movs	r3, #3
 800963c:	6123      	str	r3, [r4, #16]
 800963e:	9b05      	ldr	r3, [sp, #20]
 8009640:	f023 0304 	bic.w	r3, r3, #4
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	f04f 0900 	mov.w	r9, #0
 800964a:	9700      	str	r7, [sp, #0]
 800964c:	4633      	mov	r3, r6
 800964e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009650:	4621      	mov	r1, r4
 8009652:	4628      	mov	r0, r5
 8009654:	f000 f9da 	bl	8009a0c <_printf_common>
 8009658:	3001      	adds	r0, #1
 800965a:	f040 8090 	bne.w	800977e <_printf_float+0x1de>
 800965e:	f04f 30ff 	mov.w	r0, #4294967295
 8009662:	b00d      	add	sp, #52	; 0x34
 8009664:	ecbd 8b02 	vpop	{d8}
 8009668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966c:	4642      	mov	r2, r8
 800966e:	464b      	mov	r3, r9
 8009670:	4640      	mov	r0, r8
 8009672:	4649      	mov	r1, r9
 8009674:	f7f7 faaa 	bl	8000bcc <__aeabi_dcmpun>
 8009678:	b140      	cbz	r0, 800968c <_printf_float+0xec>
 800967a:	464b      	mov	r3, r9
 800967c:	2b00      	cmp	r3, #0
 800967e:	bfbc      	itt	lt
 8009680:	232d      	movlt	r3, #45	; 0x2d
 8009682:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009686:	4a7f      	ldr	r2, [pc, #508]	; (8009884 <_printf_float+0x2e4>)
 8009688:	4b7f      	ldr	r3, [pc, #508]	; (8009888 <_printf_float+0x2e8>)
 800968a:	e7d1      	b.n	8009630 <_printf_float+0x90>
 800968c:	6863      	ldr	r3, [r4, #4]
 800968e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009692:	9206      	str	r2, [sp, #24]
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	d13f      	bne.n	8009718 <_printf_float+0x178>
 8009698:	2306      	movs	r3, #6
 800969a:	6063      	str	r3, [r4, #4]
 800969c:	9b05      	ldr	r3, [sp, #20]
 800969e:	6861      	ldr	r1, [r4, #4]
 80096a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80096a4:	2300      	movs	r3, #0
 80096a6:	9303      	str	r3, [sp, #12]
 80096a8:	ab0a      	add	r3, sp, #40	; 0x28
 80096aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80096ae:	ab09      	add	r3, sp, #36	; 0x24
 80096b0:	ec49 8b10 	vmov	d0, r8, r9
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	6022      	str	r2, [r4, #0]
 80096b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80096bc:	4628      	mov	r0, r5
 80096be:	f7ff fece 	bl	800945e <__cvt>
 80096c2:	9b06      	ldr	r3, [sp, #24]
 80096c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096c6:	2b47      	cmp	r3, #71	; 0x47
 80096c8:	4680      	mov	r8, r0
 80096ca:	d108      	bne.n	80096de <_printf_float+0x13e>
 80096cc:	1cc8      	adds	r0, r1, #3
 80096ce:	db02      	blt.n	80096d6 <_printf_float+0x136>
 80096d0:	6863      	ldr	r3, [r4, #4]
 80096d2:	4299      	cmp	r1, r3
 80096d4:	dd41      	ble.n	800975a <_printf_float+0x1ba>
 80096d6:	f1ab 0302 	sub.w	r3, fp, #2
 80096da:	fa5f fb83 	uxtb.w	fp, r3
 80096de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096e2:	d820      	bhi.n	8009726 <_printf_float+0x186>
 80096e4:	3901      	subs	r1, #1
 80096e6:	465a      	mov	r2, fp
 80096e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096ec:	9109      	str	r1, [sp, #36]	; 0x24
 80096ee:	f7ff ff18 	bl	8009522 <__exponent>
 80096f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096f4:	1813      	adds	r3, r2, r0
 80096f6:	2a01      	cmp	r2, #1
 80096f8:	4681      	mov	r9, r0
 80096fa:	6123      	str	r3, [r4, #16]
 80096fc:	dc02      	bgt.n	8009704 <_printf_float+0x164>
 80096fe:	6822      	ldr	r2, [r4, #0]
 8009700:	07d2      	lsls	r2, r2, #31
 8009702:	d501      	bpl.n	8009708 <_printf_float+0x168>
 8009704:	3301      	adds	r3, #1
 8009706:	6123      	str	r3, [r4, #16]
 8009708:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800970c:	2b00      	cmp	r3, #0
 800970e:	d09c      	beq.n	800964a <_printf_float+0xaa>
 8009710:	232d      	movs	r3, #45	; 0x2d
 8009712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009716:	e798      	b.n	800964a <_printf_float+0xaa>
 8009718:	9a06      	ldr	r2, [sp, #24]
 800971a:	2a47      	cmp	r2, #71	; 0x47
 800971c:	d1be      	bne.n	800969c <_printf_float+0xfc>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1bc      	bne.n	800969c <_printf_float+0xfc>
 8009722:	2301      	movs	r3, #1
 8009724:	e7b9      	b.n	800969a <_printf_float+0xfa>
 8009726:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800972a:	d118      	bne.n	800975e <_printf_float+0x1be>
 800972c:	2900      	cmp	r1, #0
 800972e:	6863      	ldr	r3, [r4, #4]
 8009730:	dd0b      	ble.n	800974a <_printf_float+0x1aa>
 8009732:	6121      	str	r1, [r4, #16]
 8009734:	b913      	cbnz	r3, 800973c <_printf_float+0x19c>
 8009736:	6822      	ldr	r2, [r4, #0]
 8009738:	07d0      	lsls	r0, r2, #31
 800973a:	d502      	bpl.n	8009742 <_printf_float+0x1a2>
 800973c:	3301      	adds	r3, #1
 800973e:	440b      	add	r3, r1
 8009740:	6123      	str	r3, [r4, #16]
 8009742:	65a1      	str	r1, [r4, #88]	; 0x58
 8009744:	f04f 0900 	mov.w	r9, #0
 8009748:	e7de      	b.n	8009708 <_printf_float+0x168>
 800974a:	b913      	cbnz	r3, 8009752 <_printf_float+0x1b2>
 800974c:	6822      	ldr	r2, [r4, #0]
 800974e:	07d2      	lsls	r2, r2, #31
 8009750:	d501      	bpl.n	8009756 <_printf_float+0x1b6>
 8009752:	3302      	adds	r3, #2
 8009754:	e7f4      	b.n	8009740 <_printf_float+0x1a0>
 8009756:	2301      	movs	r3, #1
 8009758:	e7f2      	b.n	8009740 <_printf_float+0x1a0>
 800975a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800975e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009760:	4299      	cmp	r1, r3
 8009762:	db05      	blt.n	8009770 <_printf_float+0x1d0>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	6121      	str	r1, [r4, #16]
 8009768:	07d8      	lsls	r0, r3, #31
 800976a:	d5ea      	bpl.n	8009742 <_printf_float+0x1a2>
 800976c:	1c4b      	adds	r3, r1, #1
 800976e:	e7e7      	b.n	8009740 <_printf_float+0x1a0>
 8009770:	2900      	cmp	r1, #0
 8009772:	bfd4      	ite	le
 8009774:	f1c1 0202 	rsble	r2, r1, #2
 8009778:	2201      	movgt	r2, #1
 800977a:	4413      	add	r3, r2
 800977c:	e7e0      	b.n	8009740 <_printf_float+0x1a0>
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	055a      	lsls	r2, r3, #21
 8009782:	d407      	bmi.n	8009794 <_printf_float+0x1f4>
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	4642      	mov	r2, r8
 8009788:	4631      	mov	r1, r6
 800978a:	4628      	mov	r0, r5
 800978c:	47b8      	blx	r7
 800978e:	3001      	adds	r0, #1
 8009790:	d12c      	bne.n	80097ec <_printf_float+0x24c>
 8009792:	e764      	b.n	800965e <_printf_float+0xbe>
 8009794:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009798:	f240 80e0 	bls.w	800995c <_printf_float+0x3bc>
 800979c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097a0:	2200      	movs	r2, #0
 80097a2:	2300      	movs	r3, #0
 80097a4:	f7f7 f9e0 	bl	8000b68 <__aeabi_dcmpeq>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d034      	beq.n	8009816 <_printf_float+0x276>
 80097ac:	4a37      	ldr	r2, [pc, #220]	; (800988c <_printf_float+0x2ec>)
 80097ae:	2301      	movs	r3, #1
 80097b0:	4631      	mov	r1, r6
 80097b2:	4628      	mov	r0, r5
 80097b4:	47b8      	blx	r7
 80097b6:	3001      	adds	r0, #1
 80097b8:	f43f af51 	beq.w	800965e <_printf_float+0xbe>
 80097bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097c0:	429a      	cmp	r2, r3
 80097c2:	db02      	blt.n	80097ca <_printf_float+0x22a>
 80097c4:	6823      	ldr	r3, [r4, #0]
 80097c6:	07d8      	lsls	r0, r3, #31
 80097c8:	d510      	bpl.n	80097ec <_printf_float+0x24c>
 80097ca:	ee18 3a10 	vmov	r3, s16
 80097ce:	4652      	mov	r2, sl
 80097d0:	4631      	mov	r1, r6
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b8      	blx	r7
 80097d6:	3001      	adds	r0, #1
 80097d8:	f43f af41 	beq.w	800965e <_printf_float+0xbe>
 80097dc:	f04f 0800 	mov.w	r8, #0
 80097e0:	f104 091a 	add.w	r9, r4, #26
 80097e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e6:	3b01      	subs	r3, #1
 80097e8:	4543      	cmp	r3, r8
 80097ea:	dc09      	bgt.n	8009800 <_printf_float+0x260>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	079b      	lsls	r3, r3, #30
 80097f0:	f100 8107 	bmi.w	8009a02 <_printf_float+0x462>
 80097f4:	68e0      	ldr	r0, [r4, #12]
 80097f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097f8:	4298      	cmp	r0, r3
 80097fa:	bfb8      	it	lt
 80097fc:	4618      	movlt	r0, r3
 80097fe:	e730      	b.n	8009662 <_printf_float+0xc2>
 8009800:	2301      	movs	r3, #1
 8009802:	464a      	mov	r2, r9
 8009804:	4631      	mov	r1, r6
 8009806:	4628      	mov	r0, r5
 8009808:	47b8      	blx	r7
 800980a:	3001      	adds	r0, #1
 800980c:	f43f af27 	beq.w	800965e <_printf_float+0xbe>
 8009810:	f108 0801 	add.w	r8, r8, #1
 8009814:	e7e6      	b.n	80097e4 <_printf_float+0x244>
 8009816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	dc39      	bgt.n	8009890 <_printf_float+0x2f0>
 800981c:	4a1b      	ldr	r2, [pc, #108]	; (800988c <_printf_float+0x2ec>)
 800981e:	2301      	movs	r3, #1
 8009820:	4631      	mov	r1, r6
 8009822:	4628      	mov	r0, r5
 8009824:	47b8      	blx	r7
 8009826:	3001      	adds	r0, #1
 8009828:	f43f af19 	beq.w	800965e <_printf_float+0xbe>
 800982c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009830:	4313      	orrs	r3, r2
 8009832:	d102      	bne.n	800983a <_printf_float+0x29a>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	07d9      	lsls	r1, r3, #31
 8009838:	d5d8      	bpl.n	80097ec <_printf_float+0x24c>
 800983a:	ee18 3a10 	vmov	r3, s16
 800983e:	4652      	mov	r2, sl
 8009840:	4631      	mov	r1, r6
 8009842:	4628      	mov	r0, r5
 8009844:	47b8      	blx	r7
 8009846:	3001      	adds	r0, #1
 8009848:	f43f af09 	beq.w	800965e <_printf_float+0xbe>
 800984c:	f04f 0900 	mov.w	r9, #0
 8009850:	f104 0a1a 	add.w	sl, r4, #26
 8009854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009856:	425b      	negs	r3, r3
 8009858:	454b      	cmp	r3, r9
 800985a:	dc01      	bgt.n	8009860 <_printf_float+0x2c0>
 800985c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800985e:	e792      	b.n	8009786 <_printf_float+0x1e6>
 8009860:	2301      	movs	r3, #1
 8009862:	4652      	mov	r2, sl
 8009864:	4631      	mov	r1, r6
 8009866:	4628      	mov	r0, r5
 8009868:	47b8      	blx	r7
 800986a:	3001      	adds	r0, #1
 800986c:	f43f aef7 	beq.w	800965e <_printf_float+0xbe>
 8009870:	f109 0901 	add.w	r9, r9, #1
 8009874:	e7ee      	b.n	8009854 <_printf_float+0x2b4>
 8009876:	bf00      	nop
 8009878:	7fefffff 	.word	0x7fefffff
 800987c:	0800e1c2 	.word	0x0800e1c2
 8009880:	0800e1c6 	.word	0x0800e1c6
 8009884:	0800e1ca 	.word	0x0800e1ca
 8009888:	0800e1ce 	.word	0x0800e1ce
 800988c:	0800e1d2 	.word	0x0800e1d2
 8009890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009892:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009894:	429a      	cmp	r2, r3
 8009896:	bfa8      	it	ge
 8009898:	461a      	movge	r2, r3
 800989a:	2a00      	cmp	r2, #0
 800989c:	4691      	mov	r9, r2
 800989e:	dc37      	bgt.n	8009910 <_printf_float+0x370>
 80098a0:	f04f 0b00 	mov.w	fp, #0
 80098a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098a8:	f104 021a 	add.w	r2, r4, #26
 80098ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098ae:	9305      	str	r3, [sp, #20]
 80098b0:	eba3 0309 	sub.w	r3, r3, r9
 80098b4:	455b      	cmp	r3, fp
 80098b6:	dc33      	bgt.n	8009920 <_printf_float+0x380>
 80098b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098bc:	429a      	cmp	r2, r3
 80098be:	db3b      	blt.n	8009938 <_printf_float+0x398>
 80098c0:	6823      	ldr	r3, [r4, #0]
 80098c2:	07da      	lsls	r2, r3, #31
 80098c4:	d438      	bmi.n	8009938 <_printf_float+0x398>
 80098c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80098ca:	eba2 0903 	sub.w	r9, r2, r3
 80098ce:	9b05      	ldr	r3, [sp, #20]
 80098d0:	1ad2      	subs	r2, r2, r3
 80098d2:	4591      	cmp	r9, r2
 80098d4:	bfa8      	it	ge
 80098d6:	4691      	movge	r9, r2
 80098d8:	f1b9 0f00 	cmp.w	r9, #0
 80098dc:	dc35      	bgt.n	800994a <_printf_float+0x3aa>
 80098de:	f04f 0800 	mov.w	r8, #0
 80098e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098e6:	f104 0a1a 	add.w	sl, r4, #26
 80098ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098ee:	1a9b      	subs	r3, r3, r2
 80098f0:	eba3 0309 	sub.w	r3, r3, r9
 80098f4:	4543      	cmp	r3, r8
 80098f6:	f77f af79 	ble.w	80097ec <_printf_float+0x24c>
 80098fa:	2301      	movs	r3, #1
 80098fc:	4652      	mov	r2, sl
 80098fe:	4631      	mov	r1, r6
 8009900:	4628      	mov	r0, r5
 8009902:	47b8      	blx	r7
 8009904:	3001      	adds	r0, #1
 8009906:	f43f aeaa 	beq.w	800965e <_printf_float+0xbe>
 800990a:	f108 0801 	add.w	r8, r8, #1
 800990e:	e7ec      	b.n	80098ea <_printf_float+0x34a>
 8009910:	4613      	mov	r3, r2
 8009912:	4631      	mov	r1, r6
 8009914:	4642      	mov	r2, r8
 8009916:	4628      	mov	r0, r5
 8009918:	47b8      	blx	r7
 800991a:	3001      	adds	r0, #1
 800991c:	d1c0      	bne.n	80098a0 <_printf_float+0x300>
 800991e:	e69e      	b.n	800965e <_printf_float+0xbe>
 8009920:	2301      	movs	r3, #1
 8009922:	4631      	mov	r1, r6
 8009924:	4628      	mov	r0, r5
 8009926:	9205      	str	r2, [sp, #20]
 8009928:	47b8      	blx	r7
 800992a:	3001      	adds	r0, #1
 800992c:	f43f ae97 	beq.w	800965e <_printf_float+0xbe>
 8009930:	9a05      	ldr	r2, [sp, #20]
 8009932:	f10b 0b01 	add.w	fp, fp, #1
 8009936:	e7b9      	b.n	80098ac <_printf_float+0x30c>
 8009938:	ee18 3a10 	vmov	r3, s16
 800993c:	4652      	mov	r2, sl
 800993e:	4631      	mov	r1, r6
 8009940:	4628      	mov	r0, r5
 8009942:	47b8      	blx	r7
 8009944:	3001      	adds	r0, #1
 8009946:	d1be      	bne.n	80098c6 <_printf_float+0x326>
 8009948:	e689      	b.n	800965e <_printf_float+0xbe>
 800994a:	9a05      	ldr	r2, [sp, #20]
 800994c:	464b      	mov	r3, r9
 800994e:	4442      	add	r2, r8
 8009950:	4631      	mov	r1, r6
 8009952:	4628      	mov	r0, r5
 8009954:	47b8      	blx	r7
 8009956:	3001      	adds	r0, #1
 8009958:	d1c1      	bne.n	80098de <_printf_float+0x33e>
 800995a:	e680      	b.n	800965e <_printf_float+0xbe>
 800995c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800995e:	2a01      	cmp	r2, #1
 8009960:	dc01      	bgt.n	8009966 <_printf_float+0x3c6>
 8009962:	07db      	lsls	r3, r3, #31
 8009964:	d53a      	bpl.n	80099dc <_printf_float+0x43c>
 8009966:	2301      	movs	r3, #1
 8009968:	4642      	mov	r2, r8
 800996a:	4631      	mov	r1, r6
 800996c:	4628      	mov	r0, r5
 800996e:	47b8      	blx	r7
 8009970:	3001      	adds	r0, #1
 8009972:	f43f ae74 	beq.w	800965e <_printf_float+0xbe>
 8009976:	ee18 3a10 	vmov	r3, s16
 800997a:	4652      	mov	r2, sl
 800997c:	4631      	mov	r1, r6
 800997e:	4628      	mov	r0, r5
 8009980:	47b8      	blx	r7
 8009982:	3001      	adds	r0, #1
 8009984:	f43f ae6b 	beq.w	800965e <_printf_float+0xbe>
 8009988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800998c:	2200      	movs	r2, #0
 800998e:	2300      	movs	r3, #0
 8009990:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009994:	f7f7 f8e8 	bl	8000b68 <__aeabi_dcmpeq>
 8009998:	b9d8      	cbnz	r0, 80099d2 <_printf_float+0x432>
 800999a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800999e:	f108 0201 	add.w	r2, r8, #1
 80099a2:	4631      	mov	r1, r6
 80099a4:	4628      	mov	r0, r5
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	d10e      	bne.n	80099ca <_printf_float+0x42a>
 80099ac:	e657      	b.n	800965e <_printf_float+0xbe>
 80099ae:	2301      	movs	r3, #1
 80099b0:	4652      	mov	r2, sl
 80099b2:	4631      	mov	r1, r6
 80099b4:	4628      	mov	r0, r5
 80099b6:	47b8      	blx	r7
 80099b8:	3001      	adds	r0, #1
 80099ba:	f43f ae50 	beq.w	800965e <_printf_float+0xbe>
 80099be:	f108 0801 	add.w	r8, r8, #1
 80099c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c4:	3b01      	subs	r3, #1
 80099c6:	4543      	cmp	r3, r8
 80099c8:	dcf1      	bgt.n	80099ae <_printf_float+0x40e>
 80099ca:	464b      	mov	r3, r9
 80099cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80099d0:	e6da      	b.n	8009788 <_printf_float+0x1e8>
 80099d2:	f04f 0800 	mov.w	r8, #0
 80099d6:	f104 0a1a 	add.w	sl, r4, #26
 80099da:	e7f2      	b.n	80099c2 <_printf_float+0x422>
 80099dc:	2301      	movs	r3, #1
 80099de:	4642      	mov	r2, r8
 80099e0:	e7df      	b.n	80099a2 <_printf_float+0x402>
 80099e2:	2301      	movs	r3, #1
 80099e4:	464a      	mov	r2, r9
 80099e6:	4631      	mov	r1, r6
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b8      	blx	r7
 80099ec:	3001      	adds	r0, #1
 80099ee:	f43f ae36 	beq.w	800965e <_printf_float+0xbe>
 80099f2:	f108 0801 	add.w	r8, r8, #1
 80099f6:	68e3      	ldr	r3, [r4, #12]
 80099f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099fa:	1a5b      	subs	r3, r3, r1
 80099fc:	4543      	cmp	r3, r8
 80099fe:	dcf0      	bgt.n	80099e2 <_printf_float+0x442>
 8009a00:	e6f8      	b.n	80097f4 <_printf_float+0x254>
 8009a02:	f04f 0800 	mov.w	r8, #0
 8009a06:	f104 0919 	add.w	r9, r4, #25
 8009a0a:	e7f4      	b.n	80099f6 <_printf_float+0x456>

08009a0c <_printf_common>:
 8009a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a10:	4616      	mov	r6, r2
 8009a12:	4699      	mov	r9, r3
 8009a14:	688a      	ldr	r2, [r1, #8]
 8009a16:	690b      	ldr	r3, [r1, #16]
 8009a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	bfb8      	it	lt
 8009a20:	4613      	movlt	r3, r2
 8009a22:	6033      	str	r3, [r6, #0]
 8009a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a28:	4607      	mov	r7, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	b10a      	cbz	r2, 8009a32 <_printf_common+0x26>
 8009a2e:	3301      	adds	r3, #1
 8009a30:	6033      	str	r3, [r6, #0]
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	0699      	lsls	r1, r3, #26
 8009a36:	bf42      	ittt	mi
 8009a38:	6833      	ldrmi	r3, [r6, #0]
 8009a3a:	3302      	addmi	r3, #2
 8009a3c:	6033      	strmi	r3, [r6, #0]
 8009a3e:	6825      	ldr	r5, [r4, #0]
 8009a40:	f015 0506 	ands.w	r5, r5, #6
 8009a44:	d106      	bne.n	8009a54 <_printf_common+0x48>
 8009a46:	f104 0a19 	add.w	sl, r4, #25
 8009a4a:	68e3      	ldr	r3, [r4, #12]
 8009a4c:	6832      	ldr	r2, [r6, #0]
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	42ab      	cmp	r3, r5
 8009a52:	dc26      	bgt.n	8009aa2 <_printf_common+0x96>
 8009a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a58:	1e13      	subs	r3, r2, #0
 8009a5a:	6822      	ldr	r2, [r4, #0]
 8009a5c:	bf18      	it	ne
 8009a5e:	2301      	movne	r3, #1
 8009a60:	0692      	lsls	r2, r2, #26
 8009a62:	d42b      	bmi.n	8009abc <_printf_common+0xb0>
 8009a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a68:	4649      	mov	r1, r9
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	47c0      	blx	r8
 8009a6e:	3001      	adds	r0, #1
 8009a70:	d01e      	beq.n	8009ab0 <_printf_common+0xa4>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	6922      	ldr	r2, [r4, #16]
 8009a76:	f003 0306 	and.w	r3, r3, #6
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	bf02      	ittt	eq
 8009a7e:	68e5      	ldreq	r5, [r4, #12]
 8009a80:	6833      	ldreq	r3, [r6, #0]
 8009a82:	1aed      	subeq	r5, r5, r3
 8009a84:	68a3      	ldr	r3, [r4, #8]
 8009a86:	bf0c      	ite	eq
 8009a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a8c:	2500      	movne	r5, #0
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	bfc4      	itt	gt
 8009a92:	1a9b      	subgt	r3, r3, r2
 8009a94:	18ed      	addgt	r5, r5, r3
 8009a96:	2600      	movs	r6, #0
 8009a98:	341a      	adds	r4, #26
 8009a9a:	42b5      	cmp	r5, r6
 8009a9c:	d11a      	bne.n	8009ad4 <_printf_common+0xc8>
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	e008      	b.n	8009ab4 <_printf_common+0xa8>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	4652      	mov	r2, sl
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	47c0      	blx	r8
 8009aac:	3001      	adds	r0, #1
 8009aae:	d103      	bne.n	8009ab8 <_printf_common+0xac>
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab8:	3501      	adds	r5, #1
 8009aba:	e7c6      	b.n	8009a4a <_printf_common+0x3e>
 8009abc:	18e1      	adds	r1, r4, r3
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	2030      	movs	r0, #48	; 0x30
 8009ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ac6:	4422      	add	r2, r4
 8009ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ad0:	3302      	adds	r3, #2
 8009ad2:	e7c7      	b.n	8009a64 <_printf_common+0x58>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	4622      	mov	r2, r4
 8009ad8:	4649      	mov	r1, r9
 8009ada:	4638      	mov	r0, r7
 8009adc:	47c0      	blx	r8
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d0e6      	beq.n	8009ab0 <_printf_common+0xa4>
 8009ae2:	3601      	adds	r6, #1
 8009ae4:	e7d9      	b.n	8009a9a <_printf_common+0x8e>
	...

08009ae8 <_printf_i>:
 8009ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aec:	7e0f      	ldrb	r7, [r1, #24]
 8009aee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009af0:	2f78      	cmp	r7, #120	; 0x78
 8009af2:	4691      	mov	r9, r2
 8009af4:	4680      	mov	r8, r0
 8009af6:	460c      	mov	r4, r1
 8009af8:	469a      	mov	sl, r3
 8009afa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009afe:	d807      	bhi.n	8009b10 <_printf_i+0x28>
 8009b00:	2f62      	cmp	r7, #98	; 0x62
 8009b02:	d80a      	bhi.n	8009b1a <_printf_i+0x32>
 8009b04:	2f00      	cmp	r7, #0
 8009b06:	f000 80d4 	beq.w	8009cb2 <_printf_i+0x1ca>
 8009b0a:	2f58      	cmp	r7, #88	; 0x58
 8009b0c:	f000 80c0 	beq.w	8009c90 <_printf_i+0x1a8>
 8009b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b18:	e03a      	b.n	8009b90 <_printf_i+0xa8>
 8009b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b1e:	2b15      	cmp	r3, #21
 8009b20:	d8f6      	bhi.n	8009b10 <_printf_i+0x28>
 8009b22:	a101      	add	r1, pc, #4	; (adr r1, 8009b28 <_printf_i+0x40>)
 8009b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b28:	08009b81 	.word	0x08009b81
 8009b2c:	08009b95 	.word	0x08009b95
 8009b30:	08009b11 	.word	0x08009b11
 8009b34:	08009b11 	.word	0x08009b11
 8009b38:	08009b11 	.word	0x08009b11
 8009b3c:	08009b11 	.word	0x08009b11
 8009b40:	08009b95 	.word	0x08009b95
 8009b44:	08009b11 	.word	0x08009b11
 8009b48:	08009b11 	.word	0x08009b11
 8009b4c:	08009b11 	.word	0x08009b11
 8009b50:	08009b11 	.word	0x08009b11
 8009b54:	08009c99 	.word	0x08009c99
 8009b58:	08009bc1 	.word	0x08009bc1
 8009b5c:	08009c53 	.word	0x08009c53
 8009b60:	08009b11 	.word	0x08009b11
 8009b64:	08009b11 	.word	0x08009b11
 8009b68:	08009cbb 	.word	0x08009cbb
 8009b6c:	08009b11 	.word	0x08009b11
 8009b70:	08009bc1 	.word	0x08009bc1
 8009b74:	08009b11 	.word	0x08009b11
 8009b78:	08009b11 	.word	0x08009b11
 8009b7c:	08009c5b 	.word	0x08009c5b
 8009b80:	682b      	ldr	r3, [r5, #0]
 8009b82:	1d1a      	adds	r2, r3, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	602a      	str	r2, [r5, #0]
 8009b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b90:	2301      	movs	r3, #1
 8009b92:	e09f      	b.n	8009cd4 <_printf_i+0x1ec>
 8009b94:	6820      	ldr	r0, [r4, #0]
 8009b96:	682b      	ldr	r3, [r5, #0]
 8009b98:	0607      	lsls	r7, r0, #24
 8009b9a:	f103 0104 	add.w	r1, r3, #4
 8009b9e:	6029      	str	r1, [r5, #0]
 8009ba0:	d501      	bpl.n	8009ba6 <_printf_i+0xbe>
 8009ba2:	681e      	ldr	r6, [r3, #0]
 8009ba4:	e003      	b.n	8009bae <_printf_i+0xc6>
 8009ba6:	0646      	lsls	r6, r0, #25
 8009ba8:	d5fb      	bpl.n	8009ba2 <_printf_i+0xba>
 8009baa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009bae:	2e00      	cmp	r6, #0
 8009bb0:	da03      	bge.n	8009bba <_printf_i+0xd2>
 8009bb2:	232d      	movs	r3, #45	; 0x2d
 8009bb4:	4276      	negs	r6, r6
 8009bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bba:	485a      	ldr	r0, [pc, #360]	; (8009d24 <_printf_i+0x23c>)
 8009bbc:	230a      	movs	r3, #10
 8009bbe:	e012      	b.n	8009be6 <_printf_i+0xfe>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	6820      	ldr	r0, [r4, #0]
 8009bc4:	1d19      	adds	r1, r3, #4
 8009bc6:	6029      	str	r1, [r5, #0]
 8009bc8:	0605      	lsls	r5, r0, #24
 8009bca:	d501      	bpl.n	8009bd0 <_printf_i+0xe8>
 8009bcc:	681e      	ldr	r6, [r3, #0]
 8009bce:	e002      	b.n	8009bd6 <_printf_i+0xee>
 8009bd0:	0641      	lsls	r1, r0, #25
 8009bd2:	d5fb      	bpl.n	8009bcc <_printf_i+0xe4>
 8009bd4:	881e      	ldrh	r6, [r3, #0]
 8009bd6:	4853      	ldr	r0, [pc, #332]	; (8009d24 <_printf_i+0x23c>)
 8009bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8009bda:	bf0c      	ite	eq
 8009bdc:	2308      	moveq	r3, #8
 8009bde:	230a      	movne	r3, #10
 8009be0:	2100      	movs	r1, #0
 8009be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009be6:	6865      	ldr	r5, [r4, #4]
 8009be8:	60a5      	str	r5, [r4, #8]
 8009bea:	2d00      	cmp	r5, #0
 8009bec:	bfa2      	ittt	ge
 8009bee:	6821      	ldrge	r1, [r4, #0]
 8009bf0:	f021 0104 	bicge.w	r1, r1, #4
 8009bf4:	6021      	strge	r1, [r4, #0]
 8009bf6:	b90e      	cbnz	r6, 8009bfc <_printf_i+0x114>
 8009bf8:	2d00      	cmp	r5, #0
 8009bfa:	d04b      	beq.n	8009c94 <_printf_i+0x1ac>
 8009bfc:	4615      	mov	r5, r2
 8009bfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c02:	fb03 6711 	mls	r7, r3, r1, r6
 8009c06:	5dc7      	ldrb	r7, [r0, r7]
 8009c08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c0c:	4637      	mov	r7, r6
 8009c0e:	42bb      	cmp	r3, r7
 8009c10:	460e      	mov	r6, r1
 8009c12:	d9f4      	bls.n	8009bfe <_printf_i+0x116>
 8009c14:	2b08      	cmp	r3, #8
 8009c16:	d10b      	bne.n	8009c30 <_printf_i+0x148>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	07de      	lsls	r6, r3, #31
 8009c1c:	d508      	bpl.n	8009c30 <_printf_i+0x148>
 8009c1e:	6923      	ldr	r3, [r4, #16]
 8009c20:	6861      	ldr	r1, [r4, #4]
 8009c22:	4299      	cmp	r1, r3
 8009c24:	bfde      	ittt	le
 8009c26:	2330      	movle	r3, #48	; 0x30
 8009c28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c30:	1b52      	subs	r2, r2, r5
 8009c32:	6122      	str	r2, [r4, #16]
 8009c34:	f8cd a000 	str.w	sl, [sp]
 8009c38:	464b      	mov	r3, r9
 8009c3a:	aa03      	add	r2, sp, #12
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4640      	mov	r0, r8
 8009c40:	f7ff fee4 	bl	8009a0c <_printf_common>
 8009c44:	3001      	adds	r0, #1
 8009c46:	d14a      	bne.n	8009cde <_printf_i+0x1f6>
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4c:	b004      	add	sp, #16
 8009c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	f043 0320 	orr.w	r3, r3, #32
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	4833      	ldr	r0, [pc, #204]	; (8009d28 <_printf_i+0x240>)
 8009c5c:	2778      	movs	r7, #120	; 0x78
 8009c5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	6829      	ldr	r1, [r5, #0]
 8009c66:	061f      	lsls	r7, r3, #24
 8009c68:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c6c:	d402      	bmi.n	8009c74 <_printf_i+0x18c>
 8009c6e:	065f      	lsls	r7, r3, #25
 8009c70:	bf48      	it	mi
 8009c72:	b2b6      	uxthmi	r6, r6
 8009c74:	07df      	lsls	r7, r3, #31
 8009c76:	bf48      	it	mi
 8009c78:	f043 0320 	orrmi.w	r3, r3, #32
 8009c7c:	6029      	str	r1, [r5, #0]
 8009c7e:	bf48      	it	mi
 8009c80:	6023      	strmi	r3, [r4, #0]
 8009c82:	b91e      	cbnz	r6, 8009c8c <_printf_i+0x1a4>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	f023 0320 	bic.w	r3, r3, #32
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	2310      	movs	r3, #16
 8009c8e:	e7a7      	b.n	8009be0 <_printf_i+0xf8>
 8009c90:	4824      	ldr	r0, [pc, #144]	; (8009d24 <_printf_i+0x23c>)
 8009c92:	e7e4      	b.n	8009c5e <_printf_i+0x176>
 8009c94:	4615      	mov	r5, r2
 8009c96:	e7bd      	b.n	8009c14 <_printf_i+0x12c>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	6826      	ldr	r6, [r4, #0]
 8009c9c:	6961      	ldr	r1, [r4, #20]
 8009c9e:	1d18      	adds	r0, r3, #4
 8009ca0:	6028      	str	r0, [r5, #0]
 8009ca2:	0635      	lsls	r5, r6, #24
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	d501      	bpl.n	8009cac <_printf_i+0x1c4>
 8009ca8:	6019      	str	r1, [r3, #0]
 8009caa:	e002      	b.n	8009cb2 <_printf_i+0x1ca>
 8009cac:	0670      	lsls	r0, r6, #25
 8009cae:	d5fb      	bpl.n	8009ca8 <_printf_i+0x1c0>
 8009cb0:	8019      	strh	r1, [r3, #0]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6123      	str	r3, [r4, #16]
 8009cb6:	4615      	mov	r5, r2
 8009cb8:	e7bc      	b.n	8009c34 <_printf_i+0x14c>
 8009cba:	682b      	ldr	r3, [r5, #0]
 8009cbc:	1d1a      	adds	r2, r3, #4
 8009cbe:	602a      	str	r2, [r5, #0]
 8009cc0:	681d      	ldr	r5, [r3, #0]
 8009cc2:	6862      	ldr	r2, [r4, #4]
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f7f6 fad2 	bl	8000270 <memchr>
 8009ccc:	b108      	cbz	r0, 8009cd2 <_printf_i+0x1ea>
 8009cce:	1b40      	subs	r0, r0, r5
 8009cd0:	6060      	str	r0, [r4, #4]
 8009cd2:	6863      	ldr	r3, [r4, #4]
 8009cd4:	6123      	str	r3, [r4, #16]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cdc:	e7aa      	b.n	8009c34 <_printf_i+0x14c>
 8009cde:	6923      	ldr	r3, [r4, #16]
 8009ce0:	462a      	mov	r2, r5
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	47d0      	blx	sl
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d0ad      	beq.n	8009c48 <_printf_i+0x160>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	079b      	lsls	r3, r3, #30
 8009cf0:	d413      	bmi.n	8009d1a <_printf_i+0x232>
 8009cf2:	68e0      	ldr	r0, [r4, #12]
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	4298      	cmp	r0, r3
 8009cf8:	bfb8      	it	lt
 8009cfa:	4618      	movlt	r0, r3
 8009cfc:	e7a6      	b.n	8009c4c <_printf_i+0x164>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4632      	mov	r2, r6
 8009d02:	4649      	mov	r1, r9
 8009d04:	4640      	mov	r0, r8
 8009d06:	47d0      	blx	sl
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d09d      	beq.n	8009c48 <_printf_i+0x160>
 8009d0c:	3501      	adds	r5, #1
 8009d0e:	68e3      	ldr	r3, [r4, #12]
 8009d10:	9903      	ldr	r1, [sp, #12]
 8009d12:	1a5b      	subs	r3, r3, r1
 8009d14:	42ab      	cmp	r3, r5
 8009d16:	dcf2      	bgt.n	8009cfe <_printf_i+0x216>
 8009d18:	e7eb      	b.n	8009cf2 <_printf_i+0x20a>
 8009d1a:	2500      	movs	r5, #0
 8009d1c:	f104 0619 	add.w	r6, r4, #25
 8009d20:	e7f5      	b.n	8009d0e <_printf_i+0x226>
 8009d22:	bf00      	nop
 8009d24:	0800e1d4 	.word	0x0800e1d4
 8009d28:	0800e1e5 	.word	0x0800e1e5

08009d2c <_scanf_float>:
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	b087      	sub	sp, #28
 8009d32:	4617      	mov	r7, r2
 8009d34:	9303      	str	r3, [sp, #12]
 8009d36:	688b      	ldr	r3, [r1, #8]
 8009d38:	1e5a      	subs	r2, r3, #1
 8009d3a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d3e:	bf83      	ittte	hi
 8009d40:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009d44:	195b      	addhi	r3, r3, r5
 8009d46:	9302      	strhi	r3, [sp, #8]
 8009d48:	2300      	movls	r3, #0
 8009d4a:	bf86      	itte	hi
 8009d4c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d50:	608b      	strhi	r3, [r1, #8]
 8009d52:	9302      	strls	r3, [sp, #8]
 8009d54:	680b      	ldr	r3, [r1, #0]
 8009d56:	468b      	mov	fp, r1
 8009d58:	2500      	movs	r5, #0
 8009d5a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009d5e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009d62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009d66:	4680      	mov	r8, r0
 8009d68:	460c      	mov	r4, r1
 8009d6a:	465e      	mov	r6, fp
 8009d6c:	46aa      	mov	sl, r5
 8009d6e:	46a9      	mov	r9, r5
 8009d70:	9501      	str	r5, [sp, #4]
 8009d72:	68a2      	ldr	r2, [r4, #8]
 8009d74:	b152      	cbz	r2, 8009d8c <_scanf_float+0x60>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b4e      	cmp	r3, #78	; 0x4e
 8009d7c:	d864      	bhi.n	8009e48 <_scanf_float+0x11c>
 8009d7e:	2b40      	cmp	r3, #64	; 0x40
 8009d80:	d83c      	bhi.n	8009dfc <_scanf_float+0xd0>
 8009d82:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009d86:	b2c8      	uxtb	r0, r1
 8009d88:	280e      	cmp	r0, #14
 8009d8a:	d93a      	bls.n	8009e02 <_scanf_float+0xd6>
 8009d8c:	f1b9 0f00 	cmp.w	r9, #0
 8009d90:	d003      	beq.n	8009d9a <_scanf_float+0x6e>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d9e:	f1ba 0f01 	cmp.w	sl, #1
 8009da2:	f200 8113 	bhi.w	8009fcc <_scanf_float+0x2a0>
 8009da6:	455e      	cmp	r6, fp
 8009da8:	f200 8105 	bhi.w	8009fb6 <_scanf_float+0x28a>
 8009dac:	2501      	movs	r5, #1
 8009dae:	4628      	mov	r0, r5
 8009db0:	b007      	add	sp, #28
 8009db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009dba:	2a0d      	cmp	r2, #13
 8009dbc:	d8e6      	bhi.n	8009d8c <_scanf_float+0x60>
 8009dbe:	a101      	add	r1, pc, #4	; (adr r1, 8009dc4 <_scanf_float+0x98>)
 8009dc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009dc4:	08009f03 	.word	0x08009f03
 8009dc8:	08009d8d 	.word	0x08009d8d
 8009dcc:	08009d8d 	.word	0x08009d8d
 8009dd0:	08009d8d 	.word	0x08009d8d
 8009dd4:	08009f63 	.word	0x08009f63
 8009dd8:	08009f3b 	.word	0x08009f3b
 8009ddc:	08009d8d 	.word	0x08009d8d
 8009de0:	08009d8d 	.word	0x08009d8d
 8009de4:	08009f11 	.word	0x08009f11
 8009de8:	08009d8d 	.word	0x08009d8d
 8009dec:	08009d8d 	.word	0x08009d8d
 8009df0:	08009d8d 	.word	0x08009d8d
 8009df4:	08009d8d 	.word	0x08009d8d
 8009df8:	08009ec9 	.word	0x08009ec9
 8009dfc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009e00:	e7db      	b.n	8009dba <_scanf_float+0x8e>
 8009e02:	290e      	cmp	r1, #14
 8009e04:	d8c2      	bhi.n	8009d8c <_scanf_float+0x60>
 8009e06:	a001      	add	r0, pc, #4	; (adr r0, 8009e0c <_scanf_float+0xe0>)
 8009e08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009e0c:	08009ebb 	.word	0x08009ebb
 8009e10:	08009d8d 	.word	0x08009d8d
 8009e14:	08009ebb 	.word	0x08009ebb
 8009e18:	08009f4f 	.word	0x08009f4f
 8009e1c:	08009d8d 	.word	0x08009d8d
 8009e20:	08009e69 	.word	0x08009e69
 8009e24:	08009ea5 	.word	0x08009ea5
 8009e28:	08009ea5 	.word	0x08009ea5
 8009e2c:	08009ea5 	.word	0x08009ea5
 8009e30:	08009ea5 	.word	0x08009ea5
 8009e34:	08009ea5 	.word	0x08009ea5
 8009e38:	08009ea5 	.word	0x08009ea5
 8009e3c:	08009ea5 	.word	0x08009ea5
 8009e40:	08009ea5 	.word	0x08009ea5
 8009e44:	08009ea5 	.word	0x08009ea5
 8009e48:	2b6e      	cmp	r3, #110	; 0x6e
 8009e4a:	d809      	bhi.n	8009e60 <_scanf_float+0x134>
 8009e4c:	2b60      	cmp	r3, #96	; 0x60
 8009e4e:	d8b2      	bhi.n	8009db6 <_scanf_float+0x8a>
 8009e50:	2b54      	cmp	r3, #84	; 0x54
 8009e52:	d077      	beq.n	8009f44 <_scanf_float+0x218>
 8009e54:	2b59      	cmp	r3, #89	; 0x59
 8009e56:	d199      	bne.n	8009d8c <_scanf_float+0x60>
 8009e58:	2d07      	cmp	r5, #7
 8009e5a:	d197      	bne.n	8009d8c <_scanf_float+0x60>
 8009e5c:	2508      	movs	r5, #8
 8009e5e:	e029      	b.n	8009eb4 <_scanf_float+0x188>
 8009e60:	2b74      	cmp	r3, #116	; 0x74
 8009e62:	d06f      	beq.n	8009f44 <_scanf_float+0x218>
 8009e64:	2b79      	cmp	r3, #121	; 0x79
 8009e66:	e7f6      	b.n	8009e56 <_scanf_float+0x12a>
 8009e68:	6821      	ldr	r1, [r4, #0]
 8009e6a:	05c8      	lsls	r0, r1, #23
 8009e6c:	d51a      	bpl.n	8009ea4 <_scanf_float+0x178>
 8009e6e:	9b02      	ldr	r3, [sp, #8]
 8009e70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009e74:	6021      	str	r1, [r4, #0]
 8009e76:	f109 0901 	add.w	r9, r9, #1
 8009e7a:	b11b      	cbz	r3, 8009e84 <_scanf_float+0x158>
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	3201      	adds	r2, #1
 8009e80:	9302      	str	r3, [sp, #8]
 8009e82:	60a2      	str	r2, [r4, #8]
 8009e84:	68a3      	ldr	r3, [r4, #8]
 8009e86:	3b01      	subs	r3, #1
 8009e88:	60a3      	str	r3, [r4, #8]
 8009e8a:	6923      	ldr	r3, [r4, #16]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	6123      	str	r3, [r4, #16]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	607b      	str	r3, [r7, #4]
 8009e98:	f340 8084 	ble.w	8009fa4 <_scanf_float+0x278>
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	603b      	str	r3, [r7, #0]
 8009ea2:	e766      	b.n	8009d72 <_scanf_float+0x46>
 8009ea4:	eb1a 0f05 	cmn.w	sl, r5
 8009ea8:	f47f af70 	bne.w	8009d8c <_scanf_float+0x60>
 8009eac:	6822      	ldr	r2, [r4, #0]
 8009eae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009eb2:	6022      	str	r2, [r4, #0]
 8009eb4:	f806 3b01 	strb.w	r3, [r6], #1
 8009eb8:	e7e4      	b.n	8009e84 <_scanf_float+0x158>
 8009eba:	6822      	ldr	r2, [r4, #0]
 8009ebc:	0610      	lsls	r0, r2, #24
 8009ebe:	f57f af65 	bpl.w	8009d8c <_scanf_float+0x60>
 8009ec2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ec6:	e7f4      	b.n	8009eb2 <_scanf_float+0x186>
 8009ec8:	f1ba 0f00 	cmp.w	sl, #0
 8009ecc:	d10e      	bne.n	8009eec <_scanf_float+0x1c0>
 8009ece:	f1b9 0f00 	cmp.w	r9, #0
 8009ed2:	d10e      	bne.n	8009ef2 <_scanf_float+0x1c6>
 8009ed4:	6822      	ldr	r2, [r4, #0]
 8009ed6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009eda:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009ede:	d108      	bne.n	8009ef2 <_scanf_float+0x1c6>
 8009ee0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ee4:	6022      	str	r2, [r4, #0]
 8009ee6:	f04f 0a01 	mov.w	sl, #1
 8009eea:	e7e3      	b.n	8009eb4 <_scanf_float+0x188>
 8009eec:	f1ba 0f02 	cmp.w	sl, #2
 8009ef0:	d055      	beq.n	8009f9e <_scanf_float+0x272>
 8009ef2:	2d01      	cmp	r5, #1
 8009ef4:	d002      	beq.n	8009efc <_scanf_float+0x1d0>
 8009ef6:	2d04      	cmp	r5, #4
 8009ef8:	f47f af48 	bne.w	8009d8c <_scanf_float+0x60>
 8009efc:	3501      	adds	r5, #1
 8009efe:	b2ed      	uxtb	r5, r5
 8009f00:	e7d8      	b.n	8009eb4 <_scanf_float+0x188>
 8009f02:	f1ba 0f01 	cmp.w	sl, #1
 8009f06:	f47f af41 	bne.w	8009d8c <_scanf_float+0x60>
 8009f0a:	f04f 0a02 	mov.w	sl, #2
 8009f0e:	e7d1      	b.n	8009eb4 <_scanf_float+0x188>
 8009f10:	b97d      	cbnz	r5, 8009f32 <_scanf_float+0x206>
 8009f12:	f1b9 0f00 	cmp.w	r9, #0
 8009f16:	f47f af3c 	bne.w	8009d92 <_scanf_float+0x66>
 8009f1a:	6822      	ldr	r2, [r4, #0]
 8009f1c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f20:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f24:	f47f af39 	bne.w	8009d9a <_scanf_float+0x6e>
 8009f28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f2c:	6022      	str	r2, [r4, #0]
 8009f2e:	2501      	movs	r5, #1
 8009f30:	e7c0      	b.n	8009eb4 <_scanf_float+0x188>
 8009f32:	2d03      	cmp	r5, #3
 8009f34:	d0e2      	beq.n	8009efc <_scanf_float+0x1d0>
 8009f36:	2d05      	cmp	r5, #5
 8009f38:	e7de      	b.n	8009ef8 <_scanf_float+0x1cc>
 8009f3a:	2d02      	cmp	r5, #2
 8009f3c:	f47f af26 	bne.w	8009d8c <_scanf_float+0x60>
 8009f40:	2503      	movs	r5, #3
 8009f42:	e7b7      	b.n	8009eb4 <_scanf_float+0x188>
 8009f44:	2d06      	cmp	r5, #6
 8009f46:	f47f af21 	bne.w	8009d8c <_scanf_float+0x60>
 8009f4a:	2507      	movs	r5, #7
 8009f4c:	e7b2      	b.n	8009eb4 <_scanf_float+0x188>
 8009f4e:	6822      	ldr	r2, [r4, #0]
 8009f50:	0591      	lsls	r1, r2, #22
 8009f52:	f57f af1b 	bpl.w	8009d8c <_scanf_float+0x60>
 8009f56:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009f5a:	6022      	str	r2, [r4, #0]
 8009f5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f60:	e7a8      	b.n	8009eb4 <_scanf_float+0x188>
 8009f62:	6822      	ldr	r2, [r4, #0]
 8009f64:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009f68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009f6c:	d006      	beq.n	8009f7c <_scanf_float+0x250>
 8009f6e:	0550      	lsls	r0, r2, #21
 8009f70:	f57f af0c 	bpl.w	8009d8c <_scanf_float+0x60>
 8009f74:	f1b9 0f00 	cmp.w	r9, #0
 8009f78:	f43f af0f 	beq.w	8009d9a <_scanf_float+0x6e>
 8009f7c:	0591      	lsls	r1, r2, #22
 8009f7e:	bf58      	it	pl
 8009f80:	9901      	ldrpl	r1, [sp, #4]
 8009f82:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f86:	bf58      	it	pl
 8009f88:	eba9 0101 	subpl.w	r1, r9, r1
 8009f8c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009f90:	bf58      	it	pl
 8009f92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009f96:	6022      	str	r2, [r4, #0]
 8009f98:	f04f 0900 	mov.w	r9, #0
 8009f9c:	e78a      	b.n	8009eb4 <_scanf_float+0x188>
 8009f9e:	f04f 0a03 	mov.w	sl, #3
 8009fa2:	e787      	b.n	8009eb4 <_scanf_float+0x188>
 8009fa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009fa8:	4639      	mov	r1, r7
 8009faa:	4640      	mov	r0, r8
 8009fac:	4798      	blx	r3
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f43f aedf 	beq.w	8009d72 <_scanf_float+0x46>
 8009fb4:	e6ea      	b.n	8009d8c <_scanf_float+0x60>
 8009fb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fbe:	463a      	mov	r2, r7
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	4798      	blx	r3
 8009fc4:	6923      	ldr	r3, [r4, #16]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	6123      	str	r3, [r4, #16]
 8009fca:	e6ec      	b.n	8009da6 <_scanf_float+0x7a>
 8009fcc:	1e6b      	subs	r3, r5, #1
 8009fce:	2b06      	cmp	r3, #6
 8009fd0:	d825      	bhi.n	800a01e <_scanf_float+0x2f2>
 8009fd2:	2d02      	cmp	r5, #2
 8009fd4:	d836      	bhi.n	800a044 <_scanf_float+0x318>
 8009fd6:	455e      	cmp	r6, fp
 8009fd8:	f67f aee8 	bls.w	8009dac <_scanf_float+0x80>
 8009fdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fe0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fe4:	463a      	mov	r2, r7
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	4798      	blx	r3
 8009fea:	6923      	ldr	r3, [r4, #16]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	6123      	str	r3, [r4, #16]
 8009ff0:	e7f1      	b.n	8009fd6 <_scanf_float+0x2aa>
 8009ff2:	9802      	ldr	r0, [sp, #8]
 8009ff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ff8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009ffc:	9002      	str	r0, [sp, #8]
 8009ffe:	463a      	mov	r2, r7
 800a000:	4640      	mov	r0, r8
 800a002:	4798      	blx	r3
 800a004:	6923      	ldr	r3, [r4, #16]
 800a006:	3b01      	subs	r3, #1
 800a008:	6123      	str	r3, [r4, #16]
 800a00a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a00e:	fa5f fa8a 	uxtb.w	sl, sl
 800a012:	f1ba 0f02 	cmp.w	sl, #2
 800a016:	d1ec      	bne.n	8009ff2 <_scanf_float+0x2c6>
 800a018:	3d03      	subs	r5, #3
 800a01a:	b2ed      	uxtb	r5, r5
 800a01c:	1b76      	subs	r6, r6, r5
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	05da      	lsls	r2, r3, #23
 800a022:	d52f      	bpl.n	800a084 <_scanf_float+0x358>
 800a024:	055b      	lsls	r3, r3, #21
 800a026:	d510      	bpl.n	800a04a <_scanf_float+0x31e>
 800a028:	455e      	cmp	r6, fp
 800a02a:	f67f aebf 	bls.w	8009dac <_scanf_float+0x80>
 800a02e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a032:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a036:	463a      	mov	r2, r7
 800a038:	4640      	mov	r0, r8
 800a03a:	4798      	blx	r3
 800a03c:	6923      	ldr	r3, [r4, #16]
 800a03e:	3b01      	subs	r3, #1
 800a040:	6123      	str	r3, [r4, #16]
 800a042:	e7f1      	b.n	800a028 <_scanf_float+0x2fc>
 800a044:	46aa      	mov	sl, r5
 800a046:	9602      	str	r6, [sp, #8]
 800a048:	e7df      	b.n	800a00a <_scanf_float+0x2de>
 800a04a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a04e:	6923      	ldr	r3, [r4, #16]
 800a050:	2965      	cmp	r1, #101	; 0x65
 800a052:	f103 33ff 	add.w	r3, r3, #4294967295
 800a056:	f106 35ff 	add.w	r5, r6, #4294967295
 800a05a:	6123      	str	r3, [r4, #16]
 800a05c:	d00c      	beq.n	800a078 <_scanf_float+0x34c>
 800a05e:	2945      	cmp	r1, #69	; 0x45
 800a060:	d00a      	beq.n	800a078 <_scanf_float+0x34c>
 800a062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a066:	463a      	mov	r2, r7
 800a068:	4640      	mov	r0, r8
 800a06a:	4798      	blx	r3
 800a06c:	6923      	ldr	r3, [r4, #16]
 800a06e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a072:	3b01      	subs	r3, #1
 800a074:	1eb5      	subs	r5, r6, #2
 800a076:	6123      	str	r3, [r4, #16]
 800a078:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a07c:	463a      	mov	r2, r7
 800a07e:	4640      	mov	r0, r8
 800a080:	4798      	blx	r3
 800a082:	462e      	mov	r6, r5
 800a084:	6825      	ldr	r5, [r4, #0]
 800a086:	f015 0510 	ands.w	r5, r5, #16
 800a08a:	d158      	bne.n	800a13e <_scanf_float+0x412>
 800a08c:	7035      	strb	r5, [r6, #0]
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a098:	d11c      	bne.n	800a0d4 <_scanf_float+0x3a8>
 800a09a:	9b01      	ldr	r3, [sp, #4]
 800a09c:	454b      	cmp	r3, r9
 800a09e:	eba3 0209 	sub.w	r2, r3, r9
 800a0a2:	d124      	bne.n	800a0ee <_scanf_float+0x3c2>
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	4659      	mov	r1, fp
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	f002 fc3d 	bl	800c928 <_strtod_r>
 800a0ae:	9b03      	ldr	r3, [sp, #12]
 800a0b0:	6821      	ldr	r1, [r4, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f011 0f02 	tst.w	r1, #2
 800a0b8:	ec57 6b10 	vmov	r6, r7, d0
 800a0bc:	f103 0204 	add.w	r2, r3, #4
 800a0c0:	d020      	beq.n	800a104 <_scanf_float+0x3d8>
 800a0c2:	9903      	ldr	r1, [sp, #12]
 800a0c4:	600a      	str	r2, [r1, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	e9c3 6700 	strd	r6, r7, [r3]
 800a0cc:	68e3      	ldr	r3, [r4, #12]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	60e3      	str	r3, [r4, #12]
 800a0d2:	e66c      	b.n	8009dae <_scanf_float+0x82>
 800a0d4:	9b04      	ldr	r3, [sp, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0e4      	beq.n	800a0a4 <_scanf_float+0x378>
 800a0da:	9905      	ldr	r1, [sp, #20]
 800a0dc:	230a      	movs	r3, #10
 800a0de:	462a      	mov	r2, r5
 800a0e0:	3101      	adds	r1, #1
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	f002 fca8 	bl	800ca38 <_strtol_r>
 800a0e8:	9b04      	ldr	r3, [sp, #16]
 800a0ea:	9e05      	ldr	r6, [sp, #20]
 800a0ec:	1ac2      	subs	r2, r0, r3
 800a0ee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a0f2:	429e      	cmp	r6, r3
 800a0f4:	bf28      	it	cs
 800a0f6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a0fa:	4912      	ldr	r1, [pc, #72]	; (800a144 <_scanf_float+0x418>)
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f000 f8e7 	bl	800a2d0 <siprintf>
 800a102:	e7cf      	b.n	800a0a4 <_scanf_float+0x378>
 800a104:	f011 0f04 	tst.w	r1, #4
 800a108:	9903      	ldr	r1, [sp, #12]
 800a10a:	600a      	str	r2, [r1, #0]
 800a10c:	d1db      	bne.n	800a0c6 <_scanf_float+0x39a>
 800a10e:	f8d3 8000 	ldr.w	r8, [r3]
 800a112:	ee10 2a10 	vmov	r2, s0
 800a116:	ee10 0a10 	vmov	r0, s0
 800a11a:	463b      	mov	r3, r7
 800a11c:	4639      	mov	r1, r7
 800a11e:	f7f6 fd55 	bl	8000bcc <__aeabi_dcmpun>
 800a122:	b128      	cbz	r0, 800a130 <_scanf_float+0x404>
 800a124:	4808      	ldr	r0, [pc, #32]	; (800a148 <_scanf_float+0x41c>)
 800a126:	f000 f9c3 	bl	800a4b0 <nanf>
 800a12a:	ed88 0a00 	vstr	s0, [r8]
 800a12e:	e7cd      	b.n	800a0cc <_scanf_float+0x3a0>
 800a130:	4630      	mov	r0, r6
 800a132:	4639      	mov	r1, r7
 800a134:	f7f6 fda8 	bl	8000c88 <__aeabi_d2f>
 800a138:	f8c8 0000 	str.w	r0, [r8]
 800a13c:	e7c6      	b.n	800a0cc <_scanf_float+0x3a0>
 800a13e:	2500      	movs	r5, #0
 800a140:	e635      	b.n	8009dae <_scanf_float+0x82>
 800a142:	bf00      	nop
 800a144:	0800e1f6 	.word	0x0800e1f6
 800a148:	0800e58d 	.word	0x0800e58d

0800a14c <std>:
 800a14c:	2300      	movs	r3, #0
 800a14e:	b510      	push	{r4, lr}
 800a150:	4604      	mov	r4, r0
 800a152:	e9c0 3300 	strd	r3, r3, [r0]
 800a156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a15a:	6083      	str	r3, [r0, #8]
 800a15c:	8181      	strh	r1, [r0, #12]
 800a15e:	6643      	str	r3, [r0, #100]	; 0x64
 800a160:	81c2      	strh	r2, [r0, #14]
 800a162:	6183      	str	r3, [r0, #24]
 800a164:	4619      	mov	r1, r3
 800a166:	2208      	movs	r2, #8
 800a168:	305c      	adds	r0, #92	; 0x5c
 800a16a:	f000 f924 	bl	800a3b6 <memset>
 800a16e:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <std+0x58>)
 800a170:	6263      	str	r3, [r4, #36]	; 0x24
 800a172:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <std+0x5c>)
 800a174:	62a3      	str	r3, [r4, #40]	; 0x28
 800a176:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <std+0x60>)
 800a178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a17a:	4b0d      	ldr	r3, [pc, #52]	; (800a1b0 <std+0x64>)
 800a17c:	6323      	str	r3, [r4, #48]	; 0x30
 800a17e:	4b0d      	ldr	r3, [pc, #52]	; (800a1b4 <std+0x68>)
 800a180:	6224      	str	r4, [r4, #32]
 800a182:	429c      	cmp	r4, r3
 800a184:	d006      	beq.n	800a194 <std+0x48>
 800a186:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a18a:	4294      	cmp	r4, r2
 800a18c:	d002      	beq.n	800a194 <std+0x48>
 800a18e:	33d0      	adds	r3, #208	; 0xd0
 800a190:	429c      	cmp	r4, r3
 800a192:	d105      	bne.n	800a1a0 <std+0x54>
 800a194:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a19c:	f000 b976 	b.w	800a48c <__retarget_lock_init_recursive>
 800a1a0:	bd10      	pop	{r4, pc}
 800a1a2:	bf00      	nop
 800a1a4:	0800a311 	.word	0x0800a311
 800a1a8:	0800a333 	.word	0x0800a333
 800a1ac:	0800a36b 	.word	0x0800a36b
 800a1b0:	0800a38f 	.word	0x0800a38f
 800a1b4:	20014860 	.word	0x20014860

0800a1b8 <stdio_exit_handler>:
 800a1b8:	4a02      	ldr	r2, [pc, #8]	; (800a1c4 <stdio_exit_handler+0xc>)
 800a1ba:	4903      	ldr	r1, [pc, #12]	; (800a1c8 <stdio_exit_handler+0x10>)
 800a1bc:	4803      	ldr	r0, [pc, #12]	; (800a1cc <stdio_exit_handler+0x14>)
 800a1be:	f000 b869 	b.w	800a294 <_fwalk_sglue>
 800a1c2:	bf00      	nop
 800a1c4:	20000020 	.word	0x20000020
 800a1c8:	0800cdf9 	.word	0x0800cdf9
 800a1cc:	2000002c 	.word	0x2000002c

0800a1d0 <cleanup_stdio>:
 800a1d0:	6841      	ldr	r1, [r0, #4]
 800a1d2:	4b0c      	ldr	r3, [pc, #48]	; (800a204 <cleanup_stdio+0x34>)
 800a1d4:	4299      	cmp	r1, r3
 800a1d6:	b510      	push	{r4, lr}
 800a1d8:	4604      	mov	r4, r0
 800a1da:	d001      	beq.n	800a1e0 <cleanup_stdio+0x10>
 800a1dc:	f002 fe0c 	bl	800cdf8 <_fflush_r>
 800a1e0:	68a1      	ldr	r1, [r4, #8]
 800a1e2:	4b09      	ldr	r3, [pc, #36]	; (800a208 <cleanup_stdio+0x38>)
 800a1e4:	4299      	cmp	r1, r3
 800a1e6:	d002      	beq.n	800a1ee <cleanup_stdio+0x1e>
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f002 fe05 	bl	800cdf8 <_fflush_r>
 800a1ee:	68e1      	ldr	r1, [r4, #12]
 800a1f0:	4b06      	ldr	r3, [pc, #24]	; (800a20c <cleanup_stdio+0x3c>)
 800a1f2:	4299      	cmp	r1, r3
 800a1f4:	d004      	beq.n	800a200 <cleanup_stdio+0x30>
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1fc:	f002 bdfc 	b.w	800cdf8 <_fflush_r>
 800a200:	bd10      	pop	{r4, pc}
 800a202:	bf00      	nop
 800a204:	20014860 	.word	0x20014860
 800a208:	200148c8 	.word	0x200148c8
 800a20c:	20014930 	.word	0x20014930

0800a210 <global_stdio_init.part.0>:
 800a210:	b510      	push	{r4, lr}
 800a212:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <global_stdio_init.part.0+0x30>)
 800a214:	4c0b      	ldr	r4, [pc, #44]	; (800a244 <global_stdio_init.part.0+0x34>)
 800a216:	4a0c      	ldr	r2, [pc, #48]	; (800a248 <global_stdio_init.part.0+0x38>)
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	4620      	mov	r0, r4
 800a21c:	2200      	movs	r2, #0
 800a21e:	2104      	movs	r1, #4
 800a220:	f7ff ff94 	bl	800a14c <std>
 800a224:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a228:	2201      	movs	r2, #1
 800a22a:	2109      	movs	r1, #9
 800a22c:	f7ff ff8e 	bl	800a14c <std>
 800a230:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a234:	2202      	movs	r2, #2
 800a236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a23a:	2112      	movs	r1, #18
 800a23c:	f7ff bf86 	b.w	800a14c <std>
 800a240:	20014998 	.word	0x20014998
 800a244:	20014860 	.word	0x20014860
 800a248:	0800a1b9 	.word	0x0800a1b9

0800a24c <__sfp_lock_acquire>:
 800a24c:	4801      	ldr	r0, [pc, #4]	; (800a254 <__sfp_lock_acquire+0x8>)
 800a24e:	f000 b91e 	b.w	800a48e <__retarget_lock_acquire_recursive>
 800a252:	bf00      	nop
 800a254:	200149a1 	.word	0x200149a1

0800a258 <__sfp_lock_release>:
 800a258:	4801      	ldr	r0, [pc, #4]	; (800a260 <__sfp_lock_release+0x8>)
 800a25a:	f000 b919 	b.w	800a490 <__retarget_lock_release_recursive>
 800a25e:	bf00      	nop
 800a260:	200149a1 	.word	0x200149a1

0800a264 <__sinit>:
 800a264:	b510      	push	{r4, lr}
 800a266:	4604      	mov	r4, r0
 800a268:	f7ff fff0 	bl	800a24c <__sfp_lock_acquire>
 800a26c:	6a23      	ldr	r3, [r4, #32]
 800a26e:	b11b      	cbz	r3, 800a278 <__sinit+0x14>
 800a270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a274:	f7ff bff0 	b.w	800a258 <__sfp_lock_release>
 800a278:	4b04      	ldr	r3, [pc, #16]	; (800a28c <__sinit+0x28>)
 800a27a:	6223      	str	r3, [r4, #32]
 800a27c:	4b04      	ldr	r3, [pc, #16]	; (800a290 <__sinit+0x2c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1f5      	bne.n	800a270 <__sinit+0xc>
 800a284:	f7ff ffc4 	bl	800a210 <global_stdio_init.part.0>
 800a288:	e7f2      	b.n	800a270 <__sinit+0xc>
 800a28a:	bf00      	nop
 800a28c:	0800a1d1 	.word	0x0800a1d1
 800a290:	20014998 	.word	0x20014998

0800a294 <_fwalk_sglue>:
 800a294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a298:	4607      	mov	r7, r0
 800a29a:	4688      	mov	r8, r1
 800a29c:	4614      	mov	r4, r2
 800a29e:	2600      	movs	r6, #0
 800a2a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2a4:	f1b9 0901 	subs.w	r9, r9, #1
 800a2a8:	d505      	bpl.n	800a2b6 <_fwalk_sglue+0x22>
 800a2aa:	6824      	ldr	r4, [r4, #0]
 800a2ac:	2c00      	cmp	r4, #0
 800a2ae:	d1f7      	bne.n	800a2a0 <_fwalk_sglue+0xc>
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b6:	89ab      	ldrh	r3, [r5, #12]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d907      	bls.n	800a2cc <_fwalk_sglue+0x38>
 800a2bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	d003      	beq.n	800a2cc <_fwalk_sglue+0x38>
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	47c0      	blx	r8
 800a2ca:	4306      	orrs	r6, r0
 800a2cc:	3568      	adds	r5, #104	; 0x68
 800a2ce:	e7e9      	b.n	800a2a4 <_fwalk_sglue+0x10>

0800a2d0 <siprintf>:
 800a2d0:	b40e      	push	{r1, r2, r3}
 800a2d2:	b500      	push	{lr}
 800a2d4:	b09c      	sub	sp, #112	; 0x70
 800a2d6:	ab1d      	add	r3, sp, #116	; 0x74
 800a2d8:	9002      	str	r0, [sp, #8]
 800a2da:	9006      	str	r0, [sp, #24]
 800a2dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2e0:	4809      	ldr	r0, [pc, #36]	; (800a308 <siprintf+0x38>)
 800a2e2:	9107      	str	r1, [sp, #28]
 800a2e4:	9104      	str	r1, [sp, #16]
 800a2e6:	4909      	ldr	r1, [pc, #36]	; (800a30c <siprintf+0x3c>)
 800a2e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ec:	9105      	str	r1, [sp, #20]
 800a2ee:	6800      	ldr	r0, [r0, #0]
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	a902      	add	r1, sp, #8
 800a2f4:	f002 fbfc 	bl	800caf0 <_svfiprintf_r>
 800a2f8:	9b02      	ldr	r3, [sp, #8]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	701a      	strb	r2, [r3, #0]
 800a2fe:	b01c      	add	sp, #112	; 0x70
 800a300:	f85d eb04 	ldr.w	lr, [sp], #4
 800a304:	b003      	add	sp, #12
 800a306:	4770      	bx	lr
 800a308:	20000078 	.word	0x20000078
 800a30c:	ffff0208 	.word	0xffff0208

0800a310 <__sread>:
 800a310:	b510      	push	{r4, lr}
 800a312:	460c      	mov	r4, r1
 800a314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a318:	f000 f87c 	bl	800a414 <_read_r>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	bfab      	itete	ge
 800a320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a322:	89a3      	ldrhlt	r3, [r4, #12]
 800a324:	181b      	addge	r3, r3, r0
 800a326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a32a:	bfac      	ite	ge
 800a32c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a32e:	81a3      	strhlt	r3, [r4, #12]
 800a330:	bd10      	pop	{r4, pc}

0800a332 <__swrite>:
 800a332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a336:	461f      	mov	r7, r3
 800a338:	898b      	ldrh	r3, [r1, #12]
 800a33a:	05db      	lsls	r3, r3, #23
 800a33c:	4605      	mov	r5, r0
 800a33e:	460c      	mov	r4, r1
 800a340:	4616      	mov	r6, r2
 800a342:	d505      	bpl.n	800a350 <__swrite+0x1e>
 800a344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a348:	2302      	movs	r3, #2
 800a34a:	2200      	movs	r2, #0
 800a34c:	f000 f850 	bl	800a3f0 <_lseek_r>
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	4632      	mov	r2, r6
 800a35e:	463b      	mov	r3, r7
 800a360:	4628      	mov	r0, r5
 800a362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a366:	f7ff b869 	b.w	800943c <_write_r>

0800a36a <__sseek>:
 800a36a:	b510      	push	{r4, lr}
 800a36c:	460c      	mov	r4, r1
 800a36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a372:	f000 f83d 	bl	800a3f0 <_lseek_r>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	bf15      	itete	ne
 800a37c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a37e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a386:	81a3      	strheq	r3, [r4, #12]
 800a388:	bf18      	it	ne
 800a38a:	81a3      	strhne	r3, [r4, #12]
 800a38c:	bd10      	pop	{r4, pc}

0800a38e <__sclose>:
 800a38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a392:	f000 b81d 	b.w	800a3d0 <_close_r>

0800a396 <memcmp>:
 800a396:	b510      	push	{r4, lr}
 800a398:	3901      	subs	r1, #1
 800a39a:	4402      	add	r2, r0
 800a39c:	4290      	cmp	r0, r2
 800a39e:	d101      	bne.n	800a3a4 <memcmp+0xe>
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	e005      	b.n	800a3b0 <memcmp+0x1a>
 800a3a4:	7803      	ldrb	r3, [r0, #0]
 800a3a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a3aa:	42a3      	cmp	r3, r4
 800a3ac:	d001      	beq.n	800a3b2 <memcmp+0x1c>
 800a3ae:	1b18      	subs	r0, r3, r4
 800a3b0:	bd10      	pop	{r4, pc}
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	e7f2      	b.n	800a39c <memcmp+0x6>

0800a3b6 <memset>:
 800a3b6:	4402      	add	r2, r0
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d100      	bne.n	800a3c0 <memset+0xa>
 800a3be:	4770      	bx	lr
 800a3c0:	f803 1b01 	strb.w	r1, [r3], #1
 800a3c4:	e7f9      	b.n	800a3ba <memset+0x4>
	...

0800a3c8 <_localeconv_r>:
 800a3c8:	4800      	ldr	r0, [pc, #0]	; (800a3cc <_localeconv_r+0x4>)
 800a3ca:	4770      	bx	lr
 800a3cc:	2000016c 	.word	0x2000016c

0800a3d0 <_close_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d06      	ldr	r5, [pc, #24]	; (800a3ec <_close_r+0x1c>)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	4608      	mov	r0, r1
 800a3da:	602b      	str	r3, [r5, #0]
 800a3dc:	f7f7 fee7 	bl	80021ae <_close>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d102      	bne.n	800a3ea <_close_r+0x1a>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <_close_r+0x1a>
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	2001499c 	.word	0x2001499c

0800a3f0 <_lseek_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4d07      	ldr	r5, [pc, #28]	; (800a410 <_lseek_r+0x20>)
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	4608      	mov	r0, r1
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	602a      	str	r2, [r5, #0]
 800a3fe:	461a      	mov	r2, r3
 800a400:	f7f7 fefc 	bl	80021fc <_lseek>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d102      	bne.n	800a40e <_lseek_r+0x1e>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	b103      	cbz	r3, 800a40e <_lseek_r+0x1e>
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	2001499c 	.word	0x2001499c

0800a414 <_read_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4d07      	ldr	r5, [pc, #28]	; (800a434 <_read_r+0x20>)
 800a418:	4604      	mov	r4, r0
 800a41a:	4608      	mov	r0, r1
 800a41c:	4611      	mov	r1, r2
 800a41e:	2200      	movs	r2, #0
 800a420:	602a      	str	r2, [r5, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	f7f7 fea6 	bl	8002174 <_read>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_read_r+0x1e>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_read_r+0x1e>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	2001499c 	.word	0x2001499c

0800a438 <__errno>:
 800a438:	4b01      	ldr	r3, [pc, #4]	; (800a440 <__errno+0x8>)
 800a43a:	6818      	ldr	r0, [r3, #0]
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	20000078 	.word	0x20000078

0800a444 <__libc_init_array>:
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	4d0d      	ldr	r5, [pc, #52]	; (800a47c <__libc_init_array+0x38>)
 800a448:	4c0d      	ldr	r4, [pc, #52]	; (800a480 <__libc_init_array+0x3c>)
 800a44a:	1b64      	subs	r4, r4, r5
 800a44c:	10a4      	asrs	r4, r4, #2
 800a44e:	2600      	movs	r6, #0
 800a450:	42a6      	cmp	r6, r4
 800a452:	d109      	bne.n	800a468 <__libc_init_array+0x24>
 800a454:	4d0b      	ldr	r5, [pc, #44]	; (800a484 <__libc_init_array+0x40>)
 800a456:	4c0c      	ldr	r4, [pc, #48]	; (800a488 <__libc_init_array+0x44>)
 800a458:	f003 fdd0 	bl	800dffc <_init>
 800a45c:	1b64      	subs	r4, r4, r5
 800a45e:	10a4      	asrs	r4, r4, #2
 800a460:	2600      	movs	r6, #0
 800a462:	42a6      	cmp	r6, r4
 800a464:	d105      	bne.n	800a472 <__libc_init_array+0x2e>
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46c:	4798      	blx	r3
 800a46e:	3601      	adds	r6, #1
 800a470:	e7ee      	b.n	800a450 <__libc_init_array+0xc>
 800a472:	f855 3b04 	ldr.w	r3, [r5], #4
 800a476:	4798      	blx	r3
 800a478:	3601      	adds	r6, #1
 800a47a:	e7f2      	b.n	800a462 <__libc_init_array+0x1e>
 800a47c:	0800e5f8 	.word	0x0800e5f8
 800a480:	0800e5f8 	.word	0x0800e5f8
 800a484:	0800e5f8 	.word	0x0800e5f8
 800a488:	0800e5fc 	.word	0x0800e5fc

0800a48c <__retarget_lock_init_recursive>:
 800a48c:	4770      	bx	lr

0800a48e <__retarget_lock_acquire_recursive>:
 800a48e:	4770      	bx	lr

0800a490 <__retarget_lock_release_recursive>:
 800a490:	4770      	bx	lr

0800a492 <memcpy>:
 800a492:	440a      	add	r2, r1
 800a494:	4291      	cmp	r1, r2
 800a496:	f100 33ff 	add.w	r3, r0, #4294967295
 800a49a:	d100      	bne.n	800a49e <memcpy+0xc>
 800a49c:	4770      	bx	lr
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4a8:	4291      	cmp	r1, r2
 800a4aa:	d1f9      	bne.n	800a4a0 <memcpy+0xe>
 800a4ac:	bd10      	pop	{r4, pc}
	...

0800a4b0 <nanf>:
 800a4b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a4b8 <nanf+0x8>
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	7fc00000 	.word	0x7fc00000

0800a4bc <quorem>:
 800a4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	6903      	ldr	r3, [r0, #16]
 800a4c2:	690c      	ldr	r4, [r1, #16]
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	db7e      	blt.n	800a5c8 <quorem+0x10c>
 800a4ca:	3c01      	subs	r4, #1
 800a4cc:	f101 0814 	add.w	r8, r1, #20
 800a4d0:	f100 0514 	add.w	r5, r0, #20
 800a4d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4ee:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4f2:	d331      	bcc.n	800a558 <quorem+0x9c>
 800a4f4:	f04f 0e00 	mov.w	lr, #0
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	46ac      	mov	ip, r5
 800a4fc:	46f2      	mov	sl, lr
 800a4fe:	f850 2b04 	ldr.w	r2, [r0], #4
 800a502:	b293      	uxth	r3, r2
 800a504:	fb06 e303 	mla	r3, r6, r3, lr
 800a508:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a50c:	0c1a      	lsrs	r2, r3, #16
 800a50e:	b29b      	uxth	r3, r3
 800a510:	ebaa 0303 	sub.w	r3, sl, r3
 800a514:	f8dc a000 	ldr.w	sl, [ip]
 800a518:	fa13 f38a 	uxtah	r3, r3, sl
 800a51c:	fb06 220e 	mla	r2, r6, lr, r2
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	9b00      	ldr	r3, [sp, #0]
 800a524:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a528:	b292      	uxth	r2, r2
 800a52a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a52e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a532:	f8bd 3000 	ldrh.w	r3, [sp]
 800a536:	4581      	cmp	r9, r0
 800a538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a53c:	f84c 3b04 	str.w	r3, [ip], #4
 800a540:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a544:	d2db      	bcs.n	800a4fe <quorem+0x42>
 800a546:	f855 300b 	ldr.w	r3, [r5, fp]
 800a54a:	b92b      	cbnz	r3, 800a558 <quorem+0x9c>
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	3b04      	subs	r3, #4
 800a550:	429d      	cmp	r5, r3
 800a552:	461a      	mov	r2, r3
 800a554:	d32c      	bcc.n	800a5b0 <quorem+0xf4>
 800a556:	613c      	str	r4, [r7, #16]
 800a558:	4638      	mov	r0, r7
 800a55a:	f001 f9f1 	bl	800b940 <__mcmp>
 800a55e:	2800      	cmp	r0, #0
 800a560:	db22      	blt.n	800a5a8 <quorem+0xec>
 800a562:	3601      	adds	r6, #1
 800a564:	4629      	mov	r1, r5
 800a566:	2000      	movs	r0, #0
 800a568:	f858 2b04 	ldr.w	r2, [r8], #4
 800a56c:	f8d1 c000 	ldr.w	ip, [r1]
 800a570:	b293      	uxth	r3, r2
 800a572:	1ac3      	subs	r3, r0, r3
 800a574:	0c12      	lsrs	r2, r2, #16
 800a576:	fa13 f38c 	uxtah	r3, r3, ip
 800a57a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a57e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a582:	b29b      	uxth	r3, r3
 800a584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a588:	45c1      	cmp	r9, r8
 800a58a:	f841 3b04 	str.w	r3, [r1], #4
 800a58e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a592:	d2e9      	bcs.n	800a568 <quorem+0xac>
 800a594:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a598:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a59c:	b922      	cbnz	r2, 800a5a8 <quorem+0xec>
 800a59e:	3b04      	subs	r3, #4
 800a5a0:	429d      	cmp	r5, r3
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	d30a      	bcc.n	800a5bc <quorem+0x100>
 800a5a6:	613c      	str	r4, [r7, #16]
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	b003      	add	sp, #12
 800a5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b0:	6812      	ldr	r2, [r2, #0]
 800a5b2:	3b04      	subs	r3, #4
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	d1ce      	bne.n	800a556 <quorem+0x9a>
 800a5b8:	3c01      	subs	r4, #1
 800a5ba:	e7c9      	b.n	800a550 <quorem+0x94>
 800a5bc:	6812      	ldr	r2, [r2, #0]
 800a5be:	3b04      	subs	r3, #4
 800a5c0:	2a00      	cmp	r2, #0
 800a5c2:	d1f0      	bne.n	800a5a6 <quorem+0xea>
 800a5c4:	3c01      	subs	r4, #1
 800a5c6:	e7eb      	b.n	800a5a0 <quorem+0xe4>
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e7ee      	b.n	800a5aa <quorem+0xee>
 800a5cc:	0000      	movs	r0, r0
	...

0800a5d0 <_dtoa_r>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	ed2d 8b04 	vpush	{d8-d9}
 800a5d8:	69c5      	ldr	r5, [r0, #28]
 800a5da:	b093      	sub	sp, #76	; 0x4c
 800a5dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a5e0:	ec57 6b10 	vmov	r6, r7, d0
 800a5e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5e8:	9107      	str	r1, [sp, #28]
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	920a      	str	r2, [sp, #40]	; 0x28
 800a5ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a5f0:	b975      	cbnz	r5, 800a610 <_dtoa_r+0x40>
 800a5f2:	2010      	movs	r0, #16
 800a5f4:	f000 fe2a 	bl	800b24c <malloc>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	61e0      	str	r0, [r4, #28]
 800a5fc:	b920      	cbnz	r0, 800a608 <_dtoa_r+0x38>
 800a5fe:	4bae      	ldr	r3, [pc, #696]	; (800a8b8 <_dtoa_r+0x2e8>)
 800a600:	21ef      	movs	r1, #239	; 0xef
 800a602:	48ae      	ldr	r0, [pc, #696]	; (800a8bc <_dtoa_r+0x2ec>)
 800a604:	f002 fc64 	bl	800ced0 <__assert_func>
 800a608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a60c:	6005      	str	r5, [r0, #0]
 800a60e:	60c5      	str	r5, [r0, #12]
 800a610:	69e3      	ldr	r3, [r4, #28]
 800a612:	6819      	ldr	r1, [r3, #0]
 800a614:	b151      	cbz	r1, 800a62c <_dtoa_r+0x5c>
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	604a      	str	r2, [r1, #4]
 800a61a:	2301      	movs	r3, #1
 800a61c:	4093      	lsls	r3, r2
 800a61e:	608b      	str	r3, [r1, #8]
 800a620:	4620      	mov	r0, r4
 800a622:	f000 ff07 	bl	800b434 <_Bfree>
 800a626:	69e3      	ldr	r3, [r4, #28]
 800a628:	2200      	movs	r2, #0
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	1e3b      	subs	r3, r7, #0
 800a62e:	bfbb      	ittet	lt
 800a630:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a634:	9303      	strlt	r3, [sp, #12]
 800a636:	2300      	movge	r3, #0
 800a638:	2201      	movlt	r2, #1
 800a63a:	bfac      	ite	ge
 800a63c:	f8c8 3000 	strge.w	r3, [r8]
 800a640:	f8c8 2000 	strlt.w	r2, [r8]
 800a644:	4b9e      	ldr	r3, [pc, #632]	; (800a8c0 <_dtoa_r+0x2f0>)
 800a646:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a64a:	ea33 0308 	bics.w	r3, r3, r8
 800a64e:	d11b      	bne.n	800a688 <_dtoa_r+0xb8>
 800a650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a652:	f242 730f 	movw	r3, #9999	; 0x270f
 800a656:	6013      	str	r3, [r2, #0]
 800a658:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a65c:	4333      	orrs	r3, r6
 800a65e:	f000 8593 	beq.w	800b188 <_dtoa_r+0xbb8>
 800a662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a664:	b963      	cbnz	r3, 800a680 <_dtoa_r+0xb0>
 800a666:	4b97      	ldr	r3, [pc, #604]	; (800a8c4 <_dtoa_r+0x2f4>)
 800a668:	e027      	b.n	800a6ba <_dtoa_r+0xea>
 800a66a:	4b97      	ldr	r3, [pc, #604]	; (800a8c8 <_dtoa_r+0x2f8>)
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	3308      	adds	r3, #8
 800a670:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	9800      	ldr	r0, [sp, #0]
 800a676:	b013      	add	sp, #76	; 0x4c
 800a678:	ecbd 8b04 	vpop	{d8-d9}
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	4b90      	ldr	r3, [pc, #576]	; (800a8c4 <_dtoa_r+0x2f4>)
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	3303      	adds	r3, #3
 800a686:	e7f3      	b.n	800a670 <_dtoa_r+0xa0>
 800a688:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a68c:	2200      	movs	r2, #0
 800a68e:	ec51 0b17 	vmov	r0, r1, d7
 800a692:	eeb0 8a47 	vmov.f32	s16, s14
 800a696:	eef0 8a67 	vmov.f32	s17, s15
 800a69a:	2300      	movs	r3, #0
 800a69c:	f7f6 fa64 	bl	8000b68 <__aeabi_dcmpeq>
 800a6a0:	4681      	mov	r9, r0
 800a6a2:	b160      	cbz	r0, 800a6be <_dtoa_r+0xee>
 800a6a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	6013      	str	r3, [r2, #0]
 800a6aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 8568 	beq.w	800b182 <_dtoa_r+0xbb2>
 800a6b2:	4b86      	ldr	r3, [pc, #536]	; (800a8cc <_dtoa_r+0x2fc>)
 800a6b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a6b6:	6013      	str	r3, [r2, #0]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	e7da      	b.n	800a674 <_dtoa_r+0xa4>
 800a6be:	aa10      	add	r2, sp, #64	; 0x40
 800a6c0:	a911      	add	r1, sp, #68	; 0x44
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	eeb0 0a48 	vmov.f32	s0, s16
 800a6c8:	eef0 0a68 	vmov.f32	s1, s17
 800a6cc:	f001 fa4e 	bl	800bb6c <__d2b>
 800a6d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	d07f      	beq.n	800a7da <_dtoa_r+0x20a>
 800a6da:	ee18 3a90 	vmov	r3, s17
 800a6de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a6e6:	ec51 0b18 	vmov	r0, r1, d8
 800a6ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a6ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	4b75      	ldr	r3, [pc, #468]	; (800a8d0 <_dtoa_r+0x300>)
 800a6fc:	f7f5 fe14 	bl	8000328 <__aeabi_dsub>
 800a700:	a367      	add	r3, pc, #412	; (adr r3, 800a8a0 <_dtoa_r+0x2d0>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f7f5 ffc7 	bl	8000698 <__aeabi_dmul>
 800a70a:	a367      	add	r3, pc, #412	; (adr r3, 800a8a8 <_dtoa_r+0x2d8>)
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	f7f5 fe0c 	bl	800032c <__adddf3>
 800a714:	4606      	mov	r6, r0
 800a716:	4628      	mov	r0, r5
 800a718:	460f      	mov	r7, r1
 800a71a:	f7f5 ff53 	bl	80005c4 <__aeabi_i2d>
 800a71e:	a364      	add	r3, pc, #400	; (adr r3, 800a8b0 <_dtoa_r+0x2e0>)
 800a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a724:	f7f5 ffb8 	bl	8000698 <__aeabi_dmul>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4630      	mov	r0, r6
 800a72e:	4639      	mov	r1, r7
 800a730:	f7f5 fdfc 	bl	800032c <__adddf3>
 800a734:	4606      	mov	r6, r0
 800a736:	460f      	mov	r7, r1
 800a738:	f7f6 fa5e 	bl	8000bf8 <__aeabi_d2iz>
 800a73c:	2200      	movs	r2, #0
 800a73e:	4683      	mov	fp, r0
 800a740:	2300      	movs	r3, #0
 800a742:	4630      	mov	r0, r6
 800a744:	4639      	mov	r1, r7
 800a746:	f7f6 fa19 	bl	8000b7c <__aeabi_dcmplt>
 800a74a:	b148      	cbz	r0, 800a760 <_dtoa_r+0x190>
 800a74c:	4658      	mov	r0, fp
 800a74e:	f7f5 ff39 	bl	80005c4 <__aeabi_i2d>
 800a752:	4632      	mov	r2, r6
 800a754:	463b      	mov	r3, r7
 800a756:	f7f6 fa07 	bl	8000b68 <__aeabi_dcmpeq>
 800a75a:	b908      	cbnz	r0, 800a760 <_dtoa_r+0x190>
 800a75c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a760:	f1bb 0f16 	cmp.w	fp, #22
 800a764:	d857      	bhi.n	800a816 <_dtoa_r+0x246>
 800a766:	4b5b      	ldr	r3, [pc, #364]	; (800a8d4 <_dtoa_r+0x304>)
 800a768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	ec51 0b18 	vmov	r0, r1, d8
 800a774:	f7f6 fa02 	bl	8000b7c <__aeabi_dcmplt>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d04e      	beq.n	800a81a <_dtoa_r+0x24a>
 800a77c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a780:	2300      	movs	r3, #0
 800a782:	930c      	str	r3, [sp, #48]	; 0x30
 800a784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a786:	1b5b      	subs	r3, r3, r5
 800a788:	1e5a      	subs	r2, r3, #1
 800a78a:	bf45      	ittet	mi
 800a78c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a790:	9305      	strmi	r3, [sp, #20]
 800a792:	2300      	movpl	r3, #0
 800a794:	2300      	movmi	r3, #0
 800a796:	9206      	str	r2, [sp, #24]
 800a798:	bf54      	ite	pl
 800a79a:	9305      	strpl	r3, [sp, #20]
 800a79c:	9306      	strmi	r3, [sp, #24]
 800a79e:	f1bb 0f00 	cmp.w	fp, #0
 800a7a2:	db3c      	blt.n	800a81e <_dtoa_r+0x24e>
 800a7a4:	9b06      	ldr	r3, [sp, #24]
 800a7a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a7aa:	445b      	add	r3, fp
 800a7ac:	9306      	str	r3, [sp, #24]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	9308      	str	r3, [sp, #32]
 800a7b2:	9b07      	ldr	r3, [sp, #28]
 800a7b4:	2b09      	cmp	r3, #9
 800a7b6:	d868      	bhi.n	800a88a <_dtoa_r+0x2ba>
 800a7b8:	2b05      	cmp	r3, #5
 800a7ba:	bfc4      	itt	gt
 800a7bc:	3b04      	subgt	r3, #4
 800a7be:	9307      	strgt	r3, [sp, #28]
 800a7c0:	9b07      	ldr	r3, [sp, #28]
 800a7c2:	f1a3 0302 	sub.w	r3, r3, #2
 800a7c6:	bfcc      	ite	gt
 800a7c8:	2500      	movgt	r5, #0
 800a7ca:	2501      	movle	r5, #1
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	f200 8085 	bhi.w	800a8dc <_dtoa_r+0x30c>
 800a7d2:	e8df f003 	tbb	[pc, r3]
 800a7d6:	3b2e      	.short	0x3b2e
 800a7d8:	5839      	.short	0x5839
 800a7da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7de:	441d      	add	r5, r3
 800a7e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7e4:	2b20      	cmp	r3, #32
 800a7e6:	bfc1      	itttt	gt
 800a7e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800a7f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a7f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a7f8:	bfd6      	itet	le
 800a7fa:	f1c3 0320 	rsble	r3, r3, #32
 800a7fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800a802:	fa06 f003 	lslle.w	r0, r6, r3
 800a806:	f7f5 fecd 	bl	80005a4 <__aeabi_ui2d>
 800a80a:	2201      	movs	r2, #1
 800a80c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a810:	3d01      	subs	r5, #1
 800a812:	920e      	str	r2, [sp, #56]	; 0x38
 800a814:	e76f      	b.n	800a6f6 <_dtoa_r+0x126>
 800a816:	2301      	movs	r3, #1
 800a818:	e7b3      	b.n	800a782 <_dtoa_r+0x1b2>
 800a81a:	900c      	str	r0, [sp, #48]	; 0x30
 800a81c:	e7b2      	b.n	800a784 <_dtoa_r+0x1b4>
 800a81e:	9b05      	ldr	r3, [sp, #20]
 800a820:	eba3 030b 	sub.w	r3, r3, fp
 800a824:	9305      	str	r3, [sp, #20]
 800a826:	f1cb 0300 	rsb	r3, fp, #0
 800a82a:	9308      	str	r3, [sp, #32]
 800a82c:	2300      	movs	r3, #0
 800a82e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a830:	e7bf      	b.n	800a7b2 <_dtoa_r+0x1e2>
 800a832:	2300      	movs	r3, #0
 800a834:	9309      	str	r3, [sp, #36]	; 0x24
 800a836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a838:	2b00      	cmp	r3, #0
 800a83a:	dc52      	bgt.n	800a8e2 <_dtoa_r+0x312>
 800a83c:	2301      	movs	r3, #1
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	9304      	str	r3, [sp, #16]
 800a842:	461a      	mov	r2, r3
 800a844:	920a      	str	r2, [sp, #40]	; 0x28
 800a846:	e00b      	b.n	800a860 <_dtoa_r+0x290>
 800a848:	2301      	movs	r3, #1
 800a84a:	e7f3      	b.n	800a834 <_dtoa_r+0x264>
 800a84c:	2300      	movs	r3, #0
 800a84e:	9309      	str	r3, [sp, #36]	; 0x24
 800a850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a852:	445b      	add	r3, fp
 800a854:	9301      	str	r3, [sp, #4]
 800a856:	3301      	adds	r3, #1
 800a858:	2b01      	cmp	r3, #1
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	bfb8      	it	lt
 800a85e:	2301      	movlt	r3, #1
 800a860:	69e0      	ldr	r0, [r4, #28]
 800a862:	2100      	movs	r1, #0
 800a864:	2204      	movs	r2, #4
 800a866:	f102 0614 	add.w	r6, r2, #20
 800a86a:	429e      	cmp	r6, r3
 800a86c:	d93d      	bls.n	800a8ea <_dtoa_r+0x31a>
 800a86e:	6041      	str	r1, [r0, #4]
 800a870:	4620      	mov	r0, r4
 800a872:	f000 fd9f 	bl	800b3b4 <_Balloc>
 800a876:	9000      	str	r0, [sp, #0]
 800a878:	2800      	cmp	r0, #0
 800a87a:	d139      	bne.n	800a8f0 <_dtoa_r+0x320>
 800a87c:	4b16      	ldr	r3, [pc, #88]	; (800a8d8 <_dtoa_r+0x308>)
 800a87e:	4602      	mov	r2, r0
 800a880:	f240 11af 	movw	r1, #431	; 0x1af
 800a884:	e6bd      	b.n	800a602 <_dtoa_r+0x32>
 800a886:	2301      	movs	r3, #1
 800a888:	e7e1      	b.n	800a84e <_dtoa_r+0x27e>
 800a88a:	2501      	movs	r5, #1
 800a88c:	2300      	movs	r3, #0
 800a88e:	9307      	str	r3, [sp, #28]
 800a890:	9509      	str	r5, [sp, #36]	; 0x24
 800a892:	f04f 33ff 	mov.w	r3, #4294967295
 800a896:	9301      	str	r3, [sp, #4]
 800a898:	9304      	str	r3, [sp, #16]
 800a89a:	2200      	movs	r2, #0
 800a89c:	2312      	movs	r3, #18
 800a89e:	e7d1      	b.n	800a844 <_dtoa_r+0x274>
 800a8a0:	636f4361 	.word	0x636f4361
 800a8a4:	3fd287a7 	.word	0x3fd287a7
 800a8a8:	8b60c8b3 	.word	0x8b60c8b3
 800a8ac:	3fc68a28 	.word	0x3fc68a28
 800a8b0:	509f79fb 	.word	0x509f79fb
 800a8b4:	3fd34413 	.word	0x3fd34413
 800a8b8:	0800e208 	.word	0x0800e208
 800a8bc:	0800e21f 	.word	0x0800e21f
 800a8c0:	7ff00000 	.word	0x7ff00000
 800a8c4:	0800e204 	.word	0x0800e204
 800a8c8:	0800e1fb 	.word	0x0800e1fb
 800a8cc:	0800e1d3 	.word	0x0800e1d3
 800a8d0:	3ff80000 	.word	0x3ff80000
 800a8d4:	0800e310 	.word	0x0800e310
 800a8d8:	0800e277 	.word	0x0800e277
 800a8dc:	2301      	movs	r3, #1
 800a8de:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e0:	e7d7      	b.n	800a892 <_dtoa_r+0x2c2>
 800a8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	e7ba      	b.n	800a860 <_dtoa_r+0x290>
 800a8ea:	3101      	adds	r1, #1
 800a8ec:	0052      	lsls	r2, r2, #1
 800a8ee:	e7ba      	b.n	800a866 <_dtoa_r+0x296>
 800a8f0:	69e3      	ldr	r3, [r4, #28]
 800a8f2:	9a00      	ldr	r2, [sp, #0]
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	9b04      	ldr	r3, [sp, #16]
 800a8f8:	2b0e      	cmp	r3, #14
 800a8fa:	f200 80a8 	bhi.w	800aa4e <_dtoa_r+0x47e>
 800a8fe:	2d00      	cmp	r5, #0
 800a900:	f000 80a5 	beq.w	800aa4e <_dtoa_r+0x47e>
 800a904:	f1bb 0f00 	cmp.w	fp, #0
 800a908:	dd38      	ble.n	800a97c <_dtoa_r+0x3ac>
 800a90a:	4bc0      	ldr	r3, [pc, #768]	; (800ac0c <_dtoa_r+0x63c>)
 800a90c:	f00b 020f 	and.w	r2, fp, #15
 800a910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a914:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a918:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a91c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a920:	d019      	beq.n	800a956 <_dtoa_r+0x386>
 800a922:	4bbb      	ldr	r3, [pc, #748]	; (800ac10 <_dtoa_r+0x640>)
 800a924:	ec51 0b18 	vmov	r0, r1, d8
 800a928:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a92c:	f7f5 ffde 	bl	80008ec <__aeabi_ddiv>
 800a930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a934:	f008 080f 	and.w	r8, r8, #15
 800a938:	2503      	movs	r5, #3
 800a93a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ac10 <_dtoa_r+0x640>
 800a93e:	f1b8 0f00 	cmp.w	r8, #0
 800a942:	d10a      	bne.n	800a95a <_dtoa_r+0x38a>
 800a944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a948:	4632      	mov	r2, r6
 800a94a:	463b      	mov	r3, r7
 800a94c:	f7f5 ffce 	bl	80008ec <__aeabi_ddiv>
 800a950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a954:	e02b      	b.n	800a9ae <_dtoa_r+0x3de>
 800a956:	2502      	movs	r5, #2
 800a958:	e7ef      	b.n	800a93a <_dtoa_r+0x36a>
 800a95a:	f018 0f01 	tst.w	r8, #1
 800a95e:	d008      	beq.n	800a972 <_dtoa_r+0x3a2>
 800a960:	4630      	mov	r0, r6
 800a962:	4639      	mov	r1, r7
 800a964:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a968:	f7f5 fe96 	bl	8000698 <__aeabi_dmul>
 800a96c:	3501      	adds	r5, #1
 800a96e:	4606      	mov	r6, r0
 800a970:	460f      	mov	r7, r1
 800a972:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a976:	f109 0908 	add.w	r9, r9, #8
 800a97a:	e7e0      	b.n	800a93e <_dtoa_r+0x36e>
 800a97c:	f000 809f 	beq.w	800aabe <_dtoa_r+0x4ee>
 800a980:	f1cb 0600 	rsb	r6, fp, #0
 800a984:	4ba1      	ldr	r3, [pc, #644]	; (800ac0c <_dtoa_r+0x63c>)
 800a986:	4fa2      	ldr	r7, [pc, #648]	; (800ac10 <_dtoa_r+0x640>)
 800a988:	f006 020f 	and.w	r2, r6, #15
 800a98c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	ec51 0b18 	vmov	r0, r1, d8
 800a998:	f7f5 fe7e 	bl	8000698 <__aeabi_dmul>
 800a99c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9a0:	1136      	asrs	r6, r6, #4
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	2502      	movs	r5, #2
 800a9a6:	2e00      	cmp	r6, #0
 800a9a8:	d17e      	bne.n	800aaa8 <_dtoa_r+0x4d8>
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1d0      	bne.n	800a950 <_dtoa_r+0x380>
 800a9ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 8084 	beq.w	800aac2 <_dtoa_r+0x4f2>
 800a9ba:	4b96      	ldr	r3, [pc, #600]	; (800ac14 <_dtoa_r+0x644>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f6 f8db 	bl	8000b7c <__aeabi_dcmplt>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d07b      	beq.n	800aac2 <_dtoa_r+0x4f2>
 800a9ca:	9b04      	ldr	r3, [sp, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d078      	beq.n	800aac2 <_dtoa_r+0x4f2>
 800a9d0:	9b01      	ldr	r3, [sp, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dd39      	ble.n	800aa4a <_dtoa_r+0x47a>
 800a9d6:	4b90      	ldr	r3, [pc, #576]	; (800ac18 <_dtoa_r+0x648>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4640      	mov	r0, r8
 800a9dc:	4649      	mov	r1, r9
 800a9de:	f7f5 fe5b 	bl	8000698 <__aeabi_dmul>
 800a9e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e6:	9e01      	ldr	r6, [sp, #4]
 800a9e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a9ec:	3501      	adds	r5, #1
 800a9ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f7f5 fde6 	bl	80005c4 <__aeabi_i2d>
 800a9f8:	4642      	mov	r2, r8
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	f7f5 fe4c 	bl	8000698 <__aeabi_dmul>
 800aa00:	4b86      	ldr	r3, [pc, #536]	; (800ac1c <_dtoa_r+0x64c>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	f7f5 fc92 	bl	800032c <__adddf3>
 800aa08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aa0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa10:	9303      	str	r3, [sp, #12]
 800aa12:	2e00      	cmp	r6, #0
 800aa14:	d158      	bne.n	800aac8 <_dtoa_r+0x4f8>
 800aa16:	4b82      	ldr	r3, [pc, #520]	; (800ac20 <_dtoa_r+0x650>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	4640      	mov	r0, r8
 800aa1c:	4649      	mov	r1, r9
 800aa1e:	f7f5 fc83 	bl	8000328 <__aeabi_dsub>
 800aa22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa26:	4680      	mov	r8, r0
 800aa28:	4689      	mov	r9, r1
 800aa2a:	f7f6 f8c5 	bl	8000bb8 <__aeabi_dcmpgt>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	f040 8296 	bne.w	800af60 <_dtoa_r+0x990>
 800aa34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aa38:	4640      	mov	r0, r8
 800aa3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa3e:	4649      	mov	r1, r9
 800aa40:	f7f6 f89c 	bl	8000b7c <__aeabi_dcmplt>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	f040 8289 	bne.w	800af5c <_dtoa_r+0x98c>
 800aa4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aa4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f2c0 814e 	blt.w	800acf2 <_dtoa_r+0x722>
 800aa56:	f1bb 0f0e 	cmp.w	fp, #14
 800aa5a:	f300 814a 	bgt.w	800acf2 <_dtoa_r+0x722>
 800aa5e:	4b6b      	ldr	r3, [pc, #428]	; (800ac0c <_dtoa_r+0x63c>)
 800aa60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f280 80dc 	bge.w	800ac28 <_dtoa_r+0x658>
 800aa70:	9b04      	ldr	r3, [sp, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f300 80d8 	bgt.w	800ac28 <_dtoa_r+0x658>
 800aa78:	f040 826f 	bne.w	800af5a <_dtoa_r+0x98a>
 800aa7c:	4b68      	ldr	r3, [pc, #416]	; (800ac20 <_dtoa_r+0x650>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	4640      	mov	r0, r8
 800aa82:	4649      	mov	r1, r9
 800aa84:	f7f5 fe08 	bl	8000698 <__aeabi_dmul>
 800aa88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa8c:	f7f6 f88a 	bl	8000ba4 <__aeabi_dcmpge>
 800aa90:	9e04      	ldr	r6, [sp, #16]
 800aa92:	4637      	mov	r7, r6
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f040 8245 	bne.w	800af24 <_dtoa_r+0x954>
 800aa9a:	9d00      	ldr	r5, [sp, #0]
 800aa9c:	2331      	movs	r3, #49	; 0x31
 800aa9e:	f805 3b01 	strb.w	r3, [r5], #1
 800aaa2:	f10b 0b01 	add.w	fp, fp, #1
 800aaa6:	e241      	b.n	800af2c <_dtoa_r+0x95c>
 800aaa8:	07f2      	lsls	r2, r6, #31
 800aaaa:	d505      	bpl.n	800aab8 <_dtoa_r+0x4e8>
 800aaac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aab0:	f7f5 fdf2 	bl	8000698 <__aeabi_dmul>
 800aab4:	3501      	adds	r5, #1
 800aab6:	2301      	movs	r3, #1
 800aab8:	1076      	asrs	r6, r6, #1
 800aaba:	3708      	adds	r7, #8
 800aabc:	e773      	b.n	800a9a6 <_dtoa_r+0x3d6>
 800aabe:	2502      	movs	r5, #2
 800aac0:	e775      	b.n	800a9ae <_dtoa_r+0x3de>
 800aac2:	9e04      	ldr	r6, [sp, #16]
 800aac4:	465f      	mov	r7, fp
 800aac6:	e792      	b.n	800a9ee <_dtoa_r+0x41e>
 800aac8:	9900      	ldr	r1, [sp, #0]
 800aaca:	4b50      	ldr	r3, [pc, #320]	; (800ac0c <_dtoa_r+0x63c>)
 800aacc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aad0:	4431      	add	r1, r6
 800aad2:	9102      	str	r1, [sp, #8]
 800aad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aad6:	eeb0 9a47 	vmov.f32	s18, s14
 800aada:	eef0 9a67 	vmov.f32	s19, s15
 800aade:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aae6:	2900      	cmp	r1, #0
 800aae8:	d044      	beq.n	800ab74 <_dtoa_r+0x5a4>
 800aaea:	494e      	ldr	r1, [pc, #312]	; (800ac24 <_dtoa_r+0x654>)
 800aaec:	2000      	movs	r0, #0
 800aaee:	f7f5 fefd 	bl	80008ec <__aeabi_ddiv>
 800aaf2:	ec53 2b19 	vmov	r2, r3, d9
 800aaf6:	f7f5 fc17 	bl	8000328 <__aeabi_dsub>
 800aafa:	9d00      	ldr	r5, [sp, #0]
 800aafc:	ec41 0b19 	vmov	d9, r0, r1
 800ab00:	4649      	mov	r1, r9
 800ab02:	4640      	mov	r0, r8
 800ab04:	f7f6 f878 	bl	8000bf8 <__aeabi_d2iz>
 800ab08:	4606      	mov	r6, r0
 800ab0a:	f7f5 fd5b 	bl	80005c4 <__aeabi_i2d>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4640      	mov	r0, r8
 800ab14:	4649      	mov	r1, r9
 800ab16:	f7f5 fc07 	bl	8000328 <__aeabi_dsub>
 800ab1a:	3630      	adds	r6, #48	; 0x30
 800ab1c:	f805 6b01 	strb.w	r6, [r5], #1
 800ab20:	ec53 2b19 	vmov	r2, r3, d9
 800ab24:	4680      	mov	r8, r0
 800ab26:	4689      	mov	r9, r1
 800ab28:	f7f6 f828 	bl	8000b7c <__aeabi_dcmplt>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d164      	bne.n	800abfa <_dtoa_r+0x62a>
 800ab30:	4642      	mov	r2, r8
 800ab32:	464b      	mov	r3, r9
 800ab34:	4937      	ldr	r1, [pc, #220]	; (800ac14 <_dtoa_r+0x644>)
 800ab36:	2000      	movs	r0, #0
 800ab38:	f7f5 fbf6 	bl	8000328 <__aeabi_dsub>
 800ab3c:	ec53 2b19 	vmov	r2, r3, d9
 800ab40:	f7f6 f81c 	bl	8000b7c <__aeabi_dcmplt>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	f040 80b6 	bne.w	800acb6 <_dtoa_r+0x6e6>
 800ab4a:	9b02      	ldr	r3, [sp, #8]
 800ab4c:	429d      	cmp	r5, r3
 800ab4e:	f43f af7c 	beq.w	800aa4a <_dtoa_r+0x47a>
 800ab52:	4b31      	ldr	r3, [pc, #196]	; (800ac18 <_dtoa_r+0x648>)
 800ab54:	ec51 0b19 	vmov	r0, r1, d9
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f7f5 fd9d 	bl	8000698 <__aeabi_dmul>
 800ab5e:	4b2e      	ldr	r3, [pc, #184]	; (800ac18 <_dtoa_r+0x648>)
 800ab60:	ec41 0b19 	vmov	d9, r0, r1
 800ab64:	2200      	movs	r2, #0
 800ab66:	4640      	mov	r0, r8
 800ab68:	4649      	mov	r1, r9
 800ab6a:	f7f5 fd95 	bl	8000698 <__aeabi_dmul>
 800ab6e:	4680      	mov	r8, r0
 800ab70:	4689      	mov	r9, r1
 800ab72:	e7c5      	b.n	800ab00 <_dtoa_r+0x530>
 800ab74:	ec51 0b17 	vmov	r0, r1, d7
 800ab78:	f7f5 fd8e 	bl	8000698 <__aeabi_dmul>
 800ab7c:	9b02      	ldr	r3, [sp, #8]
 800ab7e:	9d00      	ldr	r5, [sp, #0]
 800ab80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab82:	ec41 0b19 	vmov	d9, r0, r1
 800ab86:	4649      	mov	r1, r9
 800ab88:	4640      	mov	r0, r8
 800ab8a:	f7f6 f835 	bl	8000bf8 <__aeabi_d2iz>
 800ab8e:	4606      	mov	r6, r0
 800ab90:	f7f5 fd18 	bl	80005c4 <__aeabi_i2d>
 800ab94:	3630      	adds	r6, #48	; 0x30
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	f7f5 fbc3 	bl	8000328 <__aeabi_dsub>
 800aba2:	f805 6b01 	strb.w	r6, [r5], #1
 800aba6:	9b02      	ldr	r3, [sp, #8]
 800aba8:	429d      	cmp	r5, r3
 800abaa:	4680      	mov	r8, r0
 800abac:	4689      	mov	r9, r1
 800abae:	f04f 0200 	mov.w	r2, #0
 800abb2:	d124      	bne.n	800abfe <_dtoa_r+0x62e>
 800abb4:	4b1b      	ldr	r3, [pc, #108]	; (800ac24 <_dtoa_r+0x654>)
 800abb6:	ec51 0b19 	vmov	r0, r1, d9
 800abba:	f7f5 fbb7 	bl	800032c <__adddf3>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	4640      	mov	r0, r8
 800abc4:	4649      	mov	r1, r9
 800abc6:	f7f5 fff7 	bl	8000bb8 <__aeabi_dcmpgt>
 800abca:	2800      	cmp	r0, #0
 800abcc:	d173      	bne.n	800acb6 <_dtoa_r+0x6e6>
 800abce:	ec53 2b19 	vmov	r2, r3, d9
 800abd2:	4914      	ldr	r1, [pc, #80]	; (800ac24 <_dtoa_r+0x654>)
 800abd4:	2000      	movs	r0, #0
 800abd6:	f7f5 fba7 	bl	8000328 <__aeabi_dsub>
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	4640      	mov	r0, r8
 800abe0:	4649      	mov	r1, r9
 800abe2:	f7f5 ffcb 	bl	8000b7c <__aeabi_dcmplt>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	f43f af2f 	beq.w	800aa4a <_dtoa_r+0x47a>
 800abec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800abee:	1e6b      	subs	r3, r5, #1
 800abf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800abf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abf6:	2b30      	cmp	r3, #48	; 0x30
 800abf8:	d0f8      	beq.n	800abec <_dtoa_r+0x61c>
 800abfa:	46bb      	mov	fp, r7
 800abfc:	e04a      	b.n	800ac94 <_dtoa_r+0x6c4>
 800abfe:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <_dtoa_r+0x648>)
 800ac00:	f7f5 fd4a 	bl	8000698 <__aeabi_dmul>
 800ac04:	4680      	mov	r8, r0
 800ac06:	4689      	mov	r9, r1
 800ac08:	e7bd      	b.n	800ab86 <_dtoa_r+0x5b6>
 800ac0a:	bf00      	nop
 800ac0c:	0800e310 	.word	0x0800e310
 800ac10:	0800e2e8 	.word	0x0800e2e8
 800ac14:	3ff00000 	.word	0x3ff00000
 800ac18:	40240000 	.word	0x40240000
 800ac1c:	401c0000 	.word	0x401c0000
 800ac20:	40140000 	.word	0x40140000
 800ac24:	3fe00000 	.word	0x3fe00000
 800ac28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac2c:	9d00      	ldr	r5, [sp, #0]
 800ac2e:	4642      	mov	r2, r8
 800ac30:	464b      	mov	r3, r9
 800ac32:	4630      	mov	r0, r6
 800ac34:	4639      	mov	r1, r7
 800ac36:	f7f5 fe59 	bl	80008ec <__aeabi_ddiv>
 800ac3a:	f7f5 ffdd 	bl	8000bf8 <__aeabi_d2iz>
 800ac3e:	9001      	str	r0, [sp, #4]
 800ac40:	f7f5 fcc0 	bl	80005c4 <__aeabi_i2d>
 800ac44:	4642      	mov	r2, r8
 800ac46:	464b      	mov	r3, r9
 800ac48:	f7f5 fd26 	bl	8000698 <__aeabi_dmul>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4630      	mov	r0, r6
 800ac52:	4639      	mov	r1, r7
 800ac54:	f7f5 fb68 	bl	8000328 <__aeabi_dsub>
 800ac58:	9e01      	ldr	r6, [sp, #4]
 800ac5a:	9f04      	ldr	r7, [sp, #16]
 800ac5c:	3630      	adds	r6, #48	; 0x30
 800ac5e:	f805 6b01 	strb.w	r6, [r5], #1
 800ac62:	9e00      	ldr	r6, [sp, #0]
 800ac64:	1bae      	subs	r6, r5, r6
 800ac66:	42b7      	cmp	r7, r6
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	d134      	bne.n	800acd8 <_dtoa_r+0x708>
 800ac6e:	f7f5 fb5d 	bl	800032c <__adddf3>
 800ac72:	4642      	mov	r2, r8
 800ac74:	464b      	mov	r3, r9
 800ac76:	4606      	mov	r6, r0
 800ac78:	460f      	mov	r7, r1
 800ac7a:	f7f5 ff9d 	bl	8000bb8 <__aeabi_dcmpgt>
 800ac7e:	b9c8      	cbnz	r0, 800acb4 <_dtoa_r+0x6e4>
 800ac80:	4642      	mov	r2, r8
 800ac82:	464b      	mov	r3, r9
 800ac84:	4630      	mov	r0, r6
 800ac86:	4639      	mov	r1, r7
 800ac88:	f7f5 ff6e 	bl	8000b68 <__aeabi_dcmpeq>
 800ac8c:	b110      	cbz	r0, 800ac94 <_dtoa_r+0x6c4>
 800ac8e:	9b01      	ldr	r3, [sp, #4]
 800ac90:	07db      	lsls	r3, r3, #31
 800ac92:	d40f      	bmi.n	800acb4 <_dtoa_r+0x6e4>
 800ac94:	4651      	mov	r1, sl
 800ac96:	4620      	mov	r0, r4
 800ac98:	f000 fbcc 	bl	800b434 <_Bfree>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aca0:	702b      	strb	r3, [r5, #0]
 800aca2:	f10b 0301 	add.w	r3, fp, #1
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f43f ace2 	beq.w	800a674 <_dtoa_r+0xa4>
 800acb0:	601d      	str	r5, [r3, #0]
 800acb2:	e4df      	b.n	800a674 <_dtoa_r+0xa4>
 800acb4:	465f      	mov	r7, fp
 800acb6:	462b      	mov	r3, r5
 800acb8:	461d      	mov	r5, r3
 800acba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acbe:	2a39      	cmp	r2, #57	; 0x39
 800acc0:	d106      	bne.n	800acd0 <_dtoa_r+0x700>
 800acc2:	9a00      	ldr	r2, [sp, #0]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d1f7      	bne.n	800acb8 <_dtoa_r+0x6e8>
 800acc8:	9900      	ldr	r1, [sp, #0]
 800acca:	2230      	movs	r2, #48	; 0x30
 800accc:	3701      	adds	r7, #1
 800acce:	700a      	strb	r2, [r1, #0]
 800acd0:	781a      	ldrb	r2, [r3, #0]
 800acd2:	3201      	adds	r2, #1
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	e790      	b.n	800abfa <_dtoa_r+0x62a>
 800acd8:	4ba3      	ldr	r3, [pc, #652]	; (800af68 <_dtoa_r+0x998>)
 800acda:	2200      	movs	r2, #0
 800acdc:	f7f5 fcdc 	bl	8000698 <__aeabi_dmul>
 800ace0:	2200      	movs	r2, #0
 800ace2:	2300      	movs	r3, #0
 800ace4:	4606      	mov	r6, r0
 800ace6:	460f      	mov	r7, r1
 800ace8:	f7f5 ff3e 	bl	8000b68 <__aeabi_dcmpeq>
 800acec:	2800      	cmp	r0, #0
 800acee:	d09e      	beq.n	800ac2e <_dtoa_r+0x65e>
 800acf0:	e7d0      	b.n	800ac94 <_dtoa_r+0x6c4>
 800acf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	f000 80ca 	beq.w	800ae8e <_dtoa_r+0x8be>
 800acfa:	9a07      	ldr	r2, [sp, #28]
 800acfc:	2a01      	cmp	r2, #1
 800acfe:	f300 80ad 	bgt.w	800ae5c <_dtoa_r+0x88c>
 800ad02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad04:	2a00      	cmp	r2, #0
 800ad06:	f000 80a5 	beq.w	800ae54 <_dtoa_r+0x884>
 800ad0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad0e:	9e08      	ldr	r6, [sp, #32]
 800ad10:	9d05      	ldr	r5, [sp, #20]
 800ad12:	9a05      	ldr	r2, [sp, #20]
 800ad14:	441a      	add	r2, r3
 800ad16:	9205      	str	r2, [sp, #20]
 800ad18:	9a06      	ldr	r2, [sp, #24]
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	441a      	add	r2, r3
 800ad1e:	4620      	mov	r0, r4
 800ad20:	9206      	str	r2, [sp, #24]
 800ad22:	f000 fc87 	bl	800b634 <__i2b>
 800ad26:	4607      	mov	r7, r0
 800ad28:	b165      	cbz	r5, 800ad44 <_dtoa_r+0x774>
 800ad2a:	9b06      	ldr	r3, [sp, #24]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dd09      	ble.n	800ad44 <_dtoa_r+0x774>
 800ad30:	42ab      	cmp	r3, r5
 800ad32:	9a05      	ldr	r2, [sp, #20]
 800ad34:	bfa8      	it	ge
 800ad36:	462b      	movge	r3, r5
 800ad38:	1ad2      	subs	r2, r2, r3
 800ad3a:	9205      	str	r2, [sp, #20]
 800ad3c:	9a06      	ldr	r2, [sp, #24]
 800ad3e:	1aed      	subs	r5, r5, r3
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	9306      	str	r3, [sp, #24]
 800ad44:	9b08      	ldr	r3, [sp, #32]
 800ad46:	b1f3      	cbz	r3, 800ad86 <_dtoa_r+0x7b6>
 800ad48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 80a3 	beq.w	800ae96 <_dtoa_r+0x8c6>
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	dd10      	ble.n	800ad76 <_dtoa_r+0x7a6>
 800ad54:	4639      	mov	r1, r7
 800ad56:	4632      	mov	r2, r6
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 fd2b 	bl	800b7b4 <__pow5mult>
 800ad5e:	4652      	mov	r2, sl
 800ad60:	4601      	mov	r1, r0
 800ad62:	4607      	mov	r7, r0
 800ad64:	4620      	mov	r0, r4
 800ad66:	f000 fc7b 	bl	800b660 <__multiply>
 800ad6a:	4651      	mov	r1, sl
 800ad6c:	4680      	mov	r8, r0
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fb60 	bl	800b434 <_Bfree>
 800ad74:	46c2      	mov	sl, r8
 800ad76:	9b08      	ldr	r3, [sp, #32]
 800ad78:	1b9a      	subs	r2, r3, r6
 800ad7a:	d004      	beq.n	800ad86 <_dtoa_r+0x7b6>
 800ad7c:	4651      	mov	r1, sl
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 fd18 	bl	800b7b4 <__pow5mult>
 800ad84:	4682      	mov	sl, r0
 800ad86:	2101      	movs	r1, #1
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fc53 	bl	800b634 <__i2b>
 800ad8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	4606      	mov	r6, r0
 800ad94:	f340 8081 	ble.w	800ae9a <_dtoa_r+0x8ca>
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f000 fd09 	bl	800b7b4 <__pow5mult>
 800ada2:	9b07      	ldr	r3, [sp, #28]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	4606      	mov	r6, r0
 800ada8:	dd7a      	ble.n	800aea0 <_dtoa_r+0x8d0>
 800adaa:	f04f 0800 	mov.w	r8, #0
 800adae:	6933      	ldr	r3, [r6, #16]
 800adb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800adb4:	6918      	ldr	r0, [r3, #16]
 800adb6:	f000 fbef 	bl	800b598 <__hi0bits>
 800adba:	f1c0 0020 	rsb	r0, r0, #32
 800adbe:	9b06      	ldr	r3, [sp, #24]
 800adc0:	4418      	add	r0, r3
 800adc2:	f010 001f 	ands.w	r0, r0, #31
 800adc6:	f000 8094 	beq.w	800aef2 <_dtoa_r+0x922>
 800adca:	f1c0 0320 	rsb	r3, r0, #32
 800adce:	2b04      	cmp	r3, #4
 800add0:	f340 8085 	ble.w	800aede <_dtoa_r+0x90e>
 800add4:	9b05      	ldr	r3, [sp, #20]
 800add6:	f1c0 001c 	rsb	r0, r0, #28
 800adda:	4403      	add	r3, r0
 800addc:	9305      	str	r3, [sp, #20]
 800adde:	9b06      	ldr	r3, [sp, #24]
 800ade0:	4403      	add	r3, r0
 800ade2:	4405      	add	r5, r0
 800ade4:	9306      	str	r3, [sp, #24]
 800ade6:	9b05      	ldr	r3, [sp, #20]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	dd05      	ble.n	800adf8 <_dtoa_r+0x828>
 800adec:	4651      	mov	r1, sl
 800adee:	461a      	mov	r2, r3
 800adf0:	4620      	mov	r0, r4
 800adf2:	f000 fd39 	bl	800b868 <__lshift>
 800adf6:	4682      	mov	sl, r0
 800adf8:	9b06      	ldr	r3, [sp, #24]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	dd05      	ble.n	800ae0a <_dtoa_r+0x83a>
 800adfe:	4631      	mov	r1, r6
 800ae00:	461a      	mov	r2, r3
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 fd30 	bl	800b868 <__lshift>
 800ae08:	4606      	mov	r6, r0
 800ae0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d072      	beq.n	800aef6 <_dtoa_r+0x926>
 800ae10:	4631      	mov	r1, r6
 800ae12:	4650      	mov	r0, sl
 800ae14:	f000 fd94 	bl	800b940 <__mcmp>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	da6c      	bge.n	800aef6 <_dtoa_r+0x926>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	4651      	mov	r1, sl
 800ae20:	220a      	movs	r2, #10
 800ae22:	4620      	mov	r0, r4
 800ae24:	f000 fb28 	bl	800b478 <__multadd>
 800ae28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae2e:	4682      	mov	sl, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 81b0 	beq.w	800b196 <_dtoa_r+0xbc6>
 800ae36:	2300      	movs	r3, #0
 800ae38:	4639      	mov	r1, r7
 800ae3a:	220a      	movs	r2, #10
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f000 fb1b 	bl	800b478 <__multadd>
 800ae42:	9b01      	ldr	r3, [sp, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	4607      	mov	r7, r0
 800ae48:	f300 8096 	bgt.w	800af78 <_dtoa_r+0x9a8>
 800ae4c:	9b07      	ldr	r3, [sp, #28]
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	dc59      	bgt.n	800af06 <_dtoa_r+0x936>
 800ae52:	e091      	b.n	800af78 <_dtoa_r+0x9a8>
 800ae54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae5a:	e758      	b.n	800ad0e <_dtoa_r+0x73e>
 800ae5c:	9b04      	ldr	r3, [sp, #16]
 800ae5e:	1e5e      	subs	r6, r3, #1
 800ae60:	9b08      	ldr	r3, [sp, #32]
 800ae62:	42b3      	cmp	r3, r6
 800ae64:	bfbf      	itttt	lt
 800ae66:	9b08      	ldrlt	r3, [sp, #32]
 800ae68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ae6a:	9608      	strlt	r6, [sp, #32]
 800ae6c:	1af3      	sublt	r3, r6, r3
 800ae6e:	bfb4      	ite	lt
 800ae70:	18d2      	addlt	r2, r2, r3
 800ae72:	1b9e      	subge	r6, r3, r6
 800ae74:	9b04      	ldr	r3, [sp, #16]
 800ae76:	bfbc      	itt	lt
 800ae78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ae7a:	2600      	movlt	r6, #0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	bfb7      	itett	lt
 800ae80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ae84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ae88:	1a9d      	sublt	r5, r3, r2
 800ae8a:	2300      	movlt	r3, #0
 800ae8c:	e741      	b.n	800ad12 <_dtoa_r+0x742>
 800ae8e:	9e08      	ldr	r6, [sp, #32]
 800ae90:	9d05      	ldr	r5, [sp, #20]
 800ae92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae94:	e748      	b.n	800ad28 <_dtoa_r+0x758>
 800ae96:	9a08      	ldr	r2, [sp, #32]
 800ae98:	e770      	b.n	800ad7c <_dtoa_r+0x7ac>
 800ae9a:	9b07      	ldr	r3, [sp, #28]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	dc19      	bgt.n	800aed4 <_dtoa_r+0x904>
 800aea0:	9b02      	ldr	r3, [sp, #8]
 800aea2:	b9bb      	cbnz	r3, 800aed4 <_dtoa_r+0x904>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aeaa:	b99b      	cbnz	r3, 800aed4 <_dtoa_r+0x904>
 800aeac:	9b03      	ldr	r3, [sp, #12]
 800aeae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aeb2:	0d1b      	lsrs	r3, r3, #20
 800aeb4:	051b      	lsls	r3, r3, #20
 800aeb6:	b183      	cbz	r3, 800aeda <_dtoa_r+0x90a>
 800aeb8:	9b05      	ldr	r3, [sp, #20]
 800aeba:	3301      	adds	r3, #1
 800aebc:	9305      	str	r3, [sp, #20]
 800aebe:	9b06      	ldr	r3, [sp, #24]
 800aec0:	3301      	adds	r3, #1
 800aec2:	9306      	str	r3, [sp, #24]
 800aec4:	f04f 0801 	mov.w	r8, #1
 800aec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f47f af6f 	bne.w	800adae <_dtoa_r+0x7de>
 800aed0:	2001      	movs	r0, #1
 800aed2:	e774      	b.n	800adbe <_dtoa_r+0x7ee>
 800aed4:	f04f 0800 	mov.w	r8, #0
 800aed8:	e7f6      	b.n	800aec8 <_dtoa_r+0x8f8>
 800aeda:	4698      	mov	r8, r3
 800aedc:	e7f4      	b.n	800aec8 <_dtoa_r+0x8f8>
 800aede:	d082      	beq.n	800ade6 <_dtoa_r+0x816>
 800aee0:	9a05      	ldr	r2, [sp, #20]
 800aee2:	331c      	adds	r3, #28
 800aee4:	441a      	add	r2, r3
 800aee6:	9205      	str	r2, [sp, #20]
 800aee8:	9a06      	ldr	r2, [sp, #24]
 800aeea:	441a      	add	r2, r3
 800aeec:	441d      	add	r5, r3
 800aeee:	9206      	str	r2, [sp, #24]
 800aef0:	e779      	b.n	800ade6 <_dtoa_r+0x816>
 800aef2:	4603      	mov	r3, r0
 800aef4:	e7f4      	b.n	800aee0 <_dtoa_r+0x910>
 800aef6:	9b04      	ldr	r3, [sp, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	dc37      	bgt.n	800af6c <_dtoa_r+0x99c>
 800aefc:	9b07      	ldr	r3, [sp, #28]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	dd34      	ble.n	800af6c <_dtoa_r+0x99c>
 800af02:	9b04      	ldr	r3, [sp, #16]
 800af04:	9301      	str	r3, [sp, #4]
 800af06:	9b01      	ldr	r3, [sp, #4]
 800af08:	b963      	cbnz	r3, 800af24 <_dtoa_r+0x954>
 800af0a:	4631      	mov	r1, r6
 800af0c:	2205      	movs	r2, #5
 800af0e:	4620      	mov	r0, r4
 800af10:	f000 fab2 	bl	800b478 <__multadd>
 800af14:	4601      	mov	r1, r0
 800af16:	4606      	mov	r6, r0
 800af18:	4650      	mov	r0, sl
 800af1a:	f000 fd11 	bl	800b940 <__mcmp>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f73f adbb 	bgt.w	800aa9a <_dtoa_r+0x4ca>
 800af24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af26:	9d00      	ldr	r5, [sp, #0]
 800af28:	ea6f 0b03 	mvn.w	fp, r3
 800af2c:	f04f 0800 	mov.w	r8, #0
 800af30:	4631      	mov	r1, r6
 800af32:	4620      	mov	r0, r4
 800af34:	f000 fa7e 	bl	800b434 <_Bfree>
 800af38:	2f00      	cmp	r7, #0
 800af3a:	f43f aeab 	beq.w	800ac94 <_dtoa_r+0x6c4>
 800af3e:	f1b8 0f00 	cmp.w	r8, #0
 800af42:	d005      	beq.n	800af50 <_dtoa_r+0x980>
 800af44:	45b8      	cmp	r8, r7
 800af46:	d003      	beq.n	800af50 <_dtoa_r+0x980>
 800af48:	4641      	mov	r1, r8
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 fa72 	bl	800b434 <_Bfree>
 800af50:	4639      	mov	r1, r7
 800af52:	4620      	mov	r0, r4
 800af54:	f000 fa6e 	bl	800b434 <_Bfree>
 800af58:	e69c      	b.n	800ac94 <_dtoa_r+0x6c4>
 800af5a:	2600      	movs	r6, #0
 800af5c:	4637      	mov	r7, r6
 800af5e:	e7e1      	b.n	800af24 <_dtoa_r+0x954>
 800af60:	46bb      	mov	fp, r7
 800af62:	4637      	mov	r7, r6
 800af64:	e599      	b.n	800aa9a <_dtoa_r+0x4ca>
 800af66:	bf00      	nop
 800af68:	40240000 	.word	0x40240000
 800af6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f000 80c8 	beq.w	800b104 <_dtoa_r+0xb34>
 800af74:	9b04      	ldr	r3, [sp, #16]
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	2d00      	cmp	r5, #0
 800af7a:	dd05      	ble.n	800af88 <_dtoa_r+0x9b8>
 800af7c:	4639      	mov	r1, r7
 800af7e:	462a      	mov	r2, r5
 800af80:	4620      	mov	r0, r4
 800af82:	f000 fc71 	bl	800b868 <__lshift>
 800af86:	4607      	mov	r7, r0
 800af88:	f1b8 0f00 	cmp.w	r8, #0
 800af8c:	d05b      	beq.n	800b046 <_dtoa_r+0xa76>
 800af8e:	6879      	ldr	r1, [r7, #4]
 800af90:	4620      	mov	r0, r4
 800af92:	f000 fa0f 	bl	800b3b4 <_Balloc>
 800af96:	4605      	mov	r5, r0
 800af98:	b928      	cbnz	r0, 800afa6 <_dtoa_r+0x9d6>
 800af9a:	4b83      	ldr	r3, [pc, #524]	; (800b1a8 <_dtoa_r+0xbd8>)
 800af9c:	4602      	mov	r2, r0
 800af9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800afa2:	f7ff bb2e 	b.w	800a602 <_dtoa_r+0x32>
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	3202      	adds	r2, #2
 800afaa:	0092      	lsls	r2, r2, #2
 800afac:	f107 010c 	add.w	r1, r7, #12
 800afb0:	300c      	adds	r0, #12
 800afb2:	f7ff fa6e 	bl	800a492 <memcpy>
 800afb6:	2201      	movs	r2, #1
 800afb8:	4629      	mov	r1, r5
 800afba:	4620      	mov	r0, r4
 800afbc:	f000 fc54 	bl	800b868 <__lshift>
 800afc0:	9b00      	ldr	r3, [sp, #0]
 800afc2:	3301      	adds	r3, #1
 800afc4:	9304      	str	r3, [sp, #16]
 800afc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afca:	4413      	add	r3, r2
 800afcc:	9308      	str	r3, [sp, #32]
 800afce:	9b02      	ldr	r3, [sp, #8]
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	46b8      	mov	r8, r7
 800afd6:	9306      	str	r3, [sp, #24]
 800afd8:	4607      	mov	r7, r0
 800afda:	9b04      	ldr	r3, [sp, #16]
 800afdc:	4631      	mov	r1, r6
 800afde:	3b01      	subs	r3, #1
 800afe0:	4650      	mov	r0, sl
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	f7ff fa6a 	bl	800a4bc <quorem>
 800afe8:	4641      	mov	r1, r8
 800afea:	9002      	str	r0, [sp, #8]
 800afec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aff0:	4650      	mov	r0, sl
 800aff2:	f000 fca5 	bl	800b940 <__mcmp>
 800aff6:	463a      	mov	r2, r7
 800aff8:	9005      	str	r0, [sp, #20]
 800affa:	4631      	mov	r1, r6
 800affc:	4620      	mov	r0, r4
 800affe:	f000 fcbb 	bl	800b978 <__mdiff>
 800b002:	68c2      	ldr	r2, [r0, #12]
 800b004:	4605      	mov	r5, r0
 800b006:	bb02      	cbnz	r2, 800b04a <_dtoa_r+0xa7a>
 800b008:	4601      	mov	r1, r0
 800b00a:	4650      	mov	r0, sl
 800b00c:	f000 fc98 	bl	800b940 <__mcmp>
 800b010:	4602      	mov	r2, r0
 800b012:	4629      	mov	r1, r5
 800b014:	4620      	mov	r0, r4
 800b016:	9209      	str	r2, [sp, #36]	; 0x24
 800b018:	f000 fa0c 	bl	800b434 <_Bfree>
 800b01c:	9b07      	ldr	r3, [sp, #28]
 800b01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b020:	9d04      	ldr	r5, [sp, #16]
 800b022:	ea43 0102 	orr.w	r1, r3, r2
 800b026:	9b06      	ldr	r3, [sp, #24]
 800b028:	4319      	orrs	r1, r3
 800b02a:	d110      	bne.n	800b04e <_dtoa_r+0xa7e>
 800b02c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b030:	d029      	beq.n	800b086 <_dtoa_r+0xab6>
 800b032:	9b05      	ldr	r3, [sp, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	dd02      	ble.n	800b03e <_dtoa_r+0xa6e>
 800b038:	9b02      	ldr	r3, [sp, #8]
 800b03a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b03e:	9b01      	ldr	r3, [sp, #4]
 800b040:	f883 9000 	strb.w	r9, [r3]
 800b044:	e774      	b.n	800af30 <_dtoa_r+0x960>
 800b046:	4638      	mov	r0, r7
 800b048:	e7ba      	b.n	800afc0 <_dtoa_r+0x9f0>
 800b04a:	2201      	movs	r2, #1
 800b04c:	e7e1      	b.n	800b012 <_dtoa_r+0xa42>
 800b04e:	9b05      	ldr	r3, [sp, #20]
 800b050:	2b00      	cmp	r3, #0
 800b052:	db04      	blt.n	800b05e <_dtoa_r+0xa8e>
 800b054:	9907      	ldr	r1, [sp, #28]
 800b056:	430b      	orrs	r3, r1
 800b058:	9906      	ldr	r1, [sp, #24]
 800b05a:	430b      	orrs	r3, r1
 800b05c:	d120      	bne.n	800b0a0 <_dtoa_r+0xad0>
 800b05e:	2a00      	cmp	r2, #0
 800b060:	dded      	ble.n	800b03e <_dtoa_r+0xa6e>
 800b062:	4651      	mov	r1, sl
 800b064:	2201      	movs	r2, #1
 800b066:	4620      	mov	r0, r4
 800b068:	f000 fbfe 	bl	800b868 <__lshift>
 800b06c:	4631      	mov	r1, r6
 800b06e:	4682      	mov	sl, r0
 800b070:	f000 fc66 	bl	800b940 <__mcmp>
 800b074:	2800      	cmp	r0, #0
 800b076:	dc03      	bgt.n	800b080 <_dtoa_r+0xab0>
 800b078:	d1e1      	bne.n	800b03e <_dtoa_r+0xa6e>
 800b07a:	f019 0f01 	tst.w	r9, #1
 800b07e:	d0de      	beq.n	800b03e <_dtoa_r+0xa6e>
 800b080:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b084:	d1d8      	bne.n	800b038 <_dtoa_r+0xa68>
 800b086:	9a01      	ldr	r2, [sp, #4]
 800b088:	2339      	movs	r3, #57	; 0x39
 800b08a:	7013      	strb	r3, [r2, #0]
 800b08c:	462b      	mov	r3, r5
 800b08e:	461d      	mov	r5, r3
 800b090:	3b01      	subs	r3, #1
 800b092:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b096:	2a39      	cmp	r2, #57	; 0x39
 800b098:	d06c      	beq.n	800b174 <_dtoa_r+0xba4>
 800b09a:	3201      	adds	r2, #1
 800b09c:	701a      	strb	r2, [r3, #0]
 800b09e:	e747      	b.n	800af30 <_dtoa_r+0x960>
 800b0a0:	2a00      	cmp	r2, #0
 800b0a2:	dd07      	ble.n	800b0b4 <_dtoa_r+0xae4>
 800b0a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b0a8:	d0ed      	beq.n	800b086 <_dtoa_r+0xab6>
 800b0aa:	9a01      	ldr	r2, [sp, #4]
 800b0ac:	f109 0301 	add.w	r3, r9, #1
 800b0b0:	7013      	strb	r3, [r2, #0]
 800b0b2:	e73d      	b.n	800af30 <_dtoa_r+0x960>
 800b0b4:	9b04      	ldr	r3, [sp, #16]
 800b0b6:	9a08      	ldr	r2, [sp, #32]
 800b0b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d043      	beq.n	800b148 <_dtoa_r+0xb78>
 800b0c0:	4651      	mov	r1, sl
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	220a      	movs	r2, #10
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f000 f9d6 	bl	800b478 <__multadd>
 800b0cc:	45b8      	cmp	r8, r7
 800b0ce:	4682      	mov	sl, r0
 800b0d0:	f04f 0300 	mov.w	r3, #0
 800b0d4:	f04f 020a 	mov.w	r2, #10
 800b0d8:	4641      	mov	r1, r8
 800b0da:	4620      	mov	r0, r4
 800b0dc:	d107      	bne.n	800b0ee <_dtoa_r+0xb1e>
 800b0de:	f000 f9cb 	bl	800b478 <__multadd>
 800b0e2:	4680      	mov	r8, r0
 800b0e4:	4607      	mov	r7, r0
 800b0e6:	9b04      	ldr	r3, [sp, #16]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	9304      	str	r3, [sp, #16]
 800b0ec:	e775      	b.n	800afda <_dtoa_r+0xa0a>
 800b0ee:	f000 f9c3 	bl	800b478 <__multadd>
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	4680      	mov	r8, r0
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	220a      	movs	r2, #10
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 f9bc 	bl	800b478 <__multadd>
 800b100:	4607      	mov	r7, r0
 800b102:	e7f0      	b.n	800b0e6 <_dtoa_r+0xb16>
 800b104:	9b04      	ldr	r3, [sp, #16]
 800b106:	9301      	str	r3, [sp, #4]
 800b108:	9d00      	ldr	r5, [sp, #0]
 800b10a:	4631      	mov	r1, r6
 800b10c:	4650      	mov	r0, sl
 800b10e:	f7ff f9d5 	bl	800a4bc <quorem>
 800b112:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b116:	9b00      	ldr	r3, [sp, #0]
 800b118:	f805 9b01 	strb.w	r9, [r5], #1
 800b11c:	1aea      	subs	r2, r5, r3
 800b11e:	9b01      	ldr	r3, [sp, #4]
 800b120:	4293      	cmp	r3, r2
 800b122:	dd07      	ble.n	800b134 <_dtoa_r+0xb64>
 800b124:	4651      	mov	r1, sl
 800b126:	2300      	movs	r3, #0
 800b128:	220a      	movs	r2, #10
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 f9a4 	bl	800b478 <__multadd>
 800b130:	4682      	mov	sl, r0
 800b132:	e7ea      	b.n	800b10a <_dtoa_r+0xb3a>
 800b134:	9b01      	ldr	r3, [sp, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	bfc8      	it	gt
 800b13a:	461d      	movgt	r5, r3
 800b13c:	9b00      	ldr	r3, [sp, #0]
 800b13e:	bfd8      	it	le
 800b140:	2501      	movle	r5, #1
 800b142:	441d      	add	r5, r3
 800b144:	f04f 0800 	mov.w	r8, #0
 800b148:	4651      	mov	r1, sl
 800b14a:	2201      	movs	r2, #1
 800b14c:	4620      	mov	r0, r4
 800b14e:	f000 fb8b 	bl	800b868 <__lshift>
 800b152:	4631      	mov	r1, r6
 800b154:	4682      	mov	sl, r0
 800b156:	f000 fbf3 	bl	800b940 <__mcmp>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	dc96      	bgt.n	800b08c <_dtoa_r+0xabc>
 800b15e:	d102      	bne.n	800b166 <_dtoa_r+0xb96>
 800b160:	f019 0f01 	tst.w	r9, #1
 800b164:	d192      	bne.n	800b08c <_dtoa_r+0xabc>
 800b166:	462b      	mov	r3, r5
 800b168:	461d      	mov	r5, r3
 800b16a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b16e:	2a30      	cmp	r2, #48	; 0x30
 800b170:	d0fa      	beq.n	800b168 <_dtoa_r+0xb98>
 800b172:	e6dd      	b.n	800af30 <_dtoa_r+0x960>
 800b174:	9a00      	ldr	r2, [sp, #0]
 800b176:	429a      	cmp	r2, r3
 800b178:	d189      	bne.n	800b08e <_dtoa_r+0xabe>
 800b17a:	f10b 0b01 	add.w	fp, fp, #1
 800b17e:	2331      	movs	r3, #49	; 0x31
 800b180:	e796      	b.n	800b0b0 <_dtoa_r+0xae0>
 800b182:	4b0a      	ldr	r3, [pc, #40]	; (800b1ac <_dtoa_r+0xbdc>)
 800b184:	f7ff ba99 	b.w	800a6ba <_dtoa_r+0xea>
 800b188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f47f aa6d 	bne.w	800a66a <_dtoa_r+0x9a>
 800b190:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <_dtoa_r+0xbe0>)
 800b192:	f7ff ba92 	b.w	800a6ba <_dtoa_r+0xea>
 800b196:	9b01      	ldr	r3, [sp, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	dcb5      	bgt.n	800b108 <_dtoa_r+0xb38>
 800b19c:	9b07      	ldr	r3, [sp, #28]
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	f73f aeb1 	bgt.w	800af06 <_dtoa_r+0x936>
 800b1a4:	e7b0      	b.n	800b108 <_dtoa_r+0xb38>
 800b1a6:	bf00      	nop
 800b1a8:	0800e277 	.word	0x0800e277
 800b1ac:	0800e1d2 	.word	0x0800e1d2
 800b1b0:	0800e1fb 	.word	0x0800e1fb

0800b1b4 <_free_r>:
 800b1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1b6:	2900      	cmp	r1, #0
 800b1b8:	d044      	beq.n	800b244 <_free_r+0x90>
 800b1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1be:	9001      	str	r0, [sp, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f1a1 0404 	sub.w	r4, r1, #4
 800b1c6:	bfb8      	it	lt
 800b1c8:	18e4      	addlt	r4, r4, r3
 800b1ca:	f000 f8e7 	bl	800b39c <__malloc_lock>
 800b1ce:	4a1e      	ldr	r2, [pc, #120]	; (800b248 <_free_r+0x94>)
 800b1d0:	9801      	ldr	r0, [sp, #4]
 800b1d2:	6813      	ldr	r3, [r2, #0]
 800b1d4:	b933      	cbnz	r3, 800b1e4 <_free_r+0x30>
 800b1d6:	6063      	str	r3, [r4, #4]
 800b1d8:	6014      	str	r4, [r2, #0]
 800b1da:	b003      	add	sp, #12
 800b1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1e0:	f000 b8e2 	b.w	800b3a8 <__malloc_unlock>
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	d908      	bls.n	800b1fa <_free_r+0x46>
 800b1e8:	6825      	ldr	r5, [r4, #0]
 800b1ea:	1961      	adds	r1, r4, r5
 800b1ec:	428b      	cmp	r3, r1
 800b1ee:	bf01      	itttt	eq
 800b1f0:	6819      	ldreq	r1, [r3, #0]
 800b1f2:	685b      	ldreq	r3, [r3, #4]
 800b1f4:	1949      	addeq	r1, r1, r5
 800b1f6:	6021      	streq	r1, [r4, #0]
 800b1f8:	e7ed      	b.n	800b1d6 <_free_r+0x22>
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	b10b      	cbz	r3, 800b204 <_free_r+0x50>
 800b200:	42a3      	cmp	r3, r4
 800b202:	d9fa      	bls.n	800b1fa <_free_r+0x46>
 800b204:	6811      	ldr	r1, [r2, #0]
 800b206:	1855      	adds	r5, r2, r1
 800b208:	42a5      	cmp	r5, r4
 800b20a:	d10b      	bne.n	800b224 <_free_r+0x70>
 800b20c:	6824      	ldr	r4, [r4, #0]
 800b20e:	4421      	add	r1, r4
 800b210:	1854      	adds	r4, r2, r1
 800b212:	42a3      	cmp	r3, r4
 800b214:	6011      	str	r1, [r2, #0]
 800b216:	d1e0      	bne.n	800b1da <_free_r+0x26>
 800b218:	681c      	ldr	r4, [r3, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	6053      	str	r3, [r2, #4]
 800b21e:	440c      	add	r4, r1
 800b220:	6014      	str	r4, [r2, #0]
 800b222:	e7da      	b.n	800b1da <_free_r+0x26>
 800b224:	d902      	bls.n	800b22c <_free_r+0x78>
 800b226:	230c      	movs	r3, #12
 800b228:	6003      	str	r3, [r0, #0]
 800b22a:	e7d6      	b.n	800b1da <_free_r+0x26>
 800b22c:	6825      	ldr	r5, [r4, #0]
 800b22e:	1961      	adds	r1, r4, r5
 800b230:	428b      	cmp	r3, r1
 800b232:	bf04      	itt	eq
 800b234:	6819      	ldreq	r1, [r3, #0]
 800b236:	685b      	ldreq	r3, [r3, #4]
 800b238:	6063      	str	r3, [r4, #4]
 800b23a:	bf04      	itt	eq
 800b23c:	1949      	addeq	r1, r1, r5
 800b23e:	6021      	streq	r1, [r4, #0]
 800b240:	6054      	str	r4, [r2, #4]
 800b242:	e7ca      	b.n	800b1da <_free_r+0x26>
 800b244:	b003      	add	sp, #12
 800b246:	bd30      	pop	{r4, r5, pc}
 800b248:	200149a4 	.word	0x200149a4

0800b24c <malloc>:
 800b24c:	4b02      	ldr	r3, [pc, #8]	; (800b258 <malloc+0xc>)
 800b24e:	4601      	mov	r1, r0
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	f000 b823 	b.w	800b29c <_malloc_r>
 800b256:	bf00      	nop
 800b258:	20000078 	.word	0x20000078

0800b25c <sbrk_aligned>:
 800b25c:	b570      	push	{r4, r5, r6, lr}
 800b25e:	4e0e      	ldr	r6, [pc, #56]	; (800b298 <sbrk_aligned+0x3c>)
 800b260:	460c      	mov	r4, r1
 800b262:	6831      	ldr	r1, [r6, #0]
 800b264:	4605      	mov	r5, r0
 800b266:	b911      	cbnz	r1, 800b26e <sbrk_aligned+0x12>
 800b268:	f001 fe1a 	bl	800cea0 <_sbrk_r>
 800b26c:	6030      	str	r0, [r6, #0]
 800b26e:	4621      	mov	r1, r4
 800b270:	4628      	mov	r0, r5
 800b272:	f001 fe15 	bl	800cea0 <_sbrk_r>
 800b276:	1c43      	adds	r3, r0, #1
 800b278:	d00a      	beq.n	800b290 <sbrk_aligned+0x34>
 800b27a:	1cc4      	adds	r4, r0, #3
 800b27c:	f024 0403 	bic.w	r4, r4, #3
 800b280:	42a0      	cmp	r0, r4
 800b282:	d007      	beq.n	800b294 <sbrk_aligned+0x38>
 800b284:	1a21      	subs	r1, r4, r0
 800b286:	4628      	mov	r0, r5
 800b288:	f001 fe0a 	bl	800cea0 <_sbrk_r>
 800b28c:	3001      	adds	r0, #1
 800b28e:	d101      	bne.n	800b294 <sbrk_aligned+0x38>
 800b290:	f04f 34ff 	mov.w	r4, #4294967295
 800b294:	4620      	mov	r0, r4
 800b296:	bd70      	pop	{r4, r5, r6, pc}
 800b298:	200149a8 	.word	0x200149a8

0800b29c <_malloc_r>:
 800b29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a0:	1ccd      	adds	r5, r1, #3
 800b2a2:	f025 0503 	bic.w	r5, r5, #3
 800b2a6:	3508      	adds	r5, #8
 800b2a8:	2d0c      	cmp	r5, #12
 800b2aa:	bf38      	it	cc
 800b2ac:	250c      	movcc	r5, #12
 800b2ae:	2d00      	cmp	r5, #0
 800b2b0:	4607      	mov	r7, r0
 800b2b2:	db01      	blt.n	800b2b8 <_malloc_r+0x1c>
 800b2b4:	42a9      	cmp	r1, r5
 800b2b6:	d905      	bls.n	800b2c4 <_malloc_r+0x28>
 800b2b8:	230c      	movs	r3, #12
 800b2ba:	603b      	str	r3, [r7, #0]
 800b2bc:	2600      	movs	r6, #0
 800b2be:	4630      	mov	r0, r6
 800b2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b398 <_malloc_r+0xfc>
 800b2c8:	f000 f868 	bl	800b39c <__malloc_lock>
 800b2cc:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d0:	461c      	mov	r4, r3
 800b2d2:	bb5c      	cbnz	r4, 800b32c <_malloc_r+0x90>
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	f7ff ffc0 	bl	800b25c <sbrk_aligned>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	4604      	mov	r4, r0
 800b2e0:	d155      	bne.n	800b38e <_malloc_r+0xf2>
 800b2e2:	f8d8 4000 	ldr.w	r4, [r8]
 800b2e6:	4626      	mov	r6, r4
 800b2e8:	2e00      	cmp	r6, #0
 800b2ea:	d145      	bne.n	800b378 <_malloc_r+0xdc>
 800b2ec:	2c00      	cmp	r4, #0
 800b2ee:	d048      	beq.n	800b382 <_malloc_r+0xe6>
 800b2f0:	6823      	ldr	r3, [r4, #0]
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	eb04 0903 	add.w	r9, r4, r3
 800b2fa:	f001 fdd1 	bl	800cea0 <_sbrk_r>
 800b2fe:	4581      	cmp	r9, r0
 800b300:	d13f      	bne.n	800b382 <_malloc_r+0xe6>
 800b302:	6821      	ldr	r1, [r4, #0]
 800b304:	1a6d      	subs	r5, r5, r1
 800b306:	4629      	mov	r1, r5
 800b308:	4638      	mov	r0, r7
 800b30a:	f7ff ffa7 	bl	800b25c <sbrk_aligned>
 800b30e:	3001      	adds	r0, #1
 800b310:	d037      	beq.n	800b382 <_malloc_r+0xe6>
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	442b      	add	r3, r5
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	f8d8 3000 	ldr.w	r3, [r8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d038      	beq.n	800b392 <_malloc_r+0xf6>
 800b320:	685a      	ldr	r2, [r3, #4]
 800b322:	42a2      	cmp	r2, r4
 800b324:	d12b      	bne.n	800b37e <_malloc_r+0xe2>
 800b326:	2200      	movs	r2, #0
 800b328:	605a      	str	r2, [r3, #4]
 800b32a:	e00f      	b.n	800b34c <_malloc_r+0xb0>
 800b32c:	6822      	ldr	r2, [r4, #0]
 800b32e:	1b52      	subs	r2, r2, r5
 800b330:	d41f      	bmi.n	800b372 <_malloc_r+0xd6>
 800b332:	2a0b      	cmp	r2, #11
 800b334:	d917      	bls.n	800b366 <_malloc_r+0xca>
 800b336:	1961      	adds	r1, r4, r5
 800b338:	42a3      	cmp	r3, r4
 800b33a:	6025      	str	r5, [r4, #0]
 800b33c:	bf18      	it	ne
 800b33e:	6059      	strne	r1, [r3, #4]
 800b340:	6863      	ldr	r3, [r4, #4]
 800b342:	bf08      	it	eq
 800b344:	f8c8 1000 	streq.w	r1, [r8]
 800b348:	5162      	str	r2, [r4, r5]
 800b34a:	604b      	str	r3, [r1, #4]
 800b34c:	4638      	mov	r0, r7
 800b34e:	f104 060b 	add.w	r6, r4, #11
 800b352:	f000 f829 	bl	800b3a8 <__malloc_unlock>
 800b356:	f026 0607 	bic.w	r6, r6, #7
 800b35a:	1d23      	adds	r3, r4, #4
 800b35c:	1af2      	subs	r2, r6, r3
 800b35e:	d0ae      	beq.n	800b2be <_malloc_r+0x22>
 800b360:	1b9b      	subs	r3, r3, r6
 800b362:	50a3      	str	r3, [r4, r2]
 800b364:	e7ab      	b.n	800b2be <_malloc_r+0x22>
 800b366:	42a3      	cmp	r3, r4
 800b368:	6862      	ldr	r2, [r4, #4]
 800b36a:	d1dd      	bne.n	800b328 <_malloc_r+0x8c>
 800b36c:	f8c8 2000 	str.w	r2, [r8]
 800b370:	e7ec      	b.n	800b34c <_malloc_r+0xb0>
 800b372:	4623      	mov	r3, r4
 800b374:	6864      	ldr	r4, [r4, #4]
 800b376:	e7ac      	b.n	800b2d2 <_malloc_r+0x36>
 800b378:	4634      	mov	r4, r6
 800b37a:	6876      	ldr	r6, [r6, #4]
 800b37c:	e7b4      	b.n	800b2e8 <_malloc_r+0x4c>
 800b37e:	4613      	mov	r3, r2
 800b380:	e7cc      	b.n	800b31c <_malloc_r+0x80>
 800b382:	230c      	movs	r3, #12
 800b384:	603b      	str	r3, [r7, #0]
 800b386:	4638      	mov	r0, r7
 800b388:	f000 f80e 	bl	800b3a8 <__malloc_unlock>
 800b38c:	e797      	b.n	800b2be <_malloc_r+0x22>
 800b38e:	6025      	str	r5, [r4, #0]
 800b390:	e7dc      	b.n	800b34c <_malloc_r+0xb0>
 800b392:	605b      	str	r3, [r3, #4]
 800b394:	deff      	udf	#255	; 0xff
 800b396:	bf00      	nop
 800b398:	200149a4 	.word	0x200149a4

0800b39c <__malloc_lock>:
 800b39c:	4801      	ldr	r0, [pc, #4]	; (800b3a4 <__malloc_lock+0x8>)
 800b39e:	f7ff b876 	b.w	800a48e <__retarget_lock_acquire_recursive>
 800b3a2:	bf00      	nop
 800b3a4:	200149a0 	.word	0x200149a0

0800b3a8 <__malloc_unlock>:
 800b3a8:	4801      	ldr	r0, [pc, #4]	; (800b3b0 <__malloc_unlock+0x8>)
 800b3aa:	f7ff b871 	b.w	800a490 <__retarget_lock_release_recursive>
 800b3ae:	bf00      	nop
 800b3b0:	200149a0 	.word	0x200149a0

0800b3b4 <_Balloc>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	69c6      	ldr	r6, [r0, #28]
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	b976      	cbnz	r6, 800b3dc <_Balloc+0x28>
 800b3be:	2010      	movs	r0, #16
 800b3c0:	f7ff ff44 	bl	800b24c <malloc>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	61e0      	str	r0, [r4, #28]
 800b3c8:	b920      	cbnz	r0, 800b3d4 <_Balloc+0x20>
 800b3ca:	4b18      	ldr	r3, [pc, #96]	; (800b42c <_Balloc+0x78>)
 800b3cc:	4818      	ldr	r0, [pc, #96]	; (800b430 <_Balloc+0x7c>)
 800b3ce:	216b      	movs	r1, #107	; 0x6b
 800b3d0:	f001 fd7e 	bl	800ced0 <__assert_func>
 800b3d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3d8:	6006      	str	r6, [r0, #0]
 800b3da:	60c6      	str	r6, [r0, #12]
 800b3dc:	69e6      	ldr	r6, [r4, #28]
 800b3de:	68f3      	ldr	r3, [r6, #12]
 800b3e0:	b183      	cbz	r3, 800b404 <_Balloc+0x50>
 800b3e2:	69e3      	ldr	r3, [r4, #28]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3ea:	b9b8      	cbnz	r0, 800b41c <_Balloc+0x68>
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	fa01 f605 	lsl.w	r6, r1, r5
 800b3f2:	1d72      	adds	r2, r6, #5
 800b3f4:	0092      	lsls	r2, r2, #2
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f001 fd88 	bl	800cf0c <_calloc_r>
 800b3fc:	b160      	cbz	r0, 800b418 <_Balloc+0x64>
 800b3fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b402:	e00e      	b.n	800b422 <_Balloc+0x6e>
 800b404:	2221      	movs	r2, #33	; 0x21
 800b406:	2104      	movs	r1, #4
 800b408:	4620      	mov	r0, r4
 800b40a:	f001 fd7f 	bl	800cf0c <_calloc_r>
 800b40e:	69e3      	ldr	r3, [r4, #28]
 800b410:	60f0      	str	r0, [r6, #12]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e4      	bne.n	800b3e2 <_Balloc+0x2e>
 800b418:	2000      	movs	r0, #0
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	6802      	ldr	r2, [r0, #0]
 800b41e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b422:	2300      	movs	r3, #0
 800b424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b428:	e7f7      	b.n	800b41a <_Balloc+0x66>
 800b42a:	bf00      	nop
 800b42c:	0800e208 	.word	0x0800e208
 800b430:	0800e288 	.word	0x0800e288

0800b434 <_Bfree>:
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	69c6      	ldr	r6, [r0, #28]
 800b438:	4605      	mov	r5, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	b976      	cbnz	r6, 800b45c <_Bfree+0x28>
 800b43e:	2010      	movs	r0, #16
 800b440:	f7ff ff04 	bl	800b24c <malloc>
 800b444:	4602      	mov	r2, r0
 800b446:	61e8      	str	r0, [r5, #28]
 800b448:	b920      	cbnz	r0, 800b454 <_Bfree+0x20>
 800b44a:	4b09      	ldr	r3, [pc, #36]	; (800b470 <_Bfree+0x3c>)
 800b44c:	4809      	ldr	r0, [pc, #36]	; (800b474 <_Bfree+0x40>)
 800b44e:	218f      	movs	r1, #143	; 0x8f
 800b450:	f001 fd3e 	bl	800ced0 <__assert_func>
 800b454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b458:	6006      	str	r6, [r0, #0]
 800b45a:	60c6      	str	r6, [r0, #12]
 800b45c:	b13c      	cbz	r4, 800b46e <_Bfree+0x3a>
 800b45e:	69eb      	ldr	r3, [r5, #28]
 800b460:	6862      	ldr	r2, [r4, #4]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b468:	6021      	str	r1, [r4, #0]
 800b46a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b46e:	bd70      	pop	{r4, r5, r6, pc}
 800b470:	0800e208 	.word	0x0800e208
 800b474:	0800e288 	.word	0x0800e288

0800b478 <__multadd>:
 800b478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47c:	690d      	ldr	r5, [r1, #16]
 800b47e:	4607      	mov	r7, r0
 800b480:	460c      	mov	r4, r1
 800b482:	461e      	mov	r6, r3
 800b484:	f101 0c14 	add.w	ip, r1, #20
 800b488:	2000      	movs	r0, #0
 800b48a:	f8dc 3000 	ldr.w	r3, [ip]
 800b48e:	b299      	uxth	r1, r3
 800b490:	fb02 6101 	mla	r1, r2, r1, r6
 800b494:	0c1e      	lsrs	r6, r3, #16
 800b496:	0c0b      	lsrs	r3, r1, #16
 800b498:	fb02 3306 	mla	r3, r2, r6, r3
 800b49c:	b289      	uxth	r1, r1
 800b49e:	3001      	adds	r0, #1
 800b4a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4a4:	4285      	cmp	r5, r0
 800b4a6:	f84c 1b04 	str.w	r1, [ip], #4
 800b4aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4ae:	dcec      	bgt.n	800b48a <__multadd+0x12>
 800b4b0:	b30e      	cbz	r6, 800b4f6 <__multadd+0x7e>
 800b4b2:	68a3      	ldr	r3, [r4, #8]
 800b4b4:	42ab      	cmp	r3, r5
 800b4b6:	dc19      	bgt.n	800b4ec <__multadd+0x74>
 800b4b8:	6861      	ldr	r1, [r4, #4]
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	3101      	adds	r1, #1
 800b4be:	f7ff ff79 	bl	800b3b4 <_Balloc>
 800b4c2:	4680      	mov	r8, r0
 800b4c4:	b928      	cbnz	r0, 800b4d2 <__multadd+0x5a>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	4b0c      	ldr	r3, [pc, #48]	; (800b4fc <__multadd+0x84>)
 800b4ca:	480d      	ldr	r0, [pc, #52]	; (800b500 <__multadd+0x88>)
 800b4cc:	21ba      	movs	r1, #186	; 0xba
 800b4ce:	f001 fcff 	bl	800ced0 <__assert_func>
 800b4d2:	6922      	ldr	r2, [r4, #16]
 800b4d4:	3202      	adds	r2, #2
 800b4d6:	f104 010c 	add.w	r1, r4, #12
 800b4da:	0092      	lsls	r2, r2, #2
 800b4dc:	300c      	adds	r0, #12
 800b4de:	f7fe ffd8 	bl	800a492 <memcpy>
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	4638      	mov	r0, r7
 800b4e6:	f7ff ffa5 	bl	800b434 <_Bfree>
 800b4ea:	4644      	mov	r4, r8
 800b4ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	615e      	str	r6, [r3, #20]
 800b4f4:	6125      	str	r5, [r4, #16]
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4fc:	0800e277 	.word	0x0800e277
 800b500:	0800e288 	.word	0x0800e288

0800b504 <__s2b>:
 800b504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b508:	460c      	mov	r4, r1
 800b50a:	4615      	mov	r5, r2
 800b50c:	461f      	mov	r7, r3
 800b50e:	2209      	movs	r2, #9
 800b510:	3308      	adds	r3, #8
 800b512:	4606      	mov	r6, r0
 800b514:	fb93 f3f2 	sdiv	r3, r3, r2
 800b518:	2100      	movs	r1, #0
 800b51a:	2201      	movs	r2, #1
 800b51c:	429a      	cmp	r2, r3
 800b51e:	db09      	blt.n	800b534 <__s2b+0x30>
 800b520:	4630      	mov	r0, r6
 800b522:	f7ff ff47 	bl	800b3b4 <_Balloc>
 800b526:	b940      	cbnz	r0, 800b53a <__s2b+0x36>
 800b528:	4602      	mov	r2, r0
 800b52a:	4b19      	ldr	r3, [pc, #100]	; (800b590 <__s2b+0x8c>)
 800b52c:	4819      	ldr	r0, [pc, #100]	; (800b594 <__s2b+0x90>)
 800b52e:	21d3      	movs	r1, #211	; 0xd3
 800b530:	f001 fcce 	bl	800ced0 <__assert_func>
 800b534:	0052      	lsls	r2, r2, #1
 800b536:	3101      	adds	r1, #1
 800b538:	e7f0      	b.n	800b51c <__s2b+0x18>
 800b53a:	9b08      	ldr	r3, [sp, #32]
 800b53c:	6143      	str	r3, [r0, #20]
 800b53e:	2d09      	cmp	r5, #9
 800b540:	f04f 0301 	mov.w	r3, #1
 800b544:	6103      	str	r3, [r0, #16]
 800b546:	dd16      	ble.n	800b576 <__s2b+0x72>
 800b548:	f104 0909 	add.w	r9, r4, #9
 800b54c:	46c8      	mov	r8, r9
 800b54e:	442c      	add	r4, r5
 800b550:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b554:	4601      	mov	r1, r0
 800b556:	3b30      	subs	r3, #48	; 0x30
 800b558:	220a      	movs	r2, #10
 800b55a:	4630      	mov	r0, r6
 800b55c:	f7ff ff8c 	bl	800b478 <__multadd>
 800b560:	45a0      	cmp	r8, r4
 800b562:	d1f5      	bne.n	800b550 <__s2b+0x4c>
 800b564:	f1a5 0408 	sub.w	r4, r5, #8
 800b568:	444c      	add	r4, r9
 800b56a:	1b2d      	subs	r5, r5, r4
 800b56c:	1963      	adds	r3, r4, r5
 800b56e:	42bb      	cmp	r3, r7
 800b570:	db04      	blt.n	800b57c <__s2b+0x78>
 800b572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b576:	340a      	adds	r4, #10
 800b578:	2509      	movs	r5, #9
 800b57a:	e7f6      	b.n	800b56a <__s2b+0x66>
 800b57c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b580:	4601      	mov	r1, r0
 800b582:	3b30      	subs	r3, #48	; 0x30
 800b584:	220a      	movs	r2, #10
 800b586:	4630      	mov	r0, r6
 800b588:	f7ff ff76 	bl	800b478 <__multadd>
 800b58c:	e7ee      	b.n	800b56c <__s2b+0x68>
 800b58e:	bf00      	nop
 800b590:	0800e277 	.word	0x0800e277
 800b594:	0800e288 	.word	0x0800e288

0800b598 <__hi0bits>:
 800b598:	0c03      	lsrs	r3, r0, #16
 800b59a:	041b      	lsls	r3, r3, #16
 800b59c:	b9d3      	cbnz	r3, 800b5d4 <__hi0bits+0x3c>
 800b59e:	0400      	lsls	r0, r0, #16
 800b5a0:	2310      	movs	r3, #16
 800b5a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b5a6:	bf04      	itt	eq
 800b5a8:	0200      	lsleq	r0, r0, #8
 800b5aa:	3308      	addeq	r3, #8
 800b5ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b5b0:	bf04      	itt	eq
 800b5b2:	0100      	lsleq	r0, r0, #4
 800b5b4:	3304      	addeq	r3, #4
 800b5b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b5ba:	bf04      	itt	eq
 800b5bc:	0080      	lsleq	r0, r0, #2
 800b5be:	3302      	addeq	r3, #2
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	db05      	blt.n	800b5d0 <__hi0bits+0x38>
 800b5c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b5c8:	f103 0301 	add.w	r3, r3, #1
 800b5cc:	bf08      	it	eq
 800b5ce:	2320      	moveq	r3, #32
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	4770      	bx	lr
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	e7e4      	b.n	800b5a2 <__hi0bits+0xa>

0800b5d8 <__lo0bits>:
 800b5d8:	6803      	ldr	r3, [r0, #0]
 800b5da:	f013 0207 	ands.w	r2, r3, #7
 800b5de:	d00c      	beq.n	800b5fa <__lo0bits+0x22>
 800b5e0:	07d9      	lsls	r1, r3, #31
 800b5e2:	d422      	bmi.n	800b62a <__lo0bits+0x52>
 800b5e4:	079a      	lsls	r2, r3, #30
 800b5e6:	bf49      	itett	mi
 800b5e8:	085b      	lsrmi	r3, r3, #1
 800b5ea:	089b      	lsrpl	r3, r3, #2
 800b5ec:	6003      	strmi	r3, [r0, #0]
 800b5ee:	2201      	movmi	r2, #1
 800b5f0:	bf5c      	itt	pl
 800b5f2:	6003      	strpl	r3, [r0, #0]
 800b5f4:	2202      	movpl	r2, #2
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	4770      	bx	lr
 800b5fa:	b299      	uxth	r1, r3
 800b5fc:	b909      	cbnz	r1, 800b602 <__lo0bits+0x2a>
 800b5fe:	0c1b      	lsrs	r3, r3, #16
 800b600:	2210      	movs	r2, #16
 800b602:	b2d9      	uxtb	r1, r3
 800b604:	b909      	cbnz	r1, 800b60a <__lo0bits+0x32>
 800b606:	3208      	adds	r2, #8
 800b608:	0a1b      	lsrs	r3, r3, #8
 800b60a:	0719      	lsls	r1, r3, #28
 800b60c:	bf04      	itt	eq
 800b60e:	091b      	lsreq	r3, r3, #4
 800b610:	3204      	addeq	r2, #4
 800b612:	0799      	lsls	r1, r3, #30
 800b614:	bf04      	itt	eq
 800b616:	089b      	lsreq	r3, r3, #2
 800b618:	3202      	addeq	r2, #2
 800b61a:	07d9      	lsls	r1, r3, #31
 800b61c:	d403      	bmi.n	800b626 <__lo0bits+0x4e>
 800b61e:	085b      	lsrs	r3, r3, #1
 800b620:	f102 0201 	add.w	r2, r2, #1
 800b624:	d003      	beq.n	800b62e <__lo0bits+0x56>
 800b626:	6003      	str	r3, [r0, #0]
 800b628:	e7e5      	b.n	800b5f6 <__lo0bits+0x1e>
 800b62a:	2200      	movs	r2, #0
 800b62c:	e7e3      	b.n	800b5f6 <__lo0bits+0x1e>
 800b62e:	2220      	movs	r2, #32
 800b630:	e7e1      	b.n	800b5f6 <__lo0bits+0x1e>
	...

0800b634 <__i2b>:
 800b634:	b510      	push	{r4, lr}
 800b636:	460c      	mov	r4, r1
 800b638:	2101      	movs	r1, #1
 800b63a:	f7ff febb 	bl	800b3b4 <_Balloc>
 800b63e:	4602      	mov	r2, r0
 800b640:	b928      	cbnz	r0, 800b64e <__i2b+0x1a>
 800b642:	4b05      	ldr	r3, [pc, #20]	; (800b658 <__i2b+0x24>)
 800b644:	4805      	ldr	r0, [pc, #20]	; (800b65c <__i2b+0x28>)
 800b646:	f240 1145 	movw	r1, #325	; 0x145
 800b64a:	f001 fc41 	bl	800ced0 <__assert_func>
 800b64e:	2301      	movs	r3, #1
 800b650:	6144      	str	r4, [r0, #20]
 800b652:	6103      	str	r3, [r0, #16]
 800b654:	bd10      	pop	{r4, pc}
 800b656:	bf00      	nop
 800b658:	0800e277 	.word	0x0800e277
 800b65c:	0800e288 	.word	0x0800e288

0800b660 <__multiply>:
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	4691      	mov	r9, r2
 800b666:	690a      	ldr	r2, [r1, #16]
 800b668:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	bfb8      	it	lt
 800b670:	460b      	movlt	r3, r1
 800b672:	460c      	mov	r4, r1
 800b674:	bfbc      	itt	lt
 800b676:	464c      	movlt	r4, r9
 800b678:	4699      	movlt	r9, r3
 800b67a:	6927      	ldr	r7, [r4, #16]
 800b67c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b680:	68a3      	ldr	r3, [r4, #8]
 800b682:	6861      	ldr	r1, [r4, #4]
 800b684:	eb07 060a 	add.w	r6, r7, sl
 800b688:	42b3      	cmp	r3, r6
 800b68a:	b085      	sub	sp, #20
 800b68c:	bfb8      	it	lt
 800b68e:	3101      	addlt	r1, #1
 800b690:	f7ff fe90 	bl	800b3b4 <_Balloc>
 800b694:	b930      	cbnz	r0, 800b6a4 <__multiply+0x44>
 800b696:	4602      	mov	r2, r0
 800b698:	4b44      	ldr	r3, [pc, #272]	; (800b7ac <__multiply+0x14c>)
 800b69a:	4845      	ldr	r0, [pc, #276]	; (800b7b0 <__multiply+0x150>)
 800b69c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b6a0:	f001 fc16 	bl	800ced0 <__assert_func>
 800b6a4:	f100 0514 	add.w	r5, r0, #20
 800b6a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6ac:	462b      	mov	r3, r5
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	4543      	cmp	r3, r8
 800b6b2:	d321      	bcc.n	800b6f8 <__multiply+0x98>
 800b6b4:	f104 0314 	add.w	r3, r4, #20
 800b6b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b6bc:	f109 0314 	add.w	r3, r9, #20
 800b6c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b6c4:	9202      	str	r2, [sp, #8]
 800b6c6:	1b3a      	subs	r2, r7, r4
 800b6c8:	3a15      	subs	r2, #21
 800b6ca:	f022 0203 	bic.w	r2, r2, #3
 800b6ce:	3204      	adds	r2, #4
 800b6d0:	f104 0115 	add.w	r1, r4, #21
 800b6d4:	428f      	cmp	r7, r1
 800b6d6:	bf38      	it	cc
 800b6d8:	2204      	movcc	r2, #4
 800b6da:	9201      	str	r2, [sp, #4]
 800b6dc:	9a02      	ldr	r2, [sp, #8]
 800b6de:	9303      	str	r3, [sp, #12]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d80c      	bhi.n	800b6fe <__multiply+0x9e>
 800b6e4:	2e00      	cmp	r6, #0
 800b6e6:	dd03      	ble.n	800b6f0 <__multiply+0x90>
 800b6e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d05b      	beq.n	800b7a8 <__multiply+0x148>
 800b6f0:	6106      	str	r6, [r0, #16]
 800b6f2:	b005      	add	sp, #20
 800b6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f8:	f843 2b04 	str.w	r2, [r3], #4
 800b6fc:	e7d8      	b.n	800b6b0 <__multiply+0x50>
 800b6fe:	f8b3 a000 	ldrh.w	sl, [r3]
 800b702:	f1ba 0f00 	cmp.w	sl, #0
 800b706:	d024      	beq.n	800b752 <__multiply+0xf2>
 800b708:	f104 0e14 	add.w	lr, r4, #20
 800b70c:	46a9      	mov	r9, r5
 800b70e:	f04f 0c00 	mov.w	ip, #0
 800b712:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b716:	f8d9 1000 	ldr.w	r1, [r9]
 800b71a:	fa1f fb82 	uxth.w	fp, r2
 800b71e:	b289      	uxth	r1, r1
 800b720:	fb0a 110b 	mla	r1, sl, fp, r1
 800b724:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b728:	f8d9 2000 	ldr.w	r2, [r9]
 800b72c:	4461      	add	r1, ip
 800b72e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b732:	fb0a c20b 	mla	r2, sl, fp, ip
 800b736:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b73a:	b289      	uxth	r1, r1
 800b73c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b740:	4577      	cmp	r7, lr
 800b742:	f849 1b04 	str.w	r1, [r9], #4
 800b746:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b74a:	d8e2      	bhi.n	800b712 <__multiply+0xb2>
 800b74c:	9a01      	ldr	r2, [sp, #4]
 800b74e:	f845 c002 	str.w	ip, [r5, r2]
 800b752:	9a03      	ldr	r2, [sp, #12]
 800b754:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b758:	3304      	adds	r3, #4
 800b75a:	f1b9 0f00 	cmp.w	r9, #0
 800b75e:	d021      	beq.n	800b7a4 <__multiply+0x144>
 800b760:	6829      	ldr	r1, [r5, #0]
 800b762:	f104 0c14 	add.w	ip, r4, #20
 800b766:	46ae      	mov	lr, r5
 800b768:	f04f 0a00 	mov.w	sl, #0
 800b76c:	f8bc b000 	ldrh.w	fp, [ip]
 800b770:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b774:	fb09 220b 	mla	r2, r9, fp, r2
 800b778:	4452      	add	r2, sl
 800b77a:	b289      	uxth	r1, r1
 800b77c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b780:	f84e 1b04 	str.w	r1, [lr], #4
 800b784:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b788:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b78c:	f8be 1000 	ldrh.w	r1, [lr]
 800b790:	fb09 110a 	mla	r1, r9, sl, r1
 800b794:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b798:	4567      	cmp	r7, ip
 800b79a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b79e:	d8e5      	bhi.n	800b76c <__multiply+0x10c>
 800b7a0:	9a01      	ldr	r2, [sp, #4]
 800b7a2:	50a9      	str	r1, [r5, r2]
 800b7a4:	3504      	adds	r5, #4
 800b7a6:	e799      	b.n	800b6dc <__multiply+0x7c>
 800b7a8:	3e01      	subs	r6, #1
 800b7aa:	e79b      	b.n	800b6e4 <__multiply+0x84>
 800b7ac:	0800e277 	.word	0x0800e277
 800b7b0:	0800e288 	.word	0x0800e288

0800b7b4 <__pow5mult>:
 800b7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b8:	4615      	mov	r5, r2
 800b7ba:	f012 0203 	ands.w	r2, r2, #3
 800b7be:	4606      	mov	r6, r0
 800b7c0:	460f      	mov	r7, r1
 800b7c2:	d007      	beq.n	800b7d4 <__pow5mult+0x20>
 800b7c4:	4c25      	ldr	r4, [pc, #148]	; (800b85c <__pow5mult+0xa8>)
 800b7c6:	3a01      	subs	r2, #1
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7ce:	f7ff fe53 	bl	800b478 <__multadd>
 800b7d2:	4607      	mov	r7, r0
 800b7d4:	10ad      	asrs	r5, r5, #2
 800b7d6:	d03d      	beq.n	800b854 <__pow5mult+0xa0>
 800b7d8:	69f4      	ldr	r4, [r6, #28]
 800b7da:	b97c      	cbnz	r4, 800b7fc <__pow5mult+0x48>
 800b7dc:	2010      	movs	r0, #16
 800b7de:	f7ff fd35 	bl	800b24c <malloc>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	61f0      	str	r0, [r6, #28]
 800b7e6:	b928      	cbnz	r0, 800b7f4 <__pow5mult+0x40>
 800b7e8:	4b1d      	ldr	r3, [pc, #116]	; (800b860 <__pow5mult+0xac>)
 800b7ea:	481e      	ldr	r0, [pc, #120]	; (800b864 <__pow5mult+0xb0>)
 800b7ec:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b7f0:	f001 fb6e 	bl	800ced0 <__assert_func>
 800b7f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7f8:	6004      	str	r4, [r0, #0]
 800b7fa:	60c4      	str	r4, [r0, #12]
 800b7fc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b800:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b804:	b94c      	cbnz	r4, 800b81a <__pow5mult+0x66>
 800b806:	f240 2171 	movw	r1, #625	; 0x271
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7ff ff12 	bl	800b634 <__i2b>
 800b810:	2300      	movs	r3, #0
 800b812:	f8c8 0008 	str.w	r0, [r8, #8]
 800b816:	4604      	mov	r4, r0
 800b818:	6003      	str	r3, [r0, #0]
 800b81a:	f04f 0900 	mov.w	r9, #0
 800b81e:	07eb      	lsls	r3, r5, #31
 800b820:	d50a      	bpl.n	800b838 <__pow5mult+0x84>
 800b822:	4639      	mov	r1, r7
 800b824:	4622      	mov	r2, r4
 800b826:	4630      	mov	r0, r6
 800b828:	f7ff ff1a 	bl	800b660 <__multiply>
 800b82c:	4639      	mov	r1, r7
 800b82e:	4680      	mov	r8, r0
 800b830:	4630      	mov	r0, r6
 800b832:	f7ff fdff 	bl	800b434 <_Bfree>
 800b836:	4647      	mov	r7, r8
 800b838:	106d      	asrs	r5, r5, #1
 800b83a:	d00b      	beq.n	800b854 <__pow5mult+0xa0>
 800b83c:	6820      	ldr	r0, [r4, #0]
 800b83e:	b938      	cbnz	r0, 800b850 <__pow5mult+0x9c>
 800b840:	4622      	mov	r2, r4
 800b842:	4621      	mov	r1, r4
 800b844:	4630      	mov	r0, r6
 800b846:	f7ff ff0b 	bl	800b660 <__multiply>
 800b84a:	6020      	str	r0, [r4, #0]
 800b84c:	f8c0 9000 	str.w	r9, [r0]
 800b850:	4604      	mov	r4, r0
 800b852:	e7e4      	b.n	800b81e <__pow5mult+0x6a>
 800b854:	4638      	mov	r0, r7
 800b856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b85a:	bf00      	nop
 800b85c:	0800e3d8 	.word	0x0800e3d8
 800b860:	0800e208 	.word	0x0800e208
 800b864:	0800e288 	.word	0x0800e288

0800b868 <__lshift>:
 800b868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b86c:	460c      	mov	r4, r1
 800b86e:	6849      	ldr	r1, [r1, #4]
 800b870:	6923      	ldr	r3, [r4, #16]
 800b872:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b876:	68a3      	ldr	r3, [r4, #8]
 800b878:	4607      	mov	r7, r0
 800b87a:	4691      	mov	r9, r2
 800b87c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b880:	f108 0601 	add.w	r6, r8, #1
 800b884:	42b3      	cmp	r3, r6
 800b886:	db0b      	blt.n	800b8a0 <__lshift+0x38>
 800b888:	4638      	mov	r0, r7
 800b88a:	f7ff fd93 	bl	800b3b4 <_Balloc>
 800b88e:	4605      	mov	r5, r0
 800b890:	b948      	cbnz	r0, 800b8a6 <__lshift+0x3e>
 800b892:	4602      	mov	r2, r0
 800b894:	4b28      	ldr	r3, [pc, #160]	; (800b938 <__lshift+0xd0>)
 800b896:	4829      	ldr	r0, [pc, #164]	; (800b93c <__lshift+0xd4>)
 800b898:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b89c:	f001 fb18 	bl	800ced0 <__assert_func>
 800b8a0:	3101      	adds	r1, #1
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	e7ee      	b.n	800b884 <__lshift+0x1c>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f100 0114 	add.w	r1, r0, #20
 800b8ac:	f100 0210 	add.w	r2, r0, #16
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	4553      	cmp	r3, sl
 800b8b4:	db33      	blt.n	800b91e <__lshift+0xb6>
 800b8b6:	6920      	ldr	r0, [r4, #16]
 800b8b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8bc:	f104 0314 	add.w	r3, r4, #20
 800b8c0:	f019 091f 	ands.w	r9, r9, #31
 800b8c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8cc:	d02b      	beq.n	800b926 <__lshift+0xbe>
 800b8ce:	f1c9 0e20 	rsb	lr, r9, #32
 800b8d2:	468a      	mov	sl, r1
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	6818      	ldr	r0, [r3, #0]
 800b8d8:	fa00 f009 	lsl.w	r0, r0, r9
 800b8dc:	4310      	orrs	r0, r2
 800b8de:	f84a 0b04 	str.w	r0, [sl], #4
 800b8e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e6:	459c      	cmp	ip, r3
 800b8e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8ec:	d8f3      	bhi.n	800b8d6 <__lshift+0x6e>
 800b8ee:	ebac 0304 	sub.w	r3, ip, r4
 800b8f2:	3b15      	subs	r3, #21
 800b8f4:	f023 0303 	bic.w	r3, r3, #3
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	f104 0015 	add.w	r0, r4, #21
 800b8fe:	4584      	cmp	ip, r0
 800b900:	bf38      	it	cc
 800b902:	2304      	movcc	r3, #4
 800b904:	50ca      	str	r2, [r1, r3]
 800b906:	b10a      	cbz	r2, 800b90c <__lshift+0xa4>
 800b908:	f108 0602 	add.w	r6, r8, #2
 800b90c:	3e01      	subs	r6, #1
 800b90e:	4638      	mov	r0, r7
 800b910:	612e      	str	r6, [r5, #16]
 800b912:	4621      	mov	r1, r4
 800b914:	f7ff fd8e 	bl	800b434 <_Bfree>
 800b918:	4628      	mov	r0, r5
 800b91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b922:	3301      	adds	r3, #1
 800b924:	e7c5      	b.n	800b8b2 <__lshift+0x4a>
 800b926:	3904      	subs	r1, #4
 800b928:	f853 2b04 	ldr.w	r2, [r3], #4
 800b92c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b930:	459c      	cmp	ip, r3
 800b932:	d8f9      	bhi.n	800b928 <__lshift+0xc0>
 800b934:	e7ea      	b.n	800b90c <__lshift+0xa4>
 800b936:	bf00      	nop
 800b938:	0800e277 	.word	0x0800e277
 800b93c:	0800e288 	.word	0x0800e288

0800b940 <__mcmp>:
 800b940:	b530      	push	{r4, r5, lr}
 800b942:	6902      	ldr	r2, [r0, #16]
 800b944:	690c      	ldr	r4, [r1, #16]
 800b946:	1b12      	subs	r2, r2, r4
 800b948:	d10e      	bne.n	800b968 <__mcmp+0x28>
 800b94a:	f100 0314 	add.w	r3, r0, #20
 800b94e:	3114      	adds	r1, #20
 800b950:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b954:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b958:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b95c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b960:	42a5      	cmp	r5, r4
 800b962:	d003      	beq.n	800b96c <__mcmp+0x2c>
 800b964:	d305      	bcc.n	800b972 <__mcmp+0x32>
 800b966:	2201      	movs	r2, #1
 800b968:	4610      	mov	r0, r2
 800b96a:	bd30      	pop	{r4, r5, pc}
 800b96c:	4283      	cmp	r3, r0
 800b96e:	d3f3      	bcc.n	800b958 <__mcmp+0x18>
 800b970:	e7fa      	b.n	800b968 <__mcmp+0x28>
 800b972:	f04f 32ff 	mov.w	r2, #4294967295
 800b976:	e7f7      	b.n	800b968 <__mcmp+0x28>

0800b978 <__mdiff>:
 800b978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	460c      	mov	r4, r1
 800b97e:	4606      	mov	r6, r0
 800b980:	4611      	mov	r1, r2
 800b982:	4620      	mov	r0, r4
 800b984:	4690      	mov	r8, r2
 800b986:	f7ff ffdb 	bl	800b940 <__mcmp>
 800b98a:	1e05      	subs	r5, r0, #0
 800b98c:	d110      	bne.n	800b9b0 <__mdiff+0x38>
 800b98e:	4629      	mov	r1, r5
 800b990:	4630      	mov	r0, r6
 800b992:	f7ff fd0f 	bl	800b3b4 <_Balloc>
 800b996:	b930      	cbnz	r0, 800b9a6 <__mdiff+0x2e>
 800b998:	4b3a      	ldr	r3, [pc, #232]	; (800ba84 <__mdiff+0x10c>)
 800b99a:	4602      	mov	r2, r0
 800b99c:	f240 2137 	movw	r1, #567	; 0x237
 800b9a0:	4839      	ldr	r0, [pc, #228]	; (800ba88 <__mdiff+0x110>)
 800b9a2:	f001 fa95 	bl	800ced0 <__assert_func>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b0:	bfa4      	itt	ge
 800b9b2:	4643      	movge	r3, r8
 800b9b4:	46a0      	movge	r8, r4
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b9bc:	bfa6      	itte	ge
 800b9be:	461c      	movge	r4, r3
 800b9c0:	2500      	movge	r5, #0
 800b9c2:	2501      	movlt	r5, #1
 800b9c4:	f7ff fcf6 	bl	800b3b4 <_Balloc>
 800b9c8:	b920      	cbnz	r0, 800b9d4 <__mdiff+0x5c>
 800b9ca:	4b2e      	ldr	r3, [pc, #184]	; (800ba84 <__mdiff+0x10c>)
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	f240 2145 	movw	r1, #581	; 0x245
 800b9d2:	e7e5      	b.n	800b9a0 <__mdiff+0x28>
 800b9d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9d8:	6926      	ldr	r6, [r4, #16]
 800b9da:	60c5      	str	r5, [r0, #12]
 800b9dc:	f104 0914 	add.w	r9, r4, #20
 800b9e0:	f108 0514 	add.w	r5, r8, #20
 800b9e4:	f100 0e14 	add.w	lr, r0, #20
 800b9e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b9ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b9f0:	f108 0210 	add.w	r2, r8, #16
 800b9f4:	46f2      	mov	sl, lr
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba00:	fa11 f88b 	uxtah	r8, r1, fp
 800ba04:	b299      	uxth	r1, r3
 800ba06:	0c1b      	lsrs	r3, r3, #16
 800ba08:	eba8 0801 	sub.w	r8, r8, r1
 800ba0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba10:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba14:	fa1f f888 	uxth.w	r8, r8
 800ba18:	1419      	asrs	r1, r3, #16
 800ba1a:	454e      	cmp	r6, r9
 800ba1c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ba20:	f84a 3b04 	str.w	r3, [sl], #4
 800ba24:	d8e8      	bhi.n	800b9f8 <__mdiff+0x80>
 800ba26:	1b33      	subs	r3, r6, r4
 800ba28:	3b15      	subs	r3, #21
 800ba2a:	f023 0303 	bic.w	r3, r3, #3
 800ba2e:	3304      	adds	r3, #4
 800ba30:	3415      	adds	r4, #21
 800ba32:	42a6      	cmp	r6, r4
 800ba34:	bf38      	it	cc
 800ba36:	2304      	movcc	r3, #4
 800ba38:	441d      	add	r5, r3
 800ba3a:	4473      	add	r3, lr
 800ba3c:	469e      	mov	lr, r3
 800ba3e:	462e      	mov	r6, r5
 800ba40:	4566      	cmp	r6, ip
 800ba42:	d30e      	bcc.n	800ba62 <__mdiff+0xea>
 800ba44:	f10c 0203 	add.w	r2, ip, #3
 800ba48:	1b52      	subs	r2, r2, r5
 800ba4a:	f022 0203 	bic.w	r2, r2, #3
 800ba4e:	3d03      	subs	r5, #3
 800ba50:	45ac      	cmp	ip, r5
 800ba52:	bf38      	it	cc
 800ba54:	2200      	movcc	r2, #0
 800ba56:	4413      	add	r3, r2
 800ba58:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba5c:	b17a      	cbz	r2, 800ba7e <__mdiff+0x106>
 800ba5e:	6107      	str	r7, [r0, #16]
 800ba60:	e7a4      	b.n	800b9ac <__mdiff+0x34>
 800ba62:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba66:	fa11 f288 	uxtah	r2, r1, r8
 800ba6a:	1414      	asrs	r4, r2, #16
 800ba6c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba70:	b292      	uxth	r2, r2
 800ba72:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba76:	f84e 2b04 	str.w	r2, [lr], #4
 800ba7a:	1421      	asrs	r1, r4, #16
 800ba7c:	e7e0      	b.n	800ba40 <__mdiff+0xc8>
 800ba7e:	3f01      	subs	r7, #1
 800ba80:	e7ea      	b.n	800ba58 <__mdiff+0xe0>
 800ba82:	bf00      	nop
 800ba84:	0800e277 	.word	0x0800e277
 800ba88:	0800e288 	.word	0x0800e288

0800ba8c <__ulp>:
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	ed8d 0b00 	vstr	d0, [sp]
 800ba92:	9a01      	ldr	r2, [sp, #4]
 800ba94:	4b0f      	ldr	r3, [pc, #60]	; (800bad4 <__ulp+0x48>)
 800ba96:	4013      	ands	r3, r2
 800ba98:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	dc08      	bgt.n	800bab2 <__ulp+0x26>
 800baa0:	425b      	negs	r3, r3
 800baa2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800baa6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800baaa:	da04      	bge.n	800bab6 <__ulp+0x2a>
 800baac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bab0:	4113      	asrs	r3, r2
 800bab2:	2200      	movs	r2, #0
 800bab4:	e008      	b.n	800bac8 <__ulp+0x3c>
 800bab6:	f1a2 0314 	sub.w	r3, r2, #20
 800baba:	2b1e      	cmp	r3, #30
 800babc:	bfda      	itte	le
 800babe:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bac2:	40da      	lsrle	r2, r3
 800bac4:	2201      	movgt	r2, #1
 800bac6:	2300      	movs	r3, #0
 800bac8:	4619      	mov	r1, r3
 800baca:	4610      	mov	r0, r2
 800bacc:	ec41 0b10 	vmov	d0, r0, r1
 800bad0:	b002      	add	sp, #8
 800bad2:	4770      	bx	lr
 800bad4:	7ff00000 	.word	0x7ff00000

0800bad8 <__b2d>:
 800bad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800badc:	6906      	ldr	r6, [r0, #16]
 800bade:	f100 0814 	add.w	r8, r0, #20
 800bae2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bae6:	1f37      	subs	r7, r6, #4
 800bae8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800baec:	4610      	mov	r0, r2
 800baee:	f7ff fd53 	bl	800b598 <__hi0bits>
 800baf2:	f1c0 0320 	rsb	r3, r0, #32
 800baf6:	280a      	cmp	r0, #10
 800baf8:	600b      	str	r3, [r1, #0]
 800bafa:	491b      	ldr	r1, [pc, #108]	; (800bb68 <__b2d+0x90>)
 800bafc:	dc15      	bgt.n	800bb2a <__b2d+0x52>
 800bafe:	f1c0 0c0b 	rsb	ip, r0, #11
 800bb02:	fa22 f30c 	lsr.w	r3, r2, ip
 800bb06:	45b8      	cmp	r8, r7
 800bb08:	ea43 0501 	orr.w	r5, r3, r1
 800bb0c:	bf34      	ite	cc
 800bb0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb12:	2300      	movcs	r3, #0
 800bb14:	3015      	adds	r0, #21
 800bb16:	fa02 f000 	lsl.w	r0, r2, r0
 800bb1a:	fa23 f30c 	lsr.w	r3, r3, ip
 800bb1e:	4303      	orrs	r3, r0
 800bb20:	461c      	mov	r4, r3
 800bb22:	ec45 4b10 	vmov	d0, r4, r5
 800bb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2a:	45b8      	cmp	r8, r7
 800bb2c:	bf3a      	itte	cc
 800bb2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb32:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb36:	2300      	movcs	r3, #0
 800bb38:	380b      	subs	r0, #11
 800bb3a:	d012      	beq.n	800bb62 <__b2d+0x8a>
 800bb3c:	f1c0 0120 	rsb	r1, r0, #32
 800bb40:	fa23 f401 	lsr.w	r4, r3, r1
 800bb44:	4082      	lsls	r2, r0
 800bb46:	4322      	orrs	r2, r4
 800bb48:	4547      	cmp	r7, r8
 800bb4a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bb4e:	bf8c      	ite	hi
 800bb50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb54:	2200      	movls	r2, #0
 800bb56:	4083      	lsls	r3, r0
 800bb58:	40ca      	lsrs	r2, r1
 800bb5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	e7de      	b.n	800bb20 <__b2d+0x48>
 800bb62:	ea42 0501 	orr.w	r5, r2, r1
 800bb66:	e7db      	b.n	800bb20 <__b2d+0x48>
 800bb68:	3ff00000 	.word	0x3ff00000

0800bb6c <__d2b>:
 800bb6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb70:	460f      	mov	r7, r1
 800bb72:	2101      	movs	r1, #1
 800bb74:	ec59 8b10 	vmov	r8, r9, d0
 800bb78:	4616      	mov	r6, r2
 800bb7a:	f7ff fc1b 	bl	800b3b4 <_Balloc>
 800bb7e:	4604      	mov	r4, r0
 800bb80:	b930      	cbnz	r0, 800bb90 <__d2b+0x24>
 800bb82:	4602      	mov	r2, r0
 800bb84:	4b24      	ldr	r3, [pc, #144]	; (800bc18 <__d2b+0xac>)
 800bb86:	4825      	ldr	r0, [pc, #148]	; (800bc1c <__d2b+0xb0>)
 800bb88:	f240 310f 	movw	r1, #783	; 0x30f
 800bb8c:	f001 f9a0 	bl	800ced0 <__assert_func>
 800bb90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb98:	bb2d      	cbnz	r5, 800bbe6 <__d2b+0x7a>
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	f1b8 0300 	subs.w	r3, r8, #0
 800bba0:	d026      	beq.n	800bbf0 <__d2b+0x84>
 800bba2:	4668      	mov	r0, sp
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	f7ff fd17 	bl	800b5d8 <__lo0bits>
 800bbaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbae:	b1e8      	cbz	r0, 800bbec <__d2b+0x80>
 800bbb0:	f1c0 0320 	rsb	r3, r0, #32
 800bbb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	40c2      	lsrs	r2, r0
 800bbbc:	6163      	str	r3, [r4, #20]
 800bbbe:	9201      	str	r2, [sp, #4]
 800bbc0:	9b01      	ldr	r3, [sp, #4]
 800bbc2:	61a3      	str	r3, [r4, #24]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	bf14      	ite	ne
 800bbc8:	2202      	movne	r2, #2
 800bbca:	2201      	moveq	r2, #1
 800bbcc:	6122      	str	r2, [r4, #16]
 800bbce:	b1bd      	cbz	r5, 800bc00 <__d2b+0x94>
 800bbd0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bbd4:	4405      	add	r5, r0
 800bbd6:	603d      	str	r5, [r7, #0]
 800bbd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbdc:	6030      	str	r0, [r6, #0]
 800bbde:	4620      	mov	r0, r4
 800bbe0:	b003      	add	sp, #12
 800bbe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbea:	e7d6      	b.n	800bb9a <__d2b+0x2e>
 800bbec:	6161      	str	r1, [r4, #20]
 800bbee:	e7e7      	b.n	800bbc0 <__d2b+0x54>
 800bbf0:	a801      	add	r0, sp, #4
 800bbf2:	f7ff fcf1 	bl	800b5d8 <__lo0bits>
 800bbf6:	9b01      	ldr	r3, [sp, #4]
 800bbf8:	6163      	str	r3, [r4, #20]
 800bbfa:	3020      	adds	r0, #32
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	e7e5      	b.n	800bbcc <__d2b+0x60>
 800bc00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc08:	6038      	str	r0, [r7, #0]
 800bc0a:	6918      	ldr	r0, [r3, #16]
 800bc0c:	f7ff fcc4 	bl	800b598 <__hi0bits>
 800bc10:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc14:	e7e2      	b.n	800bbdc <__d2b+0x70>
 800bc16:	bf00      	nop
 800bc18:	0800e277 	.word	0x0800e277
 800bc1c:	0800e288 	.word	0x0800e288

0800bc20 <__ratio>:
 800bc20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc24:	4688      	mov	r8, r1
 800bc26:	4669      	mov	r1, sp
 800bc28:	4681      	mov	r9, r0
 800bc2a:	f7ff ff55 	bl	800bad8 <__b2d>
 800bc2e:	a901      	add	r1, sp, #4
 800bc30:	4640      	mov	r0, r8
 800bc32:	ec55 4b10 	vmov	r4, r5, d0
 800bc36:	f7ff ff4f 	bl	800bad8 <__b2d>
 800bc3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bc42:	eba3 0c02 	sub.w	ip, r3, r2
 800bc46:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc4a:	1a9b      	subs	r3, r3, r2
 800bc4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bc50:	ec51 0b10 	vmov	r0, r1, d0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	bfd6      	itet	le
 800bc58:	460a      	movle	r2, r1
 800bc5a:	462a      	movgt	r2, r5
 800bc5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc60:	468b      	mov	fp, r1
 800bc62:	462f      	mov	r7, r5
 800bc64:	bfd4      	ite	le
 800bc66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bc6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bc6e:	4620      	mov	r0, r4
 800bc70:	ee10 2a10 	vmov	r2, s0
 800bc74:	465b      	mov	r3, fp
 800bc76:	4639      	mov	r1, r7
 800bc78:	f7f4 fe38 	bl	80008ec <__aeabi_ddiv>
 800bc7c:	ec41 0b10 	vmov	d0, r0, r1
 800bc80:	b003      	add	sp, #12
 800bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc86 <__copybits>:
 800bc86:	3901      	subs	r1, #1
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	1149      	asrs	r1, r1, #5
 800bc8c:	6914      	ldr	r4, [r2, #16]
 800bc8e:	3101      	adds	r1, #1
 800bc90:	f102 0314 	add.w	r3, r2, #20
 800bc94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc9c:	1f05      	subs	r5, r0, #4
 800bc9e:	42a3      	cmp	r3, r4
 800bca0:	d30c      	bcc.n	800bcbc <__copybits+0x36>
 800bca2:	1aa3      	subs	r3, r4, r2
 800bca4:	3b11      	subs	r3, #17
 800bca6:	f023 0303 	bic.w	r3, r3, #3
 800bcaa:	3211      	adds	r2, #17
 800bcac:	42a2      	cmp	r2, r4
 800bcae:	bf88      	it	hi
 800bcb0:	2300      	movhi	r3, #0
 800bcb2:	4418      	add	r0, r3
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4288      	cmp	r0, r1
 800bcb8:	d305      	bcc.n	800bcc6 <__copybits+0x40>
 800bcba:	bd70      	pop	{r4, r5, r6, pc}
 800bcbc:	f853 6b04 	ldr.w	r6, [r3], #4
 800bcc0:	f845 6f04 	str.w	r6, [r5, #4]!
 800bcc4:	e7eb      	b.n	800bc9e <__copybits+0x18>
 800bcc6:	f840 3b04 	str.w	r3, [r0], #4
 800bcca:	e7f4      	b.n	800bcb6 <__copybits+0x30>

0800bccc <__any_on>:
 800bccc:	f100 0214 	add.w	r2, r0, #20
 800bcd0:	6900      	ldr	r0, [r0, #16]
 800bcd2:	114b      	asrs	r3, r1, #5
 800bcd4:	4298      	cmp	r0, r3
 800bcd6:	b510      	push	{r4, lr}
 800bcd8:	db11      	blt.n	800bcfe <__any_on+0x32>
 800bcda:	dd0a      	ble.n	800bcf2 <__any_on+0x26>
 800bcdc:	f011 011f 	ands.w	r1, r1, #31
 800bce0:	d007      	beq.n	800bcf2 <__any_on+0x26>
 800bce2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bce6:	fa24 f001 	lsr.w	r0, r4, r1
 800bcea:	fa00 f101 	lsl.w	r1, r0, r1
 800bcee:	428c      	cmp	r4, r1
 800bcf0:	d10b      	bne.n	800bd0a <__any_on+0x3e>
 800bcf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d803      	bhi.n	800bd02 <__any_on+0x36>
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	bd10      	pop	{r4, pc}
 800bcfe:	4603      	mov	r3, r0
 800bd00:	e7f7      	b.n	800bcf2 <__any_on+0x26>
 800bd02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd06:	2900      	cmp	r1, #0
 800bd08:	d0f5      	beq.n	800bcf6 <__any_on+0x2a>
 800bd0a:	2001      	movs	r0, #1
 800bd0c:	e7f6      	b.n	800bcfc <__any_on+0x30>

0800bd0e <sulp>:
 800bd0e:	b570      	push	{r4, r5, r6, lr}
 800bd10:	4604      	mov	r4, r0
 800bd12:	460d      	mov	r5, r1
 800bd14:	ec45 4b10 	vmov	d0, r4, r5
 800bd18:	4616      	mov	r6, r2
 800bd1a:	f7ff feb7 	bl	800ba8c <__ulp>
 800bd1e:	ec51 0b10 	vmov	r0, r1, d0
 800bd22:	b17e      	cbz	r6, 800bd44 <sulp+0x36>
 800bd24:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	dd09      	ble.n	800bd44 <sulp+0x36>
 800bd30:	051b      	lsls	r3, r3, #20
 800bd32:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bd36:	2400      	movs	r4, #0
 800bd38:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	462b      	mov	r3, r5
 800bd40:	f7f4 fcaa 	bl	8000698 <__aeabi_dmul>
 800bd44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd48 <_strtod_l>:
 800bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	ed2d 8b02 	vpush	{d8}
 800bd50:	b09b      	sub	sp, #108	; 0x6c
 800bd52:	4604      	mov	r4, r0
 800bd54:	9213      	str	r2, [sp, #76]	; 0x4c
 800bd56:	2200      	movs	r2, #0
 800bd58:	9216      	str	r2, [sp, #88]	; 0x58
 800bd5a:	460d      	mov	r5, r1
 800bd5c:	f04f 0800 	mov.w	r8, #0
 800bd60:	f04f 0900 	mov.w	r9, #0
 800bd64:	460a      	mov	r2, r1
 800bd66:	9215      	str	r2, [sp, #84]	; 0x54
 800bd68:	7811      	ldrb	r1, [r2, #0]
 800bd6a:	292b      	cmp	r1, #43	; 0x2b
 800bd6c:	d04c      	beq.n	800be08 <_strtod_l+0xc0>
 800bd6e:	d83a      	bhi.n	800bde6 <_strtod_l+0x9e>
 800bd70:	290d      	cmp	r1, #13
 800bd72:	d834      	bhi.n	800bdde <_strtod_l+0x96>
 800bd74:	2908      	cmp	r1, #8
 800bd76:	d834      	bhi.n	800bde2 <_strtod_l+0x9a>
 800bd78:	2900      	cmp	r1, #0
 800bd7a:	d03d      	beq.n	800bdf8 <_strtod_l+0xb0>
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	920a      	str	r2, [sp, #40]	; 0x28
 800bd80:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bd82:	7832      	ldrb	r2, [r6, #0]
 800bd84:	2a30      	cmp	r2, #48	; 0x30
 800bd86:	f040 80b4 	bne.w	800bef2 <_strtod_l+0x1aa>
 800bd8a:	7872      	ldrb	r2, [r6, #1]
 800bd8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bd90:	2a58      	cmp	r2, #88	; 0x58
 800bd92:	d170      	bne.n	800be76 <_strtod_l+0x12e>
 800bd94:	9302      	str	r3, [sp, #8]
 800bd96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	ab16      	add	r3, sp, #88	; 0x58
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	4a8e      	ldr	r2, [pc, #568]	; (800bfd8 <_strtod_l+0x290>)
 800bda0:	ab17      	add	r3, sp, #92	; 0x5c
 800bda2:	a915      	add	r1, sp, #84	; 0x54
 800bda4:	4620      	mov	r0, r4
 800bda6:	f001 f92f 	bl	800d008 <__gethex>
 800bdaa:	f010 070f 	ands.w	r7, r0, #15
 800bdae:	4605      	mov	r5, r0
 800bdb0:	d005      	beq.n	800bdbe <_strtod_l+0x76>
 800bdb2:	2f06      	cmp	r7, #6
 800bdb4:	d12a      	bne.n	800be0c <_strtod_l+0xc4>
 800bdb6:	3601      	adds	r6, #1
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9615      	str	r6, [sp, #84]	; 0x54
 800bdbc:	930a      	str	r3, [sp, #40]	; 0x28
 800bdbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f040 857f 	bne.w	800c8c4 <_strtod_l+0xb7c>
 800bdc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc8:	b1db      	cbz	r3, 800be02 <_strtod_l+0xba>
 800bdca:	4642      	mov	r2, r8
 800bdcc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bdd0:	ec43 2b10 	vmov	d0, r2, r3
 800bdd4:	b01b      	add	sp, #108	; 0x6c
 800bdd6:	ecbd 8b02 	vpop	{d8}
 800bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdde:	2920      	cmp	r1, #32
 800bde0:	d1cc      	bne.n	800bd7c <_strtod_l+0x34>
 800bde2:	3201      	adds	r2, #1
 800bde4:	e7bf      	b.n	800bd66 <_strtod_l+0x1e>
 800bde6:	292d      	cmp	r1, #45	; 0x2d
 800bde8:	d1c8      	bne.n	800bd7c <_strtod_l+0x34>
 800bdea:	2101      	movs	r1, #1
 800bdec:	910a      	str	r1, [sp, #40]	; 0x28
 800bdee:	1c51      	adds	r1, r2, #1
 800bdf0:	9115      	str	r1, [sp, #84]	; 0x54
 800bdf2:	7852      	ldrb	r2, [r2, #1]
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	d1c3      	bne.n	800bd80 <_strtod_l+0x38>
 800bdf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdfa:	9515      	str	r5, [sp, #84]	; 0x54
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f040 855f 	bne.w	800c8c0 <_strtod_l+0xb78>
 800be02:	4642      	mov	r2, r8
 800be04:	464b      	mov	r3, r9
 800be06:	e7e3      	b.n	800bdd0 <_strtod_l+0x88>
 800be08:	2100      	movs	r1, #0
 800be0a:	e7ef      	b.n	800bdec <_strtod_l+0xa4>
 800be0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be0e:	b13a      	cbz	r2, 800be20 <_strtod_l+0xd8>
 800be10:	2135      	movs	r1, #53	; 0x35
 800be12:	a818      	add	r0, sp, #96	; 0x60
 800be14:	f7ff ff37 	bl	800bc86 <__copybits>
 800be18:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be1a:	4620      	mov	r0, r4
 800be1c:	f7ff fb0a 	bl	800b434 <_Bfree>
 800be20:	3f01      	subs	r7, #1
 800be22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be24:	2f04      	cmp	r7, #4
 800be26:	d806      	bhi.n	800be36 <_strtod_l+0xee>
 800be28:	e8df f007 	tbb	[pc, r7]
 800be2c:	201d0314 	.word	0x201d0314
 800be30:	14          	.byte	0x14
 800be31:	00          	.byte	0x00
 800be32:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800be36:	05e9      	lsls	r1, r5, #23
 800be38:	bf48      	it	mi
 800be3a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800be3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be42:	0d1b      	lsrs	r3, r3, #20
 800be44:	051b      	lsls	r3, r3, #20
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1b9      	bne.n	800bdbe <_strtod_l+0x76>
 800be4a:	f7fe faf5 	bl	800a438 <__errno>
 800be4e:	2322      	movs	r3, #34	; 0x22
 800be50:	6003      	str	r3, [r0, #0]
 800be52:	e7b4      	b.n	800bdbe <_strtod_l+0x76>
 800be54:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800be58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be60:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800be64:	e7e7      	b.n	800be36 <_strtod_l+0xee>
 800be66:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bfe0 <_strtod_l+0x298>
 800be6a:	e7e4      	b.n	800be36 <_strtod_l+0xee>
 800be6c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800be70:	f04f 38ff 	mov.w	r8, #4294967295
 800be74:	e7df      	b.n	800be36 <_strtod_l+0xee>
 800be76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	9215      	str	r2, [sp, #84]	; 0x54
 800be7c:	785b      	ldrb	r3, [r3, #1]
 800be7e:	2b30      	cmp	r3, #48	; 0x30
 800be80:	d0f9      	beq.n	800be76 <_strtod_l+0x12e>
 800be82:	2b00      	cmp	r3, #0
 800be84:	d09b      	beq.n	800bdbe <_strtod_l+0x76>
 800be86:	2301      	movs	r3, #1
 800be88:	f04f 0a00 	mov.w	sl, #0
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be90:	930b      	str	r3, [sp, #44]	; 0x2c
 800be92:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800be96:	46d3      	mov	fp, sl
 800be98:	220a      	movs	r2, #10
 800be9a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800be9c:	7806      	ldrb	r6, [r0, #0]
 800be9e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bea2:	b2d9      	uxtb	r1, r3
 800bea4:	2909      	cmp	r1, #9
 800bea6:	d926      	bls.n	800bef6 <_strtod_l+0x1ae>
 800bea8:	494c      	ldr	r1, [pc, #304]	; (800bfdc <_strtod_l+0x294>)
 800beaa:	2201      	movs	r2, #1
 800beac:	f000 ffe6 	bl	800ce7c <strncmp>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d030      	beq.n	800bf16 <_strtod_l+0x1ce>
 800beb4:	2000      	movs	r0, #0
 800beb6:	4632      	mov	r2, r6
 800beb8:	9005      	str	r0, [sp, #20]
 800beba:	465e      	mov	r6, fp
 800bebc:	4603      	mov	r3, r0
 800bebe:	2a65      	cmp	r2, #101	; 0x65
 800bec0:	d001      	beq.n	800bec6 <_strtod_l+0x17e>
 800bec2:	2a45      	cmp	r2, #69	; 0x45
 800bec4:	d113      	bne.n	800beee <_strtod_l+0x1a6>
 800bec6:	b91e      	cbnz	r6, 800bed0 <_strtod_l+0x188>
 800bec8:	9a04      	ldr	r2, [sp, #16]
 800beca:	4302      	orrs	r2, r0
 800becc:	d094      	beq.n	800bdf8 <_strtod_l+0xb0>
 800bece:	2600      	movs	r6, #0
 800bed0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bed2:	1c6a      	adds	r2, r5, #1
 800bed4:	9215      	str	r2, [sp, #84]	; 0x54
 800bed6:	786a      	ldrb	r2, [r5, #1]
 800bed8:	2a2b      	cmp	r2, #43	; 0x2b
 800beda:	d074      	beq.n	800bfc6 <_strtod_l+0x27e>
 800bedc:	2a2d      	cmp	r2, #45	; 0x2d
 800bede:	d078      	beq.n	800bfd2 <_strtod_l+0x28a>
 800bee0:	f04f 0c00 	mov.w	ip, #0
 800bee4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bee8:	2909      	cmp	r1, #9
 800beea:	d97f      	bls.n	800bfec <_strtod_l+0x2a4>
 800beec:	9515      	str	r5, [sp, #84]	; 0x54
 800beee:	2700      	movs	r7, #0
 800bef0:	e09e      	b.n	800c030 <_strtod_l+0x2e8>
 800bef2:	2300      	movs	r3, #0
 800bef4:	e7c8      	b.n	800be88 <_strtod_l+0x140>
 800bef6:	f1bb 0f08 	cmp.w	fp, #8
 800befa:	bfd8      	it	le
 800befc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800befe:	f100 0001 	add.w	r0, r0, #1
 800bf02:	bfda      	itte	le
 800bf04:	fb02 3301 	mlale	r3, r2, r1, r3
 800bf08:	9309      	strle	r3, [sp, #36]	; 0x24
 800bf0a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bf0e:	f10b 0b01 	add.w	fp, fp, #1
 800bf12:	9015      	str	r0, [sp, #84]	; 0x54
 800bf14:	e7c1      	b.n	800be9a <_strtod_l+0x152>
 800bf16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	9215      	str	r2, [sp, #84]	; 0x54
 800bf1c:	785a      	ldrb	r2, [r3, #1]
 800bf1e:	f1bb 0f00 	cmp.w	fp, #0
 800bf22:	d037      	beq.n	800bf94 <_strtod_l+0x24c>
 800bf24:	9005      	str	r0, [sp, #20]
 800bf26:	465e      	mov	r6, fp
 800bf28:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bf2c:	2b09      	cmp	r3, #9
 800bf2e:	d912      	bls.n	800bf56 <_strtod_l+0x20e>
 800bf30:	2301      	movs	r3, #1
 800bf32:	e7c4      	b.n	800bebe <_strtod_l+0x176>
 800bf34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	9215      	str	r2, [sp, #84]	; 0x54
 800bf3a:	785a      	ldrb	r2, [r3, #1]
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	2a30      	cmp	r2, #48	; 0x30
 800bf40:	d0f8      	beq.n	800bf34 <_strtod_l+0x1ec>
 800bf42:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bf46:	2b08      	cmp	r3, #8
 800bf48:	f200 84c1 	bhi.w	800c8ce <_strtod_l+0xb86>
 800bf4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf4e:	9005      	str	r0, [sp, #20]
 800bf50:	2000      	movs	r0, #0
 800bf52:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf54:	4606      	mov	r6, r0
 800bf56:	3a30      	subs	r2, #48	; 0x30
 800bf58:	f100 0301 	add.w	r3, r0, #1
 800bf5c:	d014      	beq.n	800bf88 <_strtod_l+0x240>
 800bf5e:	9905      	ldr	r1, [sp, #20]
 800bf60:	4419      	add	r1, r3
 800bf62:	9105      	str	r1, [sp, #20]
 800bf64:	4633      	mov	r3, r6
 800bf66:	eb00 0c06 	add.w	ip, r0, r6
 800bf6a:	210a      	movs	r1, #10
 800bf6c:	4563      	cmp	r3, ip
 800bf6e:	d113      	bne.n	800bf98 <_strtod_l+0x250>
 800bf70:	1833      	adds	r3, r6, r0
 800bf72:	2b08      	cmp	r3, #8
 800bf74:	f106 0601 	add.w	r6, r6, #1
 800bf78:	4406      	add	r6, r0
 800bf7a:	dc1a      	bgt.n	800bfb2 <_strtod_l+0x26a>
 800bf7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf7e:	230a      	movs	r3, #10
 800bf80:	fb03 2301 	mla	r3, r3, r1, r2
 800bf84:	9309      	str	r3, [sp, #36]	; 0x24
 800bf86:	2300      	movs	r3, #0
 800bf88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bf8a:	1c51      	adds	r1, r2, #1
 800bf8c:	9115      	str	r1, [sp, #84]	; 0x54
 800bf8e:	7852      	ldrb	r2, [r2, #1]
 800bf90:	4618      	mov	r0, r3
 800bf92:	e7c9      	b.n	800bf28 <_strtod_l+0x1e0>
 800bf94:	4658      	mov	r0, fp
 800bf96:	e7d2      	b.n	800bf3e <_strtod_l+0x1f6>
 800bf98:	2b08      	cmp	r3, #8
 800bf9a:	f103 0301 	add.w	r3, r3, #1
 800bf9e:	dc03      	bgt.n	800bfa8 <_strtod_l+0x260>
 800bfa0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bfa2:	434f      	muls	r7, r1
 800bfa4:	9709      	str	r7, [sp, #36]	; 0x24
 800bfa6:	e7e1      	b.n	800bf6c <_strtod_l+0x224>
 800bfa8:	2b10      	cmp	r3, #16
 800bfaa:	bfd8      	it	le
 800bfac:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bfb0:	e7dc      	b.n	800bf6c <_strtod_l+0x224>
 800bfb2:	2e10      	cmp	r6, #16
 800bfb4:	bfdc      	itt	le
 800bfb6:	230a      	movle	r3, #10
 800bfb8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bfbc:	e7e3      	b.n	800bf86 <_strtod_l+0x23e>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	9305      	str	r3, [sp, #20]
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e780      	b.n	800bec8 <_strtod_l+0x180>
 800bfc6:	f04f 0c00 	mov.w	ip, #0
 800bfca:	1caa      	adds	r2, r5, #2
 800bfcc:	9215      	str	r2, [sp, #84]	; 0x54
 800bfce:	78aa      	ldrb	r2, [r5, #2]
 800bfd0:	e788      	b.n	800bee4 <_strtod_l+0x19c>
 800bfd2:	f04f 0c01 	mov.w	ip, #1
 800bfd6:	e7f8      	b.n	800bfca <_strtod_l+0x282>
 800bfd8:	0800e3e8 	.word	0x0800e3e8
 800bfdc:	0800e3e4 	.word	0x0800e3e4
 800bfe0:	7ff00000 	.word	0x7ff00000
 800bfe4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bfe6:	1c51      	adds	r1, r2, #1
 800bfe8:	9115      	str	r1, [sp, #84]	; 0x54
 800bfea:	7852      	ldrb	r2, [r2, #1]
 800bfec:	2a30      	cmp	r2, #48	; 0x30
 800bfee:	d0f9      	beq.n	800bfe4 <_strtod_l+0x29c>
 800bff0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bff4:	2908      	cmp	r1, #8
 800bff6:	f63f af7a 	bhi.w	800beee <_strtod_l+0x1a6>
 800bffa:	3a30      	subs	r2, #48	; 0x30
 800bffc:	9208      	str	r2, [sp, #32]
 800bffe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c000:	920c      	str	r2, [sp, #48]	; 0x30
 800c002:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c004:	1c57      	adds	r7, r2, #1
 800c006:	9715      	str	r7, [sp, #84]	; 0x54
 800c008:	7852      	ldrb	r2, [r2, #1]
 800c00a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c00e:	f1be 0f09 	cmp.w	lr, #9
 800c012:	d938      	bls.n	800c086 <_strtod_l+0x33e>
 800c014:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c016:	1a7f      	subs	r7, r7, r1
 800c018:	2f08      	cmp	r7, #8
 800c01a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c01e:	dc03      	bgt.n	800c028 <_strtod_l+0x2e0>
 800c020:	9908      	ldr	r1, [sp, #32]
 800c022:	428f      	cmp	r7, r1
 800c024:	bfa8      	it	ge
 800c026:	460f      	movge	r7, r1
 800c028:	f1bc 0f00 	cmp.w	ip, #0
 800c02c:	d000      	beq.n	800c030 <_strtod_l+0x2e8>
 800c02e:	427f      	negs	r7, r7
 800c030:	2e00      	cmp	r6, #0
 800c032:	d14f      	bne.n	800c0d4 <_strtod_l+0x38c>
 800c034:	9904      	ldr	r1, [sp, #16]
 800c036:	4301      	orrs	r1, r0
 800c038:	f47f aec1 	bne.w	800bdbe <_strtod_l+0x76>
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f47f aedb 	bne.w	800bdf8 <_strtod_l+0xb0>
 800c042:	2a69      	cmp	r2, #105	; 0x69
 800c044:	d029      	beq.n	800c09a <_strtod_l+0x352>
 800c046:	dc26      	bgt.n	800c096 <_strtod_l+0x34e>
 800c048:	2a49      	cmp	r2, #73	; 0x49
 800c04a:	d026      	beq.n	800c09a <_strtod_l+0x352>
 800c04c:	2a4e      	cmp	r2, #78	; 0x4e
 800c04e:	f47f aed3 	bne.w	800bdf8 <_strtod_l+0xb0>
 800c052:	499b      	ldr	r1, [pc, #620]	; (800c2c0 <_strtod_l+0x578>)
 800c054:	a815      	add	r0, sp, #84	; 0x54
 800c056:	f001 fa17 	bl	800d488 <__match>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	f43f aecc 	beq.w	800bdf8 <_strtod_l+0xb0>
 800c060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2b28      	cmp	r3, #40	; 0x28
 800c066:	d12f      	bne.n	800c0c8 <_strtod_l+0x380>
 800c068:	4996      	ldr	r1, [pc, #600]	; (800c2c4 <_strtod_l+0x57c>)
 800c06a:	aa18      	add	r2, sp, #96	; 0x60
 800c06c:	a815      	add	r0, sp, #84	; 0x54
 800c06e:	f001 fa1f 	bl	800d4b0 <__hexnan>
 800c072:	2805      	cmp	r0, #5
 800c074:	d128      	bne.n	800c0c8 <_strtod_l+0x380>
 800c076:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c078:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c07c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c080:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c084:	e69b      	b.n	800bdbe <_strtod_l+0x76>
 800c086:	9f08      	ldr	r7, [sp, #32]
 800c088:	210a      	movs	r1, #10
 800c08a:	fb01 2107 	mla	r1, r1, r7, r2
 800c08e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c092:	9208      	str	r2, [sp, #32]
 800c094:	e7b5      	b.n	800c002 <_strtod_l+0x2ba>
 800c096:	2a6e      	cmp	r2, #110	; 0x6e
 800c098:	e7d9      	b.n	800c04e <_strtod_l+0x306>
 800c09a:	498b      	ldr	r1, [pc, #556]	; (800c2c8 <_strtod_l+0x580>)
 800c09c:	a815      	add	r0, sp, #84	; 0x54
 800c09e:	f001 f9f3 	bl	800d488 <__match>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	f43f aea8 	beq.w	800bdf8 <_strtod_l+0xb0>
 800c0a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0aa:	4988      	ldr	r1, [pc, #544]	; (800c2cc <_strtod_l+0x584>)
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	a815      	add	r0, sp, #84	; 0x54
 800c0b0:	9315      	str	r3, [sp, #84]	; 0x54
 800c0b2:	f001 f9e9 	bl	800d488 <__match>
 800c0b6:	b910      	cbnz	r0, 800c0be <_strtod_l+0x376>
 800c0b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	9315      	str	r3, [sp, #84]	; 0x54
 800c0be:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c2dc <_strtod_l+0x594>
 800c0c2:	f04f 0800 	mov.w	r8, #0
 800c0c6:	e67a      	b.n	800bdbe <_strtod_l+0x76>
 800c0c8:	4881      	ldr	r0, [pc, #516]	; (800c2d0 <_strtod_l+0x588>)
 800c0ca:	f000 fef9 	bl	800cec0 <nan>
 800c0ce:	ec59 8b10 	vmov	r8, r9, d0
 800c0d2:	e674      	b.n	800bdbe <_strtod_l+0x76>
 800c0d4:	9b05      	ldr	r3, [sp, #20]
 800c0d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0d8:	1afb      	subs	r3, r7, r3
 800c0da:	f1bb 0f00 	cmp.w	fp, #0
 800c0de:	bf08      	it	eq
 800c0e0:	46b3      	moveq	fp, r6
 800c0e2:	2e10      	cmp	r6, #16
 800c0e4:	9308      	str	r3, [sp, #32]
 800c0e6:	4635      	mov	r5, r6
 800c0e8:	bfa8      	it	ge
 800c0ea:	2510      	movge	r5, #16
 800c0ec:	f7f4 fa5a 	bl	80005a4 <__aeabi_ui2d>
 800c0f0:	2e09      	cmp	r6, #9
 800c0f2:	4680      	mov	r8, r0
 800c0f4:	4689      	mov	r9, r1
 800c0f6:	dd13      	ble.n	800c120 <_strtod_l+0x3d8>
 800c0f8:	4b76      	ldr	r3, [pc, #472]	; (800c2d4 <_strtod_l+0x58c>)
 800c0fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c102:	f7f4 fac9 	bl	8000698 <__aeabi_dmul>
 800c106:	4680      	mov	r8, r0
 800c108:	4650      	mov	r0, sl
 800c10a:	4689      	mov	r9, r1
 800c10c:	f7f4 fa4a 	bl	80005a4 <__aeabi_ui2d>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4640      	mov	r0, r8
 800c116:	4649      	mov	r1, r9
 800c118:	f7f4 f908 	bl	800032c <__adddf3>
 800c11c:	4680      	mov	r8, r0
 800c11e:	4689      	mov	r9, r1
 800c120:	2e0f      	cmp	r6, #15
 800c122:	dc38      	bgt.n	800c196 <_strtod_l+0x44e>
 800c124:	9b08      	ldr	r3, [sp, #32]
 800c126:	2b00      	cmp	r3, #0
 800c128:	f43f ae49 	beq.w	800bdbe <_strtod_l+0x76>
 800c12c:	dd24      	ble.n	800c178 <_strtod_l+0x430>
 800c12e:	2b16      	cmp	r3, #22
 800c130:	dc0b      	bgt.n	800c14a <_strtod_l+0x402>
 800c132:	4968      	ldr	r1, [pc, #416]	; (800c2d4 <_strtod_l+0x58c>)
 800c134:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c13c:	4642      	mov	r2, r8
 800c13e:	464b      	mov	r3, r9
 800c140:	f7f4 faaa 	bl	8000698 <__aeabi_dmul>
 800c144:	4680      	mov	r8, r0
 800c146:	4689      	mov	r9, r1
 800c148:	e639      	b.n	800bdbe <_strtod_l+0x76>
 800c14a:	9a08      	ldr	r2, [sp, #32]
 800c14c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c150:	4293      	cmp	r3, r2
 800c152:	db20      	blt.n	800c196 <_strtod_l+0x44e>
 800c154:	4c5f      	ldr	r4, [pc, #380]	; (800c2d4 <_strtod_l+0x58c>)
 800c156:	f1c6 060f 	rsb	r6, r6, #15
 800c15a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c15e:	4642      	mov	r2, r8
 800c160:	464b      	mov	r3, r9
 800c162:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c166:	f7f4 fa97 	bl	8000698 <__aeabi_dmul>
 800c16a:	9b08      	ldr	r3, [sp, #32]
 800c16c:	1b9e      	subs	r6, r3, r6
 800c16e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c172:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c176:	e7e3      	b.n	800c140 <_strtod_l+0x3f8>
 800c178:	9b08      	ldr	r3, [sp, #32]
 800c17a:	3316      	adds	r3, #22
 800c17c:	db0b      	blt.n	800c196 <_strtod_l+0x44e>
 800c17e:	9b05      	ldr	r3, [sp, #20]
 800c180:	1bdf      	subs	r7, r3, r7
 800c182:	4b54      	ldr	r3, [pc, #336]	; (800c2d4 <_strtod_l+0x58c>)
 800c184:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c18c:	4640      	mov	r0, r8
 800c18e:	4649      	mov	r1, r9
 800c190:	f7f4 fbac 	bl	80008ec <__aeabi_ddiv>
 800c194:	e7d6      	b.n	800c144 <_strtod_l+0x3fc>
 800c196:	9b08      	ldr	r3, [sp, #32]
 800c198:	1b75      	subs	r5, r6, r5
 800c19a:	441d      	add	r5, r3
 800c19c:	2d00      	cmp	r5, #0
 800c19e:	dd70      	ble.n	800c282 <_strtod_l+0x53a>
 800c1a0:	f015 030f 	ands.w	r3, r5, #15
 800c1a4:	d00a      	beq.n	800c1bc <_strtod_l+0x474>
 800c1a6:	494b      	ldr	r1, [pc, #300]	; (800c2d4 <_strtod_l+0x58c>)
 800c1a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1ac:	4642      	mov	r2, r8
 800c1ae:	464b      	mov	r3, r9
 800c1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1b4:	f7f4 fa70 	bl	8000698 <__aeabi_dmul>
 800c1b8:	4680      	mov	r8, r0
 800c1ba:	4689      	mov	r9, r1
 800c1bc:	f035 050f 	bics.w	r5, r5, #15
 800c1c0:	d04d      	beq.n	800c25e <_strtod_l+0x516>
 800c1c2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c1c6:	dd22      	ble.n	800c20e <_strtod_l+0x4c6>
 800c1c8:	2500      	movs	r5, #0
 800c1ca:	46ab      	mov	fp, r5
 800c1cc:	9509      	str	r5, [sp, #36]	; 0x24
 800c1ce:	9505      	str	r5, [sp, #20]
 800c1d0:	2322      	movs	r3, #34	; 0x22
 800c1d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c2dc <_strtod_l+0x594>
 800c1d6:	6023      	str	r3, [r4, #0]
 800c1d8:	f04f 0800 	mov.w	r8, #0
 800c1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f43f aded 	beq.w	800bdbe <_strtod_l+0x76>
 800c1e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f7ff f924 	bl	800b434 <_Bfree>
 800c1ec:	9905      	ldr	r1, [sp, #20]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f7ff f920 	bl	800b434 <_Bfree>
 800c1f4:	4659      	mov	r1, fp
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f7ff f91c 	bl	800b434 <_Bfree>
 800c1fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1fe:	4620      	mov	r0, r4
 800c200:	f7ff f918 	bl	800b434 <_Bfree>
 800c204:	4629      	mov	r1, r5
 800c206:	4620      	mov	r0, r4
 800c208:	f7ff f914 	bl	800b434 <_Bfree>
 800c20c:	e5d7      	b.n	800bdbe <_strtod_l+0x76>
 800c20e:	4b32      	ldr	r3, [pc, #200]	; (800c2d8 <_strtod_l+0x590>)
 800c210:	9304      	str	r3, [sp, #16]
 800c212:	2300      	movs	r3, #0
 800c214:	112d      	asrs	r5, r5, #4
 800c216:	4640      	mov	r0, r8
 800c218:	4649      	mov	r1, r9
 800c21a:	469a      	mov	sl, r3
 800c21c:	2d01      	cmp	r5, #1
 800c21e:	dc21      	bgt.n	800c264 <_strtod_l+0x51c>
 800c220:	b10b      	cbz	r3, 800c226 <_strtod_l+0x4de>
 800c222:	4680      	mov	r8, r0
 800c224:	4689      	mov	r9, r1
 800c226:	492c      	ldr	r1, [pc, #176]	; (800c2d8 <_strtod_l+0x590>)
 800c228:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c22c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c230:	4642      	mov	r2, r8
 800c232:	464b      	mov	r3, r9
 800c234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c238:	f7f4 fa2e 	bl	8000698 <__aeabi_dmul>
 800c23c:	4b27      	ldr	r3, [pc, #156]	; (800c2dc <_strtod_l+0x594>)
 800c23e:	460a      	mov	r2, r1
 800c240:	400b      	ands	r3, r1
 800c242:	4927      	ldr	r1, [pc, #156]	; (800c2e0 <_strtod_l+0x598>)
 800c244:	428b      	cmp	r3, r1
 800c246:	4680      	mov	r8, r0
 800c248:	d8be      	bhi.n	800c1c8 <_strtod_l+0x480>
 800c24a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c24e:	428b      	cmp	r3, r1
 800c250:	bf86      	itte	hi
 800c252:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c2e4 <_strtod_l+0x59c>
 800c256:	f04f 38ff 	movhi.w	r8, #4294967295
 800c25a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c25e:	2300      	movs	r3, #0
 800c260:	9304      	str	r3, [sp, #16]
 800c262:	e07b      	b.n	800c35c <_strtod_l+0x614>
 800c264:	07ea      	lsls	r2, r5, #31
 800c266:	d505      	bpl.n	800c274 <_strtod_l+0x52c>
 800c268:	9b04      	ldr	r3, [sp, #16]
 800c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26e:	f7f4 fa13 	bl	8000698 <__aeabi_dmul>
 800c272:	2301      	movs	r3, #1
 800c274:	9a04      	ldr	r2, [sp, #16]
 800c276:	3208      	adds	r2, #8
 800c278:	f10a 0a01 	add.w	sl, sl, #1
 800c27c:	106d      	asrs	r5, r5, #1
 800c27e:	9204      	str	r2, [sp, #16]
 800c280:	e7cc      	b.n	800c21c <_strtod_l+0x4d4>
 800c282:	d0ec      	beq.n	800c25e <_strtod_l+0x516>
 800c284:	426d      	negs	r5, r5
 800c286:	f015 020f 	ands.w	r2, r5, #15
 800c28a:	d00a      	beq.n	800c2a2 <_strtod_l+0x55a>
 800c28c:	4b11      	ldr	r3, [pc, #68]	; (800c2d4 <_strtod_l+0x58c>)
 800c28e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c292:	4640      	mov	r0, r8
 800c294:	4649      	mov	r1, r9
 800c296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29a:	f7f4 fb27 	bl	80008ec <__aeabi_ddiv>
 800c29e:	4680      	mov	r8, r0
 800c2a0:	4689      	mov	r9, r1
 800c2a2:	112d      	asrs	r5, r5, #4
 800c2a4:	d0db      	beq.n	800c25e <_strtod_l+0x516>
 800c2a6:	2d1f      	cmp	r5, #31
 800c2a8:	dd1e      	ble.n	800c2e8 <_strtod_l+0x5a0>
 800c2aa:	2500      	movs	r5, #0
 800c2ac:	46ab      	mov	fp, r5
 800c2ae:	9509      	str	r5, [sp, #36]	; 0x24
 800c2b0:	9505      	str	r5, [sp, #20]
 800c2b2:	2322      	movs	r3, #34	; 0x22
 800c2b4:	f04f 0800 	mov.w	r8, #0
 800c2b8:	f04f 0900 	mov.w	r9, #0
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	e78d      	b.n	800c1dc <_strtod_l+0x494>
 800c2c0:	0800e1cf 	.word	0x0800e1cf
 800c2c4:	0800e3fc 	.word	0x0800e3fc
 800c2c8:	0800e1c7 	.word	0x0800e1c7
 800c2cc:	0800e1fe 	.word	0x0800e1fe
 800c2d0:	0800e58d 	.word	0x0800e58d
 800c2d4:	0800e310 	.word	0x0800e310
 800c2d8:	0800e2e8 	.word	0x0800e2e8
 800c2dc:	7ff00000 	.word	0x7ff00000
 800c2e0:	7ca00000 	.word	0x7ca00000
 800c2e4:	7fefffff 	.word	0x7fefffff
 800c2e8:	f015 0310 	ands.w	r3, r5, #16
 800c2ec:	bf18      	it	ne
 800c2ee:	236a      	movne	r3, #106	; 0x6a
 800c2f0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c694 <_strtod_l+0x94c>
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	4649      	mov	r1, r9
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	07ea      	lsls	r2, r5, #31
 800c2fe:	d504      	bpl.n	800c30a <_strtod_l+0x5c2>
 800c300:	e9da 2300 	ldrd	r2, r3, [sl]
 800c304:	f7f4 f9c8 	bl	8000698 <__aeabi_dmul>
 800c308:	2301      	movs	r3, #1
 800c30a:	106d      	asrs	r5, r5, #1
 800c30c:	f10a 0a08 	add.w	sl, sl, #8
 800c310:	d1f4      	bne.n	800c2fc <_strtod_l+0x5b4>
 800c312:	b10b      	cbz	r3, 800c318 <_strtod_l+0x5d0>
 800c314:	4680      	mov	r8, r0
 800c316:	4689      	mov	r9, r1
 800c318:	9b04      	ldr	r3, [sp, #16]
 800c31a:	b1bb      	cbz	r3, 800c34c <_strtod_l+0x604>
 800c31c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c320:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c324:	2b00      	cmp	r3, #0
 800c326:	4649      	mov	r1, r9
 800c328:	dd10      	ble.n	800c34c <_strtod_l+0x604>
 800c32a:	2b1f      	cmp	r3, #31
 800c32c:	f340 811e 	ble.w	800c56c <_strtod_l+0x824>
 800c330:	2b34      	cmp	r3, #52	; 0x34
 800c332:	bfde      	ittt	le
 800c334:	f04f 33ff 	movle.w	r3, #4294967295
 800c338:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c33c:	4093      	lslle	r3, r2
 800c33e:	f04f 0800 	mov.w	r8, #0
 800c342:	bfcc      	ite	gt
 800c344:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c348:	ea03 0901 	andle.w	r9, r3, r1
 800c34c:	2200      	movs	r2, #0
 800c34e:	2300      	movs	r3, #0
 800c350:	4640      	mov	r0, r8
 800c352:	4649      	mov	r1, r9
 800c354:	f7f4 fc08 	bl	8000b68 <__aeabi_dcmpeq>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d1a6      	bne.n	800c2aa <_strtod_l+0x562>
 800c35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c362:	4633      	mov	r3, r6
 800c364:	465a      	mov	r2, fp
 800c366:	4620      	mov	r0, r4
 800c368:	f7ff f8cc 	bl	800b504 <__s2b>
 800c36c:	9009      	str	r0, [sp, #36]	; 0x24
 800c36e:	2800      	cmp	r0, #0
 800c370:	f43f af2a 	beq.w	800c1c8 <_strtod_l+0x480>
 800c374:	9a08      	ldr	r2, [sp, #32]
 800c376:	9b05      	ldr	r3, [sp, #20]
 800c378:	2a00      	cmp	r2, #0
 800c37a:	eba3 0307 	sub.w	r3, r3, r7
 800c37e:	bfa8      	it	ge
 800c380:	2300      	movge	r3, #0
 800c382:	930c      	str	r3, [sp, #48]	; 0x30
 800c384:	2500      	movs	r5, #0
 800c386:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c38a:	9312      	str	r3, [sp, #72]	; 0x48
 800c38c:	46ab      	mov	fp, r5
 800c38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c390:	4620      	mov	r0, r4
 800c392:	6859      	ldr	r1, [r3, #4]
 800c394:	f7ff f80e 	bl	800b3b4 <_Balloc>
 800c398:	9005      	str	r0, [sp, #20]
 800c39a:	2800      	cmp	r0, #0
 800c39c:	f43f af18 	beq.w	800c1d0 <_strtod_l+0x488>
 800c3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a2:	691a      	ldr	r2, [r3, #16]
 800c3a4:	3202      	adds	r2, #2
 800c3a6:	f103 010c 	add.w	r1, r3, #12
 800c3aa:	0092      	lsls	r2, r2, #2
 800c3ac:	300c      	adds	r0, #12
 800c3ae:	f7fe f870 	bl	800a492 <memcpy>
 800c3b2:	ec49 8b10 	vmov	d0, r8, r9
 800c3b6:	aa18      	add	r2, sp, #96	; 0x60
 800c3b8:	a917      	add	r1, sp, #92	; 0x5c
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f7ff fbd6 	bl	800bb6c <__d2b>
 800c3c0:	ec49 8b18 	vmov	d8, r8, r9
 800c3c4:	9016      	str	r0, [sp, #88]	; 0x58
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f43f af02 	beq.w	800c1d0 <_strtod_l+0x488>
 800c3cc:	2101      	movs	r1, #1
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f7ff f930 	bl	800b634 <__i2b>
 800c3d4:	4683      	mov	fp, r0
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	f43f aefa 	beq.w	800c1d0 <_strtod_l+0x488>
 800c3dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c3de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c3e0:	2e00      	cmp	r6, #0
 800c3e2:	bfab      	itete	ge
 800c3e4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c3e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c3e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c3ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c3ee:	bfac      	ite	ge
 800c3f0:	eb06 0a03 	addge.w	sl, r6, r3
 800c3f4:	1b9f      	sublt	r7, r3, r6
 800c3f6:	9b04      	ldr	r3, [sp, #16]
 800c3f8:	1af6      	subs	r6, r6, r3
 800c3fa:	4416      	add	r6, r2
 800c3fc:	4ba0      	ldr	r3, [pc, #640]	; (800c680 <_strtod_l+0x938>)
 800c3fe:	3e01      	subs	r6, #1
 800c400:	429e      	cmp	r6, r3
 800c402:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c406:	f280 80c4 	bge.w	800c592 <_strtod_l+0x84a>
 800c40a:	1b9b      	subs	r3, r3, r6
 800c40c:	2b1f      	cmp	r3, #31
 800c40e:	eba2 0203 	sub.w	r2, r2, r3
 800c412:	f04f 0101 	mov.w	r1, #1
 800c416:	f300 80b0 	bgt.w	800c57a <_strtod_l+0x832>
 800c41a:	fa01 f303 	lsl.w	r3, r1, r3
 800c41e:	930e      	str	r3, [sp, #56]	; 0x38
 800c420:	2300      	movs	r3, #0
 800c422:	930d      	str	r3, [sp, #52]	; 0x34
 800c424:	eb0a 0602 	add.w	r6, sl, r2
 800c428:	9b04      	ldr	r3, [sp, #16]
 800c42a:	45b2      	cmp	sl, r6
 800c42c:	4417      	add	r7, r2
 800c42e:	441f      	add	r7, r3
 800c430:	4653      	mov	r3, sl
 800c432:	bfa8      	it	ge
 800c434:	4633      	movge	r3, r6
 800c436:	42bb      	cmp	r3, r7
 800c438:	bfa8      	it	ge
 800c43a:	463b      	movge	r3, r7
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	bfc2      	ittt	gt
 800c440:	1af6      	subgt	r6, r6, r3
 800c442:	1aff      	subgt	r7, r7, r3
 800c444:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	dd17      	ble.n	800c47e <_strtod_l+0x736>
 800c44e:	4659      	mov	r1, fp
 800c450:	461a      	mov	r2, r3
 800c452:	4620      	mov	r0, r4
 800c454:	f7ff f9ae 	bl	800b7b4 <__pow5mult>
 800c458:	4683      	mov	fp, r0
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f43f aeb8 	beq.w	800c1d0 <_strtod_l+0x488>
 800c460:	4601      	mov	r1, r0
 800c462:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c464:	4620      	mov	r0, r4
 800c466:	f7ff f8fb 	bl	800b660 <__multiply>
 800c46a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c46c:	2800      	cmp	r0, #0
 800c46e:	f43f aeaf 	beq.w	800c1d0 <_strtod_l+0x488>
 800c472:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c474:	4620      	mov	r0, r4
 800c476:	f7fe ffdd 	bl	800b434 <_Bfree>
 800c47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c47c:	9316      	str	r3, [sp, #88]	; 0x58
 800c47e:	2e00      	cmp	r6, #0
 800c480:	f300 808c 	bgt.w	800c59c <_strtod_l+0x854>
 800c484:	9b08      	ldr	r3, [sp, #32]
 800c486:	2b00      	cmp	r3, #0
 800c488:	dd08      	ble.n	800c49c <_strtod_l+0x754>
 800c48a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c48c:	9905      	ldr	r1, [sp, #20]
 800c48e:	4620      	mov	r0, r4
 800c490:	f7ff f990 	bl	800b7b4 <__pow5mult>
 800c494:	9005      	str	r0, [sp, #20]
 800c496:	2800      	cmp	r0, #0
 800c498:	f43f ae9a 	beq.w	800c1d0 <_strtod_l+0x488>
 800c49c:	2f00      	cmp	r7, #0
 800c49e:	dd08      	ble.n	800c4b2 <_strtod_l+0x76a>
 800c4a0:	9905      	ldr	r1, [sp, #20]
 800c4a2:	463a      	mov	r2, r7
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f7ff f9df 	bl	800b868 <__lshift>
 800c4aa:	9005      	str	r0, [sp, #20]
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	f43f ae8f 	beq.w	800c1d0 <_strtod_l+0x488>
 800c4b2:	f1ba 0f00 	cmp.w	sl, #0
 800c4b6:	dd08      	ble.n	800c4ca <_strtod_l+0x782>
 800c4b8:	4659      	mov	r1, fp
 800c4ba:	4652      	mov	r2, sl
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f7ff f9d3 	bl	800b868 <__lshift>
 800c4c2:	4683      	mov	fp, r0
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	f43f ae83 	beq.w	800c1d0 <_strtod_l+0x488>
 800c4ca:	9a05      	ldr	r2, [sp, #20]
 800c4cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f7ff fa52 	bl	800b978 <__mdiff>
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f43f ae7a 	beq.w	800c1d0 <_strtod_l+0x488>
 800c4dc:	68c3      	ldr	r3, [r0, #12]
 800c4de:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	60c3      	str	r3, [r0, #12]
 800c4e4:	4659      	mov	r1, fp
 800c4e6:	f7ff fa2b 	bl	800b940 <__mcmp>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	da60      	bge.n	800c5b0 <_strtod_l+0x868>
 800c4ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4f0:	ea53 0308 	orrs.w	r3, r3, r8
 800c4f4:	f040 8084 	bne.w	800c600 <_strtod_l+0x8b8>
 800c4f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d17f      	bne.n	800c600 <_strtod_l+0x8b8>
 800c500:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c504:	0d1b      	lsrs	r3, r3, #20
 800c506:	051b      	lsls	r3, r3, #20
 800c508:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c50c:	d978      	bls.n	800c600 <_strtod_l+0x8b8>
 800c50e:	696b      	ldr	r3, [r5, #20]
 800c510:	b913      	cbnz	r3, 800c518 <_strtod_l+0x7d0>
 800c512:	692b      	ldr	r3, [r5, #16]
 800c514:	2b01      	cmp	r3, #1
 800c516:	dd73      	ble.n	800c600 <_strtod_l+0x8b8>
 800c518:	4629      	mov	r1, r5
 800c51a:	2201      	movs	r2, #1
 800c51c:	4620      	mov	r0, r4
 800c51e:	f7ff f9a3 	bl	800b868 <__lshift>
 800c522:	4659      	mov	r1, fp
 800c524:	4605      	mov	r5, r0
 800c526:	f7ff fa0b 	bl	800b940 <__mcmp>
 800c52a:	2800      	cmp	r0, #0
 800c52c:	dd68      	ble.n	800c600 <_strtod_l+0x8b8>
 800c52e:	9904      	ldr	r1, [sp, #16]
 800c530:	4a54      	ldr	r2, [pc, #336]	; (800c684 <_strtod_l+0x93c>)
 800c532:	464b      	mov	r3, r9
 800c534:	2900      	cmp	r1, #0
 800c536:	f000 8084 	beq.w	800c642 <_strtod_l+0x8fa>
 800c53a:	ea02 0109 	and.w	r1, r2, r9
 800c53e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c542:	dc7e      	bgt.n	800c642 <_strtod_l+0x8fa>
 800c544:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c548:	f77f aeb3 	ble.w	800c2b2 <_strtod_l+0x56a>
 800c54c:	4b4e      	ldr	r3, [pc, #312]	; (800c688 <_strtod_l+0x940>)
 800c54e:	4640      	mov	r0, r8
 800c550:	4649      	mov	r1, r9
 800c552:	2200      	movs	r2, #0
 800c554:	f7f4 f8a0 	bl	8000698 <__aeabi_dmul>
 800c558:	4b4a      	ldr	r3, [pc, #296]	; (800c684 <_strtod_l+0x93c>)
 800c55a:	400b      	ands	r3, r1
 800c55c:	4680      	mov	r8, r0
 800c55e:	4689      	mov	r9, r1
 800c560:	2b00      	cmp	r3, #0
 800c562:	f47f ae3f 	bne.w	800c1e4 <_strtod_l+0x49c>
 800c566:	2322      	movs	r3, #34	; 0x22
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	e63b      	b.n	800c1e4 <_strtod_l+0x49c>
 800c56c:	f04f 32ff 	mov.w	r2, #4294967295
 800c570:	fa02 f303 	lsl.w	r3, r2, r3
 800c574:	ea03 0808 	and.w	r8, r3, r8
 800c578:	e6e8      	b.n	800c34c <_strtod_l+0x604>
 800c57a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c57e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c582:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c586:	36e2      	adds	r6, #226	; 0xe2
 800c588:	fa01 f306 	lsl.w	r3, r1, r6
 800c58c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c590:	e748      	b.n	800c424 <_strtod_l+0x6dc>
 800c592:	2100      	movs	r1, #0
 800c594:	2301      	movs	r3, #1
 800c596:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c59a:	e743      	b.n	800c424 <_strtod_l+0x6dc>
 800c59c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c59e:	4632      	mov	r2, r6
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f7ff f961 	bl	800b868 <__lshift>
 800c5a6:	9016      	str	r0, [sp, #88]	; 0x58
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	f47f af6b 	bne.w	800c484 <_strtod_l+0x73c>
 800c5ae:	e60f      	b.n	800c1d0 <_strtod_l+0x488>
 800c5b0:	46ca      	mov	sl, r9
 800c5b2:	d171      	bne.n	800c698 <_strtod_l+0x950>
 800c5b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5ba:	b352      	cbz	r2, 800c612 <_strtod_l+0x8ca>
 800c5bc:	4a33      	ldr	r2, [pc, #204]	; (800c68c <_strtod_l+0x944>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d12a      	bne.n	800c618 <_strtod_l+0x8d0>
 800c5c2:	9b04      	ldr	r3, [sp, #16]
 800c5c4:	4641      	mov	r1, r8
 800c5c6:	b1fb      	cbz	r3, 800c608 <_strtod_l+0x8c0>
 800c5c8:	4b2e      	ldr	r3, [pc, #184]	; (800c684 <_strtod_l+0x93c>)
 800c5ca:	ea09 0303 	and.w	r3, r9, r3
 800c5ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c5d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d6:	d81a      	bhi.n	800c60e <_strtod_l+0x8c6>
 800c5d8:	0d1b      	lsrs	r3, r3, #20
 800c5da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5de:	fa02 f303 	lsl.w	r3, r2, r3
 800c5e2:	4299      	cmp	r1, r3
 800c5e4:	d118      	bne.n	800c618 <_strtod_l+0x8d0>
 800c5e6:	4b2a      	ldr	r3, [pc, #168]	; (800c690 <_strtod_l+0x948>)
 800c5e8:	459a      	cmp	sl, r3
 800c5ea:	d102      	bne.n	800c5f2 <_strtod_l+0x8aa>
 800c5ec:	3101      	adds	r1, #1
 800c5ee:	f43f adef 	beq.w	800c1d0 <_strtod_l+0x488>
 800c5f2:	4b24      	ldr	r3, [pc, #144]	; (800c684 <_strtod_l+0x93c>)
 800c5f4:	ea0a 0303 	and.w	r3, sl, r3
 800c5f8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c5fc:	f04f 0800 	mov.w	r8, #0
 800c600:	9b04      	ldr	r3, [sp, #16]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1a2      	bne.n	800c54c <_strtod_l+0x804>
 800c606:	e5ed      	b.n	800c1e4 <_strtod_l+0x49c>
 800c608:	f04f 33ff 	mov.w	r3, #4294967295
 800c60c:	e7e9      	b.n	800c5e2 <_strtod_l+0x89a>
 800c60e:	4613      	mov	r3, r2
 800c610:	e7e7      	b.n	800c5e2 <_strtod_l+0x89a>
 800c612:	ea53 0308 	orrs.w	r3, r3, r8
 800c616:	d08a      	beq.n	800c52e <_strtod_l+0x7e6>
 800c618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c61a:	b1e3      	cbz	r3, 800c656 <_strtod_l+0x90e>
 800c61c:	ea13 0f0a 	tst.w	r3, sl
 800c620:	d0ee      	beq.n	800c600 <_strtod_l+0x8b8>
 800c622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c624:	9a04      	ldr	r2, [sp, #16]
 800c626:	4640      	mov	r0, r8
 800c628:	4649      	mov	r1, r9
 800c62a:	b1c3      	cbz	r3, 800c65e <_strtod_l+0x916>
 800c62c:	f7ff fb6f 	bl	800bd0e <sulp>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	ec51 0b18 	vmov	r0, r1, d8
 800c638:	f7f3 fe78 	bl	800032c <__adddf3>
 800c63c:	4680      	mov	r8, r0
 800c63e:	4689      	mov	r9, r1
 800c640:	e7de      	b.n	800c600 <_strtod_l+0x8b8>
 800c642:	4013      	ands	r3, r2
 800c644:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c648:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c64c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c650:	f04f 38ff 	mov.w	r8, #4294967295
 800c654:	e7d4      	b.n	800c600 <_strtod_l+0x8b8>
 800c656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c658:	ea13 0f08 	tst.w	r3, r8
 800c65c:	e7e0      	b.n	800c620 <_strtod_l+0x8d8>
 800c65e:	f7ff fb56 	bl	800bd0e <sulp>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	ec51 0b18 	vmov	r0, r1, d8
 800c66a:	f7f3 fe5d 	bl	8000328 <__aeabi_dsub>
 800c66e:	2200      	movs	r2, #0
 800c670:	2300      	movs	r3, #0
 800c672:	4680      	mov	r8, r0
 800c674:	4689      	mov	r9, r1
 800c676:	f7f4 fa77 	bl	8000b68 <__aeabi_dcmpeq>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d0c0      	beq.n	800c600 <_strtod_l+0x8b8>
 800c67e:	e618      	b.n	800c2b2 <_strtod_l+0x56a>
 800c680:	fffffc02 	.word	0xfffffc02
 800c684:	7ff00000 	.word	0x7ff00000
 800c688:	39500000 	.word	0x39500000
 800c68c:	000fffff 	.word	0x000fffff
 800c690:	7fefffff 	.word	0x7fefffff
 800c694:	0800e410 	.word	0x0800e410
 800c698:	4659      	mov	r1, fp
 800c69a:	4628      	mov	r0, r5
 800c69c:	f7ff fac0 	bl	800bc20 <__ratio>
 800c6a0:	ec57 6b10 	vmov	r6, r7, d0
 800c6a4:	ee10 0a10 	vmov	r0, s0
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6ae:	4639      	mov	r1, r7
 800c6b0:	f7f4 fa6e 	bl	8000b90 <__aeabi_dcmple>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d071      	beq.n	800c79c <_strtod_l+0xa54>
 800c6b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d17c      	bne.n	800c7b8 <_strtod_l+0xa70>
 800c6be:	f1b8 0f00 	cmp.w	r8, #0
 800c6c2:	d15a      	bne.n	800c77a <_strtod_l+0xa32>
 800c6c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d15d      	bne.n	800c788 <_strtod_l+0xa40>
 800c6cc:	4b90      	ldr	r3, [pc, #576]	; (800c910 <_strtod_l+0xbc8>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	f7f4 fa52 	bl	8000b7c <__aeabi_dcmplt>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d15c      	bne.n	800c796 <_strtod_l+0xa4e>
 800c6dc:	4630      	mov	r0, r6
 800c6de:	4639      	mov	r1, r7
 800c6e0:	4b8c      	ldr	r3, [pc, #560]	; (800c914 <_strtod_l+0xbcc>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f7f3 ffd8 	bl	8000698 <__aeabi_dmul>
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	460f      	mov	r7, r1
 800c6ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c6f0:	9606      	str	r6, [sp, #24]
 800c6f2:	9307      	str	r3, [sp, #28]
 800c6f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c6fc:	4b86      	ldr	r3, [pc, #536]	; (800c918 <_strtod_l+0xbd0>)
 800c6fe:	ea0a 0303 	and.w	r3, sl, r3
 800c702:	930d      	str	r3, [sp, #52]	; 0x34
 800c704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c706:	4b85      	ldr	r3, [pc, #532]	; (800c91c <_strtod_l+0xbd4>)
 800c708:	429a      	cmp	r2, r3
 800c70a:	f040 8090 	bne.w	800c82e <_strtod_l+0xae6>
 800c70e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c712:	ec49 8b10 	vmov	d0, r8, r9
 800c716:	f7ff f9b9 	bl	800ba8c <__ulp>
 800c71a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c71e:	ec51 0b10 	vmov	r0, r1, d0
 800c722:	f7f3 ffb9 	bl	8000698 <__aeabi_dmul>
 800c726:	4642      	mov	r2, r8
 800c728:	464b      	mov	r3, r9
 800c72a:	f7f3 fdff 	bl	800032c <__adddf3>
 800c72e:	460b      	mov	r3, r1
 800c730:	4979      	ldr	r1, [pc, #484]	; (800c918 <_strtod_l+0xbd0>)
 800c732:	4a7b      	ldr	r2, [pc, #492]	; (800c920 <_strtod_l+0xbd8>)
 800c734:	4019      	ands	r1, r3
 800c736:	4291      	cmp	r1, r2
 800c738:	4680      	mov	r8, r0
 800c73a:	d944      	bls.n	800c7c6 <_strtod_l+0xa7e>
 800c73c:	ee18 2a90 	vmov	r2, s17
 800c740:	4b78      	ldr	r3, [pc, #480]	; (800c924 <_strtod_l+0xbdc>)
 800c742:	429a      	cmp	r2, r3
 800c744:	d104      	bne.n	800c750 <_strtod_l+0xa08>
 800c746:	ee18 3a10 	vmov	r3, s16
 800c74a:	3301      	adds	r3, #1
 800c74c:	f43f ad40 	beq.w	800c1d0 <_strtod_l+0x488>
 800c750:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c924 <_strtod_l+0xbdc>
 800c754:	f04f 38ff 	mov.w	r8, #4294967295
 800c758:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c75a:	4620      	mov	r0, r4
 800c75c:	f7fe fe6a 	bl	800b434 <_Bfree>
 800c760:	9905      	ldr	r1, [sp, #20]
 800c762:	4620      	mov	r0, r4
 800c764:	f7fe fe66 	bl	800b434 <_Bfree>
 800c768:	4659      	mov	r1, fp
 800c76a:	4620      	mov	r0, r4
 800c76c:	f7fe fe62 	bl	800b434 <_Bfree>
 800c770:	4629      	mov	r1, r5
 800c772:	4620      	mov	r0, r4
 800c774:	f7fe fe5e 	bl	800b434 <_Bfree>
 800c778:	e609      	b.n	800c38e <_strtod_l+0x646>
 800c77a:	f1b8 0f01 	cmp.w	r8, #1
 800c77e:	d103      	bne.n	800c788 <_strtod_l+0xa40>
 800c780:	f1b9 0f00 	cmp.w	r9, #0
 800c784:	f43f ad95 	beq.w	800c2b2 <_strtod_l+0x56a>
 800c788:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c8e0 <_strtod_l+0xb98>
 800c78c:	4f60      	ldr	r7, [pc, #384]	; (800c910 <_strtod_l+0xbc8>)
 800c78e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c792:	2600      	movs	r6, #0
 800c794:	e7ae      	b.n	800c6f4 <_strtod_l+0x9ac>
 800c796:	4f5f      	ldr	r7, [pc, #380]	; (800c914 <_strtod_l+0xbcc>)
 800c798:	2600      	movs	r6, #0
 800c79a:	e7a7      	b.n	800c6ec <_strtod_l+0x9a4>
 800c79c:	4b5d      	ldr	r3, [pc, #372]	; (800c914 <_strtod_l+0xbcc>)
 800c79e:	4630      	mov	r0, r6
 800c7a0:	4639      	mov	r1, r7
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f7f3 ff78 	bl	8000698 <__aeabi_dmul>
 800c7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	460f      	mov	r7, r1
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d09c      	beq.n	800c6ec <_strtod_l+0x9a4>
 800c7b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c7b6:	e79d      	b.n	800c6f4 <_strtod_l+0x9ac>
 800c7b8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c8e8 <_strtod_l+0xba0>
 800c7bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c7c0:	ec57 6b17 	vmov	r6, r7, d7
 800c7c4:	e796      	b.n	800c6f4 <_strtod_l+0x9ac>
 800c7c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c7ca:	9b04      	ldr	r3, [sp, #16]
 800c7cc:	46ca      	mov	sl, r9
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1c2      	bne.n	800c758 <_strtod_l+0xa10>
 800c7d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c7d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7d8:	0d1b      	lsrs	r3, r3, #20
 800c7da:	051b      	lsls	r3, r3, #20
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d1bb      	bne.n	800c758 <_strtod_l+0xa10>
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	4639      	mov	r1, r7
 800c7e4:	f7f4 fab8 	bl	8000d58 <__aeabi_d2lz>
 800c7e8:	f7f3 ff28 	bl	800063c <__aeabi_l2d>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	4639      	mov	r1, r7
 800c7f4:	f7f3 fd98 	bl	8000328 <__aeabi_dsub>
 800c7f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7fe:	ea43 0308 	orr.w	r3, r3, r8
 800c802:	4313      	orrs	r3, r2
 800c804:	4606      	mov	r6, r0
 800c806:	460f      	mov	r7, r1
 800c808:	d054      	beq.n	800c8b4 <_strtod_l+0xb6c>
 800c80a:	a339      	add	r3, pc, #228	; (adr r3, 800c8f0 <_strtod_l+0xba8>)
 800c80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c810:	f7f4 f9b4 	bl	8000b7c <__aeabi_dcmplt>
 800c814:	2800      	cmp	r0, #0
 800c816:	f47f ace5 	bne.w	800c1e4 <_strtod_l+0x49c>
 800c81a:	a337      	add	r3, pc, #220	; (adr r3, 800c8f8 <_strtod_l+0xbb0>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	4630      	mov	r0, r6
 800c822:	4639      	mov	r1, r7
 800c824:	f7f4 f9c8 	bl	8000bb8 <__aeabi_dcmpgt>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d095      	beq.n	800c758 <_strtod_l+0xa10>
 800c82c:	e4da      	b.n	800c1e4 <_strtod_l+0x49c>
 800c82e:	9b04      	ldr	r3, [sp, #16]
 800c830:	b333      	cbz	r3, 800c880 <_strtod_l+0xb38>
 800c832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c834:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c838:	d822      	bhi.n	800c880 <_strtod_l+0xb38>
 800c83a:	a331      	add	r3, pc, #196	; (adr r3, 800c900 <_strtod_l+0xbb8>)
 800c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c840:	4630      	mov	r0, r6
 800c842:	4639      	mov	r1, r7
 800c844:	f7f4 f9a4 	bl	8000b90 <__aeabi_dcmple>
 800c848:	b1a0      	cbz	r0, 800c874 <_strtod_l+0xb2c>
 800c84a:	4639      	mov	r1, r7
 800c84c:	4630      	mov	r0, r6
 800c84e:	f7f4 f9fb 	bl	8000c48 <__aeabi_d2uiz>
 800c852:	2801      	cmp	r0, #1
 800c854:	bf38      	it	cc
 800c856:	2001      	movcc	r0, #1
 800c858:	f7f3 fea4 	bl	80005a4 <__aeabi_ui2d>
 800c85c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c85e:	4606      	mov	r6, r0
 800c860:	460f      	mov	r7, r1
 800c862:	bb23      	cbnz	r3, 800c8ae <_strtod_l+0xb66>
 800c864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c868:	9010      	str	r0, [sp, #64]	; 0x40
 800c86a:	9311      	str	r3, [sp, #68]	; 0x44
 800c86c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c870:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c878:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c87c:	1a9b      	subs	r3, r3, r2
 800c87e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c880:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c884:	eeb0 0a48 	vmov.f32	s0, s16
 800c888:	eef0 0a68 	vmov.f32	s1, s17
 800c88c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c890:	f7ff f8fc 	bl	800ba8c <__ulp>
 800c894:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c898:	ec53 2b10 	vmov	r2, r3, d0
 800c89c:	f7f3 fefc 	bl	8000698 <__aeabi_dmul>
 800c8a0:	ec53 2b18 	vmov	r2, r3, d8
 800c8a4:	f7f3 fd42 	bl	800032c <__adddf3>
 800c8a8:	4680      	mov	r8, r0
 800c8aa:	4689      	mov	r9, r1
 800c8ac:	e78d      	b.n	800c7ca <_strtod_l+0xa82>
 800c8ae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c8b2:	e7db      	b.n	800c86c <_strtod_l+0xb24>
 800c8b4:	a314      	add	r3, pc, #80	; (adr r3, 800c908 <_strtod_l+0xbc0>)
 800c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ba:	f7f4 f95f 	bl	8000b7c <__aeabi_dcmplt>
 800c8be:	e7b3      	b.n	800c828 <_strtod_l+0xae0>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	930a      	str	r3, [sp, #40]	; 0x28
 800c8c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c8c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8c8:	6013      	str	r3, [r2, #0]
 800c8ca:	f7ff ba7c 	b.w	800bdc6 <_strtod_l+0x7e>
 800c8ce:	2a65      	cmp	r2, #101	; 0x65
 800c8d0:	f43f ab75 	beq.w	800bfbe <_strtod_l+0x276>
 800c8d4:	2a45      	cmp	r2, #69	; 0x45
 800c8d6:	f43f ab72 	beq.w	800bfbe <_strtod_l+0x276>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	f7ff bbaa 	b.w	800c034 <_strtod_l+0x2ec>
 800c8e0:	00000000 	.word	0x00000000
 800c8e4:	bff00000 	.word	0xbff00000
 800c8e8:	00000000 	.word	0x00000000
 800c8ec:	3ff00000 	.word	0x3ff00000
 800c8f0:	94a03595 	.word	0x94a03595
 800c8f4:	3fdfffff 	.word	0x3fdfffff
 800c8f8:	35afe535 	.word	0x35afe535
 800c8fc:	3fe00000 	.word	0x3fe00000
 800c900:	ffc00000 	.word	0xffc00000
 800c904:	41dfffff 	.word	0x41dfffff
 800c908:	94a03595 	.word	0x94a03595
 800c90c:	3fcfffff 	.word	0x3fcfffff
 800c910:	3ff00000 	.word	0x3ff00000
 800c914:	3fe00000 	.word	0x3fe00000
 800c918:	7ff00000 	.word	0x7ff00000
 800c91c:	7fe00000 	.word	0x7fe00000
 800c920:	7c9fffff 	.word	0x7c9fffff
 800c924:	7fefffff 	.word	0x7fefffff

0800c928 <_strtod_r>:
 800c928:	4b01      	ldr	r3, [pc, #4]	; (800c930 <_strtod_r+0x8>)
 800c92a:	f7ff ba0d 	b.w	800bd48 <_strtod_l>
 800c92e:	bf00      	nop
 800c930:	2000007c 	.word	0x2000007c

0800c934 <_strtol_l.constprop.0>:
 800c934:	2b01      	cmp	r3, #1
 800c936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c93a:	d001      	beq.n	800c940 <_strtol_l.constprop.0+0xc>
 800c93c:	2b24      	cmp	r3, #36	; 0x24
 800c93e:	d906      	bls.n	800c94e <_strtol_l.constprop.0+0x1a>
 800c940:	f7fd fd7a 	bl	800a438 <__errno>
 800c944:	2316      	movs	r3, #22
 800c946:	6003      	str	r3, [r0, #0]
 800c948:	2000      	movs	r0, #0
 800c94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c94e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ca34 <_strtol_l.constprop.0+0x100>
 800c952:	460d      	mov	r5, r1
 800c954:	462e      	mov	r6, r5
 800c956:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c95a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c95e:	f017 0708 	ands.w	r7, r7, #8
 800c962:	d1f7      	bne.n	800c954 <_strtol_l.constprop.0+0x20>
 800c964:	2c2d      	cmp	r4, #45	; 0x2d
 800c966:	d132      	bne.n	800c9ce <_strtol_l.constprop.0+0x9a>
 800c968:	782c      	ldrb	r4, [r5, #0]
 800c96a:	2701      	movs	r7, #1
 800c96c:	1cb5      	adds	r5, r6, #2
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d05b      	beq.n	800ca2a <_strtol_l.constprop.0+0xf6>
 800c972:	2b10      	cmp	r3, #16
 800c974:	d109      	bne.n	800c98a <_strtol_l.constprop.0+0x56>
 800c976:	2c30      	cmp	r4, #48	; 0x30
 800c978:	d107      	bne.n	800c98a <_strtol_l.constprop.0+0x56>
 800c97a:	782c      	ldrb	r4, [r5, #0]
 800c97c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c980:	2c58      	cmp	r4, #88	; 0x58
 800c982:	d14d      	bne.n	800ca20 <_strtol_l.constprop.0+0xec>
 800c984:	786c      	ldrb	r4, [r5, #1]
 800c986:	2310      	movs	r3, #16
 800c988:	3502      	adds	r5, #2
 800c98a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c98e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c992:	f04f 0e00 	mov.w	lr, #0
 800c996:	fbb8 f9f3 	udiv	r9, r8, r3
 800c99a:	4676      	mov	r6, lr
 800c99c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c9a0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c9a4:	f1bc 0f09 	cmp.w	ip, #9
 800c9a8:	d816      	bhi.n	800c9d8 <_strtol_l.constprop.0+0xa4>
 800c9aa:	4664      	mov	r4, ip
 800c9ac:	42a3      	cmp	r3, r4
 800c9ae:	dd24      	ble.n	800c9fa <_strtol_l.constprop.0+0xc6>
 800c9b0:	f1be 3fff 	cmp.w	lr, #4294967295
 800c9b4:	d008      	beq.n	800c9c8 <_strtol_l.constprop.0+0x94>
 800c9b6:	45b1      	cmp	r9, r6
 800c9b8:	d31c      	bcc.n	800c9f4 <_strtol_l.constprop.0+0xc0>
 800c9ba:	d101      	bne.n	800c9c0 <_strtol_l.constprop.0+0x8c>
 800c9bc:	45a2      	cmp	sl, r4
 800c9be:	db19      	blt.n	800c9f4 <_strtol_l.constprop.0+0xc0>
 800c9c0:	fb06 4603 	mla	r6, r6, r3, r4
 800c9c4:	f04f 0e01 	mov.w	lr, #1
 800c9c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9cc:	e7e8      	b.n	800c9a0 <_strtol_l.constprop.0+0x6c>
 800c9ce:	2c2b      	cmp	r4, #43	; 0x2b
 800c9d0:	bf04      	itt	eq
 800c9d2:	782c      	ldrbeq	r4, [r5, #0]
 800c9d4:	1cb5      	addeq	r5, r6, #2
 800c9d6:	e7ca      	b.n	800c96e <_strtol_l.constprop.0+0x3a>
 800c9d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c9dc:	f1bc 0f19 	cmp.w	ip, #25
 800c9e0:	d801      	bhi.n	800c9e6 <_strtol_l.constprop.0+0xb2>
 800c9e2:	3c37      	subs	r4, #55	; 0x37
 800c9e4:	e7e2      	b.n	800c9ac <_strtol_l.constprop.0+0x78>
 800c9e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c9ea:	f1bc 0f19 	cmp.w	ip, #25
 800c9ee:	d804      	bhi.n	800c9fa <_strtol_l.constprop.0+0xc6>
 800c9f0:	3c57      	subs	r4, #87	; 0x57
 800c9f2:	e7db      	b.n	800c9ac <_strtol_l.constprop.0+0x78>
 800c9f4:	f04f 3eff 	mov.w	lr, #4294967295
 800c9f8:	e7e6      	b.n	800c9c8 <_strtol_l.constprop.0+0x94>
 800c9fa:	f1be 3fff 	cmp.w	lr, #4294967295
 800c9fe:	d105      	bne.n	800ca0c <_strtol_l.constprop.0+0xd8>
 800ca00:	2322      	movs	r3, #34	; 0x22
 800ca02:	6003      	str	r3, [r0, #0]
 800ca04:	4646      	mov	r6, r8
 800ca06:	b942      	cbnz	r2, 800ca1a <_strtol_l.constprop.0+0xe6>
 800ca08:	4630      	mov	r0, r6
 800ca0a:	e79e      	b.n	800c94a <_strtol_l.constprop.0+0x16>
 800ca0c:	b107      	cbz	r7, 800ca10 <_strtol_l.constprop.0+0xdc>
 800ca0e:	4276      	negs	r6, r6
 800ca10:	2a00      	cmp	r2, #0
 800ca12:	d0f9      	beq.n	800ca08 <_strtol_l.constprop.0+0xd4>
 800ca14:	f1be 0f00 	cmp.w	lr, #0
 800ca18:	d000      	beq.n	800ca1c <_strtol_l.constprop.0+0xe8>
 800ca1a:	1e69      	subs	r1, r5, #1
 800ca1c:	6011      	str	r1, [r2, #0]
 800ca1e:	e7f3      	b.n	800ca08 <_strtol_l.constprop.0+0xd4>
 800ca20:	2430      	movs	r4, #48	; 0x30
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1b1      	bne.n	800c98a <_strtol_l.constprop.0+0x56>
 800ca26:	2308      	movs	r3, #8
 800ca28:	e7af      	b.n	800c98a <_strtol_l.constprop.0+0x56>
 800ca2a:	2c30      	cmp	r4, #48	; 0x30
 800ca2c:	d0a5      	beq.n	800c97a <_strtol_l.constprop.0+0x46>
 800ca2e:	230a      	movs	r3, #10
 800ca30:	e7ab      	b.n	800c98a <_strtol_l.constprop.0+0x56>
 800ca32:	bf00      	nop
 800ca34:	0800e439 	.word	0x0800e439

0800ca38 <_strtol_r>:
 800ca38:	f7ff bf7c 	b.w	800c934 <_strtol_l.constprop.0>

0800ca3c <__ssputs_r>:
 800ca3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca40:	688e      	ldr	r6, [r1, #8]
 800ca42:	461f      	mov	r7, r3
 800ca44:	42be      	cmp	r6, r7
 800ca46:	680b      	ldr	r3, [r1, #0]
 800ca48:	4682      	mov	sl, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	4690      	mov	r8, r2
 800ca4e:	d82c      	bhi.n	800caaa <__ssputs_r+0x6e>
 800ca50:	898a      	ldrh	r2, [r1, #12]
 800ca52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca56:	d026      	beq.n	800caa6 <__ssputs_r+0x6a>
 800ca58:	6965      	ldr	r5, [r4, #20]
 800ca5a:	6909      	ldr	r1, [r1, #16]
 800ca5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca60:	eba3 0901 	sub.w	r9, r3, r1
 800ca64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca68:	1c7b      	adds	r3, r7, #1
 800ca6a:	444b      	add	r3, r9
 800ca6c:	106d      	asrs	r5, r5, #1
 800ca6e:	429d      	cmp	r5, r3
 800ca70:	bf38      	it	cc
 800ca72:	461d      	movcc	r5, r3
 800ca74:	0553      	lsls	r3, r2, #21
 800ca76:	d527      	bpl.n	800cac8 <__ssputs_r+0x8c>
 800ca78:	4629      	mov	r1, r5
 800ca7a:	f7fe fc0f 	bl	800b29c <_malloc_r>
 800ca7e:	4606      	mov	r6, r0
 800ca80:	b360      	cbz	r0, 800cadc <__ssputs_r+0xa0>
 800ca82:	6921      	ldr	r1, [r4, #16]
 800ca84:	464a      	mov	r2, r9
 800ca86:	f7fd fd04 	bl	800a492 <memcpy>
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca94:	81a3      	strh	r3, [r4, #12]
 800ca96:	6126      	str	r6, [r4, #16]
 800ca98:	6165      	str	r5, [r4, #20]
 800ca9a:	444e      	add	r6, r9
 800ca9c:	eba5 0509 	sub.w	r5, r5, r9
 800caa0:	6026      	str	r6, [r4, #0]
 800caa2:	60a5      	str	r5, [r4, #8]
 800caa4:	463e      	mov	r6, r7
 800caa6:	42be      	cmp	r6, r7
 800caa8:	d900      	bls.n	800caac <__ssputs_r+0x70>
 800caaa:	463e      	mov	r6, r7
 800caac:	6820      	ldr	r0, [r4, #0]
 800caae:	4632      	mov	r2, r6
 800cab0:	4641      	mov	r1, r8
 800cab2:	f000 f9c9 	bl	800ce48 <memmove>
 800cab6:	68a3      	ldr	r3, [r4, #8]
 800cab8:	1b9b      	subs	r3, r3, r6
 800caba:	60a3      	str	r3, [r4, #8]
 800cabc:	6823      	ldr	r3, [r4, #0]
 800cabe:	4433      	add	r3, r6
 800cac0:	6023      	str	r3, [r4, #0]
 800cac2:	2000      	movs	r0, #0
 800cac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac8:	462a      	mov	r2, r5
 800caca:	f000 fd9e 	bl	800d60a <_realloc_r>
 800cace:	4606      	mov	r6, r0
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d1e0      	bne.n	800ca96 <__ssputs_r+0x5a>
 800cad4:	6921      	ldr	r1, [r4, #16]
 800cad6:	4650      	mov	r0, sl
 800cad8:	f7fe fb6c 	bl	800b1b4 <_free_r>
 800cadc:	230c      	movs	r3, #12
 800cade:	f8ca 3000 	str.w	r3, [sl]
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	f04f 30ff 	mov.w	r0, #4294967295
 800caee:	e7e9      	b.n	800cac4 <__ssputs_r+0x88>

0800caf0 <_svfiprintf_r>:
 800caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	4698      	mov	r8, r3
 800caf6:	898b      	ldrh	r3, [r1, #12]
 800caf8:	061b      	lsls	r3, r3, #24
 800cafa:	b09d      	sub	sp, #116	; 0x74
 800cafc:	4607      	mov	r7, r0
 800cafe:	460d      	mov	r5, r1
 800cb00:	4614      	mov	r4, r2
 800cb02:	d50e      	bpl.n	800cb22 <_svfiprintf_r+0x32>
 800cb04:	690b      	ldr	r3, [r1, #16]
 800cb06:	b963      	cbnz	r3, 800cb22 <_svfiprintf_r+0x32>
 800cb08:	2140      	movs	r1, #64	; 0x40
 800cb0a:	f7fe fbc7 	bl	800b29c <_malloc_r>
 800cb0e:	6028      	str	r0, [r5, #0]
 800cb10:	6128      	str	r0, [r5, #16]
 800cb12:	b920      	cbnz	r0, 800cb1e <_svfiprintf_r+0x2e>
 800cb14:	230c      	movs	r3, #12
 800cb16:	603b      	str	r3, [r7, #0]
 800cb18:	f04f 30ff 	mov.w	r0, #4294967295
 800cb1c:	e0d0      	b.n	800ccc0 <_svfiprintf_r+0x1d0>
 800cb1e:	2340      	movs	r3, #64	; 0x40
 800cb20:	616b      	str	r3, [r5, #20]
 800cb22:	2300      	movs	r3, #0
 800cb24:	9309      	str	r3, [sp, #36]	; 0x24
 800cb26:	2320      	movs	r3, #32
 800cb28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb30:	2330      	movs	r3, #48	; 0x30
 800cb32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ccd8 <_svfiprintf_r+0x1e8>
 800cb36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb3a:	f04f 0901 	mov.w	r9, #1
 800cb3e:	4623      	mov	r3, r4
 800cb40:	469a      	mov	sl, r3
 800cb42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb46:	b10a      	cbz	r2, 800cb4c <_svfiprintf_r+0x5c>
 800cb48:	2a25      	cmp	r2, #37	; 0x25
 800cb4a:	d1f9      	bne.n	800cb40 <_svfiprintf_r+0x50>
 800cb4c:	ebba 0b04 	subs.w	fp, sl, r4
 800cb50:	d00b      	beq.n	800cb6a <_svfiprintf_r+0x7a>
 800cb52:	465b      	mov	r3, fp
 800cb54:	4622      	mov	r2, r4
 800cb56:	4629      	mov	r1, r5
 800cb58:	4638      	mov	r0, r7
 800cb5a:	f7ff ff6f 	bl	800ca3c <__ssputs_r>
 800cb5e:	3001      	adds	r0, #1
 800cb60:	f000 80a9 	beq.w	800ccb6 <_svfiprintf_r+0x1c6>
 800cb64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb66:	445a      	add	r2, fp
 800cb68:	9209      	str	r2, [sp, #36]	; 0x24
 800cb6a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 80a1 	beq.w	800ccb6 <_svfiprintf_r+0x1c6>
 800cb74:	2300      	movs	r3, #0
 800cb76:	f04f 32ff 	mov.w	r2, #4294967295
 800cb7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb7e:	f10a 0a01 	add.w	sl, sl, #1
 800cb82:	9304      	str	r3, [sp, #16]
 800cb84:	9307      	str	r3, [sp, #28]
 800cb86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb8a:	931a      	str	r3, [sp, #104]	; 0x68
 800cb8c:	4654      	mov	r4, sl
 800cb8e:	2205      	movs	r2, #5
 800cb90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb94:	4850      	ldr	r0, [pc, #320]	; (800ccd8 <_svfiprintf_r+0x1e8>)
 800cb96:	f7f3 fb6b 	bl	8000270 <memchr>
 800cb9a:	9a04      	ldr	r2, [sp, #16]
 800cb9c:	b9d8      	cbnz	r0, 800cbd6 <_svfiprintf_r+0xe6>
 800cb9e:	06d0      	lsls	r0, r2, #27
 800cba0:	bf44      	itt	mi
 800cba2:	2320      	movmi	r3, #32
 800cba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cba8:	0711      	lsls	r1, r2, #28
 800cbaa:	bf44      	itt	mi
 800cbac:	232b      	movmi	r3, #43	; 0x2b
 800cbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbb2:	f89a 3000 	ldrb.w	r3, [sl]
 800cbb6:	2b2a      	cmp	r3, #42	; 0x2a
 800cbb8:	d015      	beq.n	800cbe6 <_svfiprintf_r+0xf6>
 800cbba:	9a07      	ldr	r2, [sp, #28]
 800cbbc:	4654      	mov	r4, sl
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	f04f 0c0a 	mov.w	ip, #10
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbca:	3b30      	subs	r3, #48	; 0x30
 800cbcc:	2b09      	cmp	r3, #9
 800cbce:	d94d      	bls.n	800cc6c <_svfiprintf_r+0x17c>
 800cbd0:	b1b0      	cbz	r0, 800cc00 <_svfiprintf_r+0x110>
 800cbd2:	9207      	str	r2, [sp, #28]
 800cbd4:	e014      	b.n	800cc00 <_svfiprintf_r+0x110>
 800cbd6:	eba0 0308 	sub.w	r3, r0, r8
 800cbda:	fa09 f303 	lsl.w	r3, r9, r3
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	9304      	str	r3, [sp, #16]
 800cbe2:	46a2      	mov	sl, r4
 800cbe4:	e7d2      	b.n	800cb8c <_svfiprintf_r+0x9c>
 800cbe6:	9b03      	ldr	r3, [sp, #12]
 800cbe8:	1d19      	adds	r1, r3, #4
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	9103      	str	r1, [sp, #12]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	bfbb      	ittet	lt
 800cbf2:	425b      	neglt	r3, r3
 800cbf4:	f042 0202 	orrlt.w	r2, r2, #2
 800cbf8:	9307      	strge	r3, [sp, #28]
 800cbfa:	9307      	strlt	r3, [sp, #28]
 800cbfc:	bfb8      	it	lt
 800cbfe:	9204      	strlt	r2, [sp, #16]
 800cc00:	7823      	ldrb	r3, [r4, #0]
 800cc02:	2b2e      	cmp	r3, #46	; 0x2e
 800cc04:	d10c      	bne.n	800cc20 <_svfiprintf_r+0x130>
 800cc06:	7863      	ldrb	r3, [r4, #1]
 800cc08:	2b2a      	cmp	r3, #42	; 0x2a
 800cc0a:	d134      	bne.n	800cc76 <_svfiprintf_r+0x186>
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	1d1a      	adds	r2, r3, #4
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	9203      	str	r2, [sp, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	bfb8      	it	lt
 800cc18:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc1c:	3402      	adds	r4, #2
 800cc1e:	9305      	str	r3, [sp, #20]
 800cc20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cce8 <_svfiprintf_r+0x1f8>
 800cc24:	7821      	ldrb	r1, [r4, #0]
 800cc26:	2203      	movs	r2, #3
 800cc28:	4650      	mov	r0, sl
 800cc2a:	f7f3 fb21 	bl	8000270 <memchr>
 800cc2e:	b138      	cbz	r0, 800cc40 <_svfiprintf_r+0x150>
 800cc30:	9b04      	ldr	r3, [sp, #16]
 800cc32:	eba0 000a 	sub.w	r0, r0, sl
 800cc36:	2240      	movs	r2, #64	; 0x40
 800cc38:	4082      	lsls	r2, r0
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	3401      	adds	r4, #1
 800cc3e:	9304      	str	r3, [sp, #16]
 800cc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc44:	4825      	ldr	r0, [pc, #148]	; (800ccdc <_svfiprintf_r+0x1ec>)
 800cc46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc4a:	2206      	movs	r2, #6
 800cc4c:	f7f3 fb10 	bl	8000270 <memchr>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d038      	beq.n	800ccc6 <_svfiprintf_r+0x1d6>
 800cc54:	4b22      	ldr	r3, [pc, #136]	; (800cce0 <_svfiprintf_r+0x1f0>)
 800cc56:	bb1b      	cbnz	r3, 800cca0 <_svfiprintf_r+0x1b0>
 800cc58:	9b03      	ldr	r3, [sp, #12]
 800cc5a:	3307      	adds	r3, #7
 800cc5c:	f023 0307 	bic.w	r3, r3, #7
 800cc60:	3308      	adds	r3, #8
 800cc62:	9303      	str	r3, [sp, #12]
 800cc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc66:	4433      	add	r3, r6
 800cc68:	9309      	str	r3, [sp, #36]	; 0x24
 800cc6a:	e768      	b.n	800cb3e <_svfiprintf_r+0x4e>
 800cc6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc70:	460c      	mov	r4, r1
 800cc72:	2001      	movs	r0, #1
 800cc74:	e7a6      	b.n	800cbc4 <_svfiprintf_r+0xd4>
 800cc76:	2300      	movs	r3, #0
 800cc78:	3401      	adds	r4, #1
 800cc7a:	9305      	str	r3, [sp, #20]
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	f04f 0c0a 	mov.w	ip, #10
 800cc82:	4620      	mov	r0, r4
 800cc84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc88:	3a30      	subs	r2, #48	; 0x30
 800cc8a:	2a09      	cmp	r2, #9
 800cc8c:	d903      	bls.n	800cc96 <_svfiprintf_r+0x1a6>
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0c6      	beq.n	800cc20 <_svfiprintf_r+0x130>
 800cc92:	9105      	str	r1, [sp, #20]
 800cc94:	e7c4      	b.n	800cc20 <_svfiprintf_r+0x130>
 800cc96:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e7f0      	b.n	800cc82 <_svfiprintf_r+0x192>
 800cca0:	ab03      	add	r3, sp, #12
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	462a      	mov	r2, r5
 800cca6:	4b0f      	ldr	r3, [pc, #60]	; (800cce4 <_svfiprintf_r+0x1f4>)
 800cca8:	a904      	add	r1, sp, #16
 800ccaa:	4638      	mov	r0, r7
 800ccac:	f7fc fc78 	bl	80095a0 <_printf_float>
 800ccb0:	1c42      	adds	r2, r0, #1
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	d1d6      	bne.n	800cc64 <_svfiprintf_r+0x174>
 800ccb6:	89ab      	ldrh	r3, [r5, #12]
 800ccb8:	065b      	lsls	r3, r3, #25
 800ccba:	f53f af2d 	bmi.w	800cb18 <_svfiprintf_r+0x28>
 800ccbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccc0:	b01d      	add	sp, #116	; 0x74
 800ccc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc6:	ab03      	add	r3, sp, #12
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	462a      	mov	r2, r5
 800cccc:	4b05      	ldr	r3, [pc, #20]	; (800cce4 <_svfiprintf_r+0x1f4>)
 800ccce:	a904      	add	r1, sp, #16
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	f7fc ff09 	bl	8009ae8 <_printf_i>
 800ccd6:	e7eb      	b.n	800ccb0 <_svfiprintf_r+0x1c0>
 800ccd8:	0800e539 	.word	0x0800e539
 800ccdc:	0800e543 	.word	0x0800e543
 800cce0:	080095a1 	.word	0x080095a1
 800cce4:	0800ca3d 	.word	0x0800ca3d
 800cce8:	0800e53f 	.word	0x0800e53f

0800ccec <__sflush_r>:
 800ccec:	898a      	ldrh	r2, [r1, #12]
 800ccee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf2:	4605      	mov	r5, r0
 800ccf4:	0710      	lsls	r0, r2, #28
 800ccf6:	460c      	mov	r4, r1
 800ccf8:	d458      	bmi.n	800cdac <__sflush_r+0xc0>
 800ccfa:	684b      	ldr	r3, [r1, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	dc05      	bgt.n	800cd0c <__sflush_r+0x20>
 800cd00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	dc02      	bgt.n	800cd0c <__sflush_r+0x20>
 800cd06:	2000      	movs	r0, #0
 800cd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd0e:	2e00      	cmp	r6, #0
 800cd10:	d0f9      	beq.n	800cd06 <__sflush_r+0x1a>
 800cd12:	2300      	movs	r3, #0
 800cd14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd18:	682f      	ldr	r7, [r5, #0]
 800cd1a:	6a21      	ldr	r1, [r4, #32]
 800cd1c:	602b      	str	r3, [r5, #0]
 800cd1e:	d032      	beq.n	800cd86 <__sflush_r+0x9a>
 800cd20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd22:	89a3      	ldrh	r3, [r4, #12]
 800cd24:	075a      	lsls	r2, r3, #29
 800cd26:	d505      	bpl.n	800cd34 <__sflush_r+0x48>
 800cd28:	6863      	ldr	r3, [r4, #4]
 800cd2a:	1ac0      	subs	r0, r0, r3
 800cd2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd2e:	b10b      	cbz	r3, 800cd34 <__sflush_r+0x48>
 800cd30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd32:	1ac0      	subs	r0, r0, r3
 800cd34:	2300      	movs	r3, #0
 800cd36:	4602      	mov	r2, r0
 800cd38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd3a:	6a21      	ldr	r1, [r4, #32]
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	47b0      	blx	r6
 800cd40:	1c43      	adds	r3, r0, #1
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	d106      	bne.n	800cd54 <__sflush_r+0x68>
 800cd46:	6829      	ldr	r1, [r5, #0]
 800cd48:	291d      	cmp	r1, #29
 800cd4a:	d82b      	bhi.n	800cda4 <__sflush_r+0xb8>
 800cd4c:	4a29      	ldr	r2, [pc, #164]	; (800cdf4 <__sflush_r+0x108>)
 800cd4e:	410a      	asrs	r2, r1
 800cd50:	07d6      	lsls	r6, r2, #31
 800cd52:	d427      	bmi.n	800cda4 <__sflush_r+0xb8>
 800cd54:	2200      	movs	r2, #0
 800cd56:	6062      	str	r2, [r4, #4]
 800cd58:	04d9      	lsls	r1, r3, #19
 800cd5a:	6922      	ldr	r2, [r4, #16]
 800cd5c:	6022      	str	r2, [r4, #0]
 800cd5e:	d504      	bpl.n	800cd6a <__sflush_r+0x7e>
 800cd60:	1c42      	adds	r2, r0, #1
 800cd62:	d101      	bne.n	800cd68 <__sflush_r+0x7c>
 800cd64:	682b      	ldr	r3, [r5, #0]
 800cd66:	b903      	cbnz	r3, 800cd6a <__sflush_r+0x7e>
 800cd68:	6560      	str	r0, [r4, #84]	; 0x54
 800cd6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd6c:	602f      	str	r7, [r5, #0]
 800cd6e:	2900      	cmp	r1, #0
 800cd70:	d0c9      	beq.n	800cd06 <__sflush_r+0x1a>
 800cd72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd76:	4299      	cmp	r1, r3
 800cd78:	d002      	beq.n	800cd80 <__sflush_r+0x94>
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f7fe fa1a 	bl	800b1b4 <_free_r>
 800cd80:	2000      	movs	r0, #0
 800cd82:	6360      	str	r0, [r4, #52]	; 0x34
 800cd84:	e7c0      	b.n	800cd08 <__sflush_r+0x1c>
 800cd86:	2301      	movs	r3, #1
 800cd88:	4628      	mov	r0, r5
 800cd8a:	47b0      	blx	r6
 800cd8c:	1c41      	adds	r1, r0, #1
 800cd8e:	d1c8      	bne.n	800cd22 <__sflush_r+0x36>
 800cd90:	682b      	ldr	r3, [r5, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d0c5      	beq.n	800cd22 <__sflush_r+0x36>
 800cd96:	2b1d      	cmp	r3, #29
 800cd98:	d001      	beq.n	800cd9e <__sflush_r+0xb2>
 800cd9a:	2b16      	cmp	r3, #22
 800cd9c:	d101      	bne.n	800cda2 <__sflush_r+0xb6>
 800cd9e:	602f      	str	r7, [r5, #0]
 800cda0:	e7b1      	b.n	800cd06 <__sflush_r+0x1a>
 800cda2:	89a3      	ldrh	r3, [r4, #12]
 800cda4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cda8:	81a3      	strh	r3, [r4, #12]
 800cdaa:	e7ad      	b.n	800cd08 <__sflush_r+0x1c>
 800cdac:	690f      	ldr	r7, [r1, #16]
 800cdae:	2f00      	cmp	r7, #0
 800cdb0:	d0a9      	beq.n	800cd06 <__sflush_r+0x1a>
 800cdb2:	0793      	lsls	r3, r2, #30
 800cdb4:	680e      	ldr	r6, [r1, #0]
 800cdb6:	bf08      	it	eq
 800cdb8:	694b      	ldreq	r3, [r1, #20]
 800cdba:	600f      	str	r7, [r1, #0]
 800cdbc:	bf18      	it	ne
 800cdbe:	2300      	movne	r3, #0
 800cdc0:	eba6 0807 	sub.w	r8, r6, r7
 800cdc4:	608b      	str	r3, [r1, #8]
 800cdc6:	f1b8 0f00 	cmp.w	r8, #0
 800cdca:	dd9c      	ble.n	800cd06 <__sflush_r+0x1a>
 800cdcc:	6a21      	ldr	r1, [r4, #32]
 800cdce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cdd0:	4643      	mov	r3, r8
 800cdd2:	463a      	mov	r2, r7
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	47b0      	blx	r6
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	dc06      	bgt.n	800cdea <__sflush_r+0xfe>
 800cddc:	89a3      	ldrh	r3, [r4, #12]
 800cdde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cde2:	81a3      	strh	r3, [r4, #12]
 800cde4:	f04f 30ff 	mov.w	r0, #4294967295
 800cde8:	e78e      	b.n	800cd08 <__sflush_r+0x1c>
 800cdea:	4407      	add	r7, r0
 800cdec:	eba8 0800 	sub.w	r8, r8, r0
 800cdf0:	e7e9      	b.n	800cdc6 <__sflush_r+0xda>
 800cdf2:	bf00      	nop
 800cdf4:	dfbffffe 	.word	0xdfbffffe

0800cdf8 <_fflush_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	690b      	ldr	r3, [r1, #16]
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	460c      	mov	r4, r1
 800ce00:	b913      	cbnz	r3, 800ce08 <_fflush_r+0x10>
 800ce02:	2500      	movs	r5, #0
 800ce04:	4628      	mov	r0, r5
 800ce06:	bd38      	pop	{r3, r4, r5, pc}
 800ce08:	b118      	cbz	r0, 800ce12 <_fflush_r+0x1a>
 800ce0a:	6a03      	ldr	r3, [r0, #32]
 800ce0c:	b90b      	cbnz	r3, 800ce12 <_fflush_r+0x1a>
 800ce0e:	f7fd fa29 	bl	800a264 <__sinit>
 800ce12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d0f3      	beq.n	800ce02 <_fflush_r+0xa>
 800ce1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce1c:	07d0      	lsls	r0, r2, #31
 800ce1e:	d404      	bmi.n	800ce2a <_fflush_r+0x32>
 800ce20:	0599      	lsls	r1, r3, #22
 800ce22:	d402      	bmi.n	800ce2a <_fflush_r+0x32>
 800ce24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce26:	f7fd fb32 	bl	800a48e <__retarget_lock_acquire_recursive>
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	4621      	mov	r1, r4
 800ce2e:	f7ff ff5d 	bl	800ccec <__sflush_r>
 800ce32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce34:	07da      	lsls	r2, r3, #31
 800ce36:	4605      	mov	r5, r0
 800ce38:	d4e4      	bmi.n	800ce04 <_fflush_r+0xc>
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	059b      	lsls	r3, r3, #22
 800ce3e:	d4e1      	bmi.n	800ce04 <_fflush_r+0xc>
 800ce40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce42:	f7fd fb25 	bl	800a490 <__retarget_lock_release_recursive>
 800ce46:	e7dd      	b.n	800ce04 <_fflush_r+0xc>

0800ce48 <memmove>:
 800ce48:	4288      	cmp	r0, r1
 800ce4a:	b510      	push	{r4, lr}
 800ce4c:	eb01 0402 	add.w	r4, r1, r2
 800ce50:	d902      	bls.n	800ce58 <memmove+0x10>
 800ce52:	4284      	cmp	r4, r0
 800ce54:	4623      	mov	r3, r4
 800ce56:	d807      	bhi.n	800ce68 <memmove+0x20>
 800ce58:	1e43      	subs	r3, r0, #1
 800ce5a:	42a1      	cmp	r1, r4
 800ce5c:	d008      	beq.n	800ce70 <memmove+0x28>
 800ce5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce66:	e7f8      	b.n	800ce5a <memmove+0x12>
 800ce68:	4402      	add	r2, r0
 800ce6a:	4601      	mov	r1, r0
 800ce6c:	428a      	cmp	r2, r1
 800ce6e:	d100      	bne.n	800ce72 <memmove+0x2a>
 800ce70:	bd10      	pop	{r4, pc}
 800ce72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce7a:	e7f7      	b.n	800ce6c <memmove+0x24>

0800ce7c <strncmp>:
 800ce7c:	b510      	push	{r4, lr}
 800ce7e:	b16a      	cbz	r2, 800ce9c <strncmp+0x20>
 800ce80:	3901      	subs	r1, #1
 800ce82:	1884      	adds	r4, r0, r2
 800ce84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d103      	bne.n	800ce98 <strncmp+0x1c>
 800ce90:	42a0      	cmp	r0, r4
 800ce92:	d001      	beq.n	800ce98 <strncmp+0x1c>
 800ce94:	2a00      	cmp	r2, #0
 800ce96:	d1f5      	bne.n	800ce84 <strncmp+0x8>
 800ce98:	1ad0      	subs	r0, r2, r3
 800ce9a:	bd10      	pop	{r4, pc}
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	e7fc      	b.n	800ce9a <strncmp+0x1e>

0800cea0 <_sbrk_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4d06      	ldr	r5, [pc, #24]	; (800cebc <_sbrk_r+0x1c>)
 800cea4:	2300      	movs	r3, #0
 800cea6:	4604      	mov	r4, r0
 800cea8:	4608      	mov	r0, r1
 800ceaa:	602b      	str	r3, [r5, #0]
 800ceac:	f7f5 f9b4 	bl	8002218 <_sbrk>
 800ceb0:	1c43      	adds	r3, r0, #1
 800ceb2:	d102      	bne.n	800ceba <_sbrk_r+0x1a>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	b103      	cbz	r3, 800ceba <_sbrk_r+0x1a>
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	bd38      	pop	{r3, r4, r5, pc}
 800cebc:	2001499c 	.word	0x2001499c

0800cec0 <nan>:
 800cec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cec8 <nan+0x8>
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	00000000 	.word	0x00000000
 800cecc:	7ff80000 	.word	0x7ff80000

0800ced0 <__assert_func>:
 800ced0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ced2:	4614      	mov	r4, r2
 800ced4:	461a      	mov	r2, r3
 800ced6:	4b09      	ldr	r3, [pc, #36]	; (800cefc <__assert_func+0x2c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4605      	mov	r5, r0
 800cedc:	68d8      	ldr	r0, [r3, #12]
 800cede:	b14c      	cbz	r4, 800cef4 <__assert_func+0x24>
 800cee0:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <__assert_func+0x30>)
 800cee2:	9100      	str	r1, [sp, #0]
 800cee4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cee8:	4906      	ldr	r1, [pc, #24]	; (800cf04 <__assert_func+0x34>)
 800ceea:	462b      	mov	r3, r5
 800ceec:	f000 fbca 	bl	800d684 <fiprintf>
 800cef0:	f000 fbda 	bl	800d6a8 <abort>
 800cef4:	4b04      	ldr	r3, [pc, #16]	; (800cf08 <__assert_func+0x38>)
 800cef6:	461c      	mov	r4, r3
 800cef8:	e7f3      	b.n	800cee2 <__assert_func+0x12>
 800cefa:	bf00      	nop
 800cefc:	20000078 	.word	0x20000078
 800cf00:	0800e552 	.word	0x0800e552
 800cf04:	0800e55f 	.word	0x0800e55f
 800cf08:	0800e58d 	.word	0x0800e58d

0800cf0c <_calloc_r>:
 800cf0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf0e:	fba1 2402 	umull	r2, r4, r1, r2
 800cf12:	b94c      	cbnz	r4, 800cf28 <_calloc_r+0x1c>
 800cf14:	4611      	mov	r1, r2
 800cf16:	9201      	str	r2, [sp, #4]
 800cf18:	f7fe f9c0 	bl	800b29c <_malloc_r>
 800cf1c:	9a01      	ldr	r2, [sp, #4]
 800cf1e:	4605      	mov	r5, r0
 800cf20:	b930      	cbnz	r0, 800cf30 <_calloc_r+0x24>
 800cf22:	4628      	mov	r0, r5
 800cf24:	b003      	add	sp, #12
 800cf26:	bd30      	pop	{r4, r5, pc}
 800cf28:	220c      	movs	r2, #12
 800cf2a:	6002      	str	r2, [r0, #0]
 800cf2c:	2500      	movs	r5, #0
 800cf2e:	e7f8      	b.n	800cf22 <_calloc_r+0x16>
 800cf30:	4621      	mov	r1, r4
 800cf32:	f7fd fa40 	bl	800a3b6 <memset>
 800cf36:	e7f4      	b.n	800cf22 <_calloc_r+0x16>

0800cf38 <rshift>:
 800cf38:	6903      	ldr	r3, [r0, #16]
 800cf3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf42:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf46:	f100 0414 	add.w	r4, r0, #20
 800cf4a:	dd45      	ble.n	800cfd8 <rshift+0xa0>
 800cf4c:	f011 011f 	ands.w	r1, r1, #31
 800cf50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf58:	d10c      	bne.n	800cf74 <rshift+0x3c>
 800cf5a:	f100 0710 	add.w	r7, r0, #16
 800cf5e:	4629      	mov	r1, r5
 800cf60:	42b1      	cmp	r1, r6
 800cf62:	d334      	bcc.n	800cfce <rshift+0x96>
 800cf64:	1a9b      	subs	r3, r3, r2
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	1eea      	subs	r2, r5, #3
 800cf6a:	4296      	cmp	r6, r2
 800cf6c:	bf38      	it	cc
 800cf6e:	2300      	movcc	r3, #0
 800cf70:	4423      	add	r3, r4
 800cf72:	e015      	b.n	800cfa0 <rshift+0x68>
 800cf74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf78:	f1c1 0820 	rsb	r8, r1, #32
 800cf7c:	40cf      	lsrs	r7, r1
 800cf7e:	f105 0e04 	add.w	lr, r5, #4
 800cf82:	46a1      	mov	r9, r4
 800cf84:	4576      	cmp	r6, lr
 800cf86:	46f4      	mov	ip, lr
 800cf88:	d815      	bhi.n	800cfb6 <rshift+0x7e>
 800cf8a:	1a9a      	subs	r2, r3, r2
 800cf8c:	0092      	lsls	r2, r2, #2
 800cf8e:	3a04      	subs	r2, #4
 800cf90:	3501      	adds	r5, #1
 800cf92:	42ae      	cmp	r6, r5
 800cf94:	bf38      	it	cc
 800cf96:	2200      	movcc	r2, #0
 800cf98:	18a3      	adds	r3, r4, r2
 800cf9a:	50a7      	str	r7, [r4, r2]
 800cf9c:	b107      	cbz	r7, 800cfa0 <rshift+0x68>
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	1b1a      	subs	r2, r3, r4
 800cfa2:	42a3      	cmp	r3, r4
 800cfa4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cfa8:	bf08      	it	eq
 800cfaa:	2300      	moveq	r3, #0
 800cfac:	6102      	str	r2, [r0, #16]
 800cfae:	bf08      	it	eq
 800cfb0:	6143      	streq	r3, [r0, #20]
 800cfb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfb6:	f8dc c000 	ldr.w	ip, [ip]
 800cfba:	fa0c fc08 	lsl.w	ip, ip, r8
 800cfbe:	ea4c 0707 	orr.w	r7, ip, r7
 800cfc2:	f849 7b04 	str.w	r7, [r9], #4
 800cfc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfca:	40cf      	lsrs	r7, r1
 800cfcc:	e7da      	b.n	800cf84 <rshift+0x4c>
 800cfce:	f851 cb04 	ldr.w	ip, [r1], #4
 800cfd2:	f847 cf04 	str.w	ip, [r7, #4]!
 800cfd6:	e7c3      	b.n	800cf60 <rshift+0x28>
 800cfd8:	4623      	mov	r3, r4
 800cfda:	e7e1      	b.n	800cfa0 <rshift+0x68>

0800cfdc <__hexdig_fun>:
 800cfdc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cfe0:	2b09      	cmp	r3, #9
 800cfe2:	d802      	bhi.n	800cfea <__hexdig_fun+0xe>
 800cfe4:	3820      	subs	r0, #32
 800cfe6:	b2c0      	uxtb	r0, r0
 800cfe8:	4770      	bx	lr
 800cfea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cfee:	2b05      	cmp	r3, #5
 800cff0:	d801      	bhi.n	800cff6 <__hexdig_fun+0x1a>
 800cff2:	3847      	subs	r0, #71	; 0x47
 800cff4:	e7f7      	b.n	800cfe6 <__hexdig_fun+0xa>
 800cff6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cffa:	2b05      	cmp	r3, #5
 800cffc:	d801      	bhi.n	800d002 <__hexdig_fun+0x26>
 800cffe:	3827      	subs	r0, #39	; 0x27
 800d000:	e7f1      	b.n	800cfe6 <__hexdig_fun+0xa>
 800d002:	2000      	movs	r0, #0
 800d004:	4770      	bx	lr
	...

0800d008 <__gethex>:
 800d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00c:	4617      	mov	r7, r2
 800d00e:	680a      	ldr	r2, [r1, #0]
 800d010:	b085      	sub	sp, #20
 800d012:	f102 0b02 	add.w	fp, r2, #2
 800d016:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d01a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d01e:	4681      	mov	r9, r0
 800d020:	468a      	mov	sl, r1
 800d022:	9302      	str	r3, [sp, #8]
 800d024:	32fe      	adds	r2, #254	; 0xfe
 800d026:	eb02 030b 	add.w	r3, r2, fp
 800d02a:	46d8      	mov	r8, fp
 800d02c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d030:	9301      	str	r3, [sp, #4]
 800d032:	2830      	cmp	r0, #48	; 0x30
 800d034:	d0f7      	beq.n	800d026 <__gethex+0x1e>
 800d036:	f7ff ffd1 	bl	800cfdc <__hexdig_fun>
 800d03a:	4604      	mov	r4, r0
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d138      	bne.n	800d0b2 <__gethex+0xaa>
 800d040:	49a7      	ldr	r1, [pc, #668]	; (800d2e0 <__gethex+0x2d8>)
 800d042:	2201      	movs	r2, #1
 800d044:	4640      	mov	r0, r8
 800d046:	f7ff ff19 	bl	800ce7c <strncmp>
 800d04a:	4606      	mov	r6, r0
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d169      	bne.n	800d124 <__gethex+0x11c>
 800d050:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d054:	465d      	mov	r5, fp
 800d056:	f7ff ffc1 	bl	800cfdc <__hexdig_fun>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d064      	beq.n	800d128 <__gethex+0x120>
 800d05e:	465a      	mov	r2, fp
 800d060:	7810      	ldrb	r0, [r2, #0]
 800d062:	2830      	cmp	r0, #48	; 0x30
 800d064:	4690      	mov	r8, r2
 800d066:	f102 0201 	add.w	r2, r2, #1
 800d06a:	d0f9      	beq.n	800d060 <__gethex+0x58>
 800d06c:	f7ff ffb6 	bl	800cfdc <__hexdig_fun>
 800d070:	2301      	movs	r3, #1
 800d072:	fab0 f480 	clz	r4, r0
 800d076:	0964      	lsrs	r4, r4, #5
 800d078:	465e      	mov	r6, fp
 800d07a:	9301      	str	r3, [sp, #4]
 800d07c:	4642      	mov	r2, r8
 800d07e:	4615      	mov	r5, r2
 800d080:	3201      	adds	r2, #1
 800d082:	7828      	ldrb	r0, [r5, #0]
 800d084:	f7ff ffaa 	bl	800cfdc <__hexdig_fun>
 800d088:	2800      	cmp	r0, #0
 800d08a:	d1f8      	bne.n	800d07e <__gethex+0x76>
 800d08c:	4994      	ldr	r1, [pc, #592]	; (800d2e0 <__gethex+0x2d8>)
 800d08e:	2201      	movs	r2, #1
 800d090:	4628      	mov	r0, r5
 800d092:	f7ff fef3 	bl	800ce7c <strncmp>
 800d096:	b978      	cbnz	r0, 800d0b8 <__gethex+0xb0>
 800d098:	b946      	cbnz	r6, 800d0ac <__gethex+0xa4>
 800d09a:	1c6e      	adds	r6, r5, #1
 800d09c:	4632      	mov	r2, r6
 800d09e:	4615      	mov	r5, r2
 800d0a0:	3201      	adds	r2, #1
 800d0a2:	7828      	ldrb	r0, [r5, #0]
 800d0a4:	f7ff ff9a 	bl	800cfdc <__hexdig_fun>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d1f8      	bne.n	800d09e <__gethex+0x96>
 800d0ac:	1b73      	subs	r3, r6, r5
 800d0ae:	009e      	lsls	r6, r3, #2
 800d0b0:	e004      	b.n	800d0bc <__gethex+0xb4>
 800d0b2:	2400      	movs	r4, #0
 800d0b4:	4626      	mov	r6, r4
 800d0b6:	e7e1      	b.n	800d07c <__gethex+0x74>
 800d0b8:	2e00      	cmp	r6, #0
 800d0ba:	d1f7      	bne.n	800d0ac <__gethex+0xa4>
 800d0bc:	782b      	ldrb	r3, [r5, #0]
 800d0be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d0c2:	2b50      	cmp	r3, #80	; 0x50
 800d0c4:	d13d      	bne.n	800d142 <__gethex+0x13a>
 800d0c6:	786b      	ldrb	r3, [r5, #1]
 800d0c8:	2b2b      	cmp	r3, #43	; 0x2b
 800d0ca:	d02f      	beq.n	800d12c <__gethex+0x124>
 800d0cc:	2b2d      	cmp	r3, #45	; 0x2d
 800d0ce:	d031      	beq.n	800d134 <__gethex+0x12c>
 800d0d0:	1c69      	adds	r1, r5, #1
 800d0d2:	f04f 0b00 	mov.w	fp, #0
 800d0d6:	7808      	ldrb	r0, [r1, #0]
 800d0d8:	f7ff ff80 	bl	800cfdc <__hexdig_fun>
 800d0dc:	1e42      	subs	r2, r0, #1
 800d0de:	b2d2      	uxtb	r2, r2
 800d0e0:	2a18      	cmp	r2, #24
 800d0e2:	d82e      	bhi.n	800d142 <__gethex+0x13a>
 800d0e4:	f1a0 0210 	sub.w	r2, r0, #16
 800d0e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d0ec:	f7ff ff76 	bl	800cfdc <__hexdig_fun>
 800d0f0:	f100 3cff 	add.w	ip, r0, #4294967295
 800d0f4:	fa5f fc8c 	uxtb.w	ip, ip
 800d0f8:	f1bc 0f18 	cmp.w	ip, #24
 800d0fc:	d91d      	bls.n	800d13a <__gethex+0x132>
 800d0fe:	f1bb 0f00 	cmp.w	fp, #0
 800d102:	d000      	beq.n	800d106 <__gethex+0xfe>
 800d104:	4252      	negs	r2, r2
 800d106:	4416      	add	r6, r2
 800d108:	f8ca 1000 	str.w	r1, [sl]
 800d10c:	b1dc      	cbz	r4, 800d146 <__gethex+0x13e>
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	bf14      	ite	ne
 800d114:	f04f 0800 	movne.w	r8, #0
 800d118:	f04f 0806 	moveq.w	r8, #6
 800d11c:	4640      	mov	r0, r8
 800d11e:	b005      	add	sp, #20
 800d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d124:	4645      	mov	r5, r8
 800d126:	4626      	mov	r6, r4
 800d128:	2401      	movs	r4, #1
 800d12a:	e7c7      	b.n	800d0bc <__gethex+0xb4>
 800d12c:	f04f 0b00 	mov.w	fp, #0
 800d130:	1ca9      	adds	r1, r5, #2
 800d132:	e7d0      	b.n	800d0d6 <__gethex+0xce>
 800d134:	f04f 0b01 	mov.w	fp, #1
 800d138:	e7fa      	b.n	800d130 <__gethex+0x128>
 800d13a:	230a      	movs	r3, #10
 800d13c:	fb03 0002 	mla	r0, r3, r2, r0
 800d140:	e7d0      	b.n	800d0e4 <__gethex+0xdc>
 800d142:	4629      	mov	r1, r5
 800d144:	e7e0      	b.n	800d108 <__gethex+0x100>
 800d146:	eba5 0308 	sub.w	r3, r5, r8
 800d14a:	3b01      	subs	r3, #1
 800d14c:	4621      	mov	r1, r4
 800d14e:	2b07      	cmp	r3, #7
 800d150:	dc0a      	bgt.n	800d168 <__gethex+0x160>
 800d152:	4648      	mov	r0, r9
 800d154:	f7fe f92e 	bl	800b3b4 <_Balloc>
 800d158:	4604      	mov	r4, r0
 800d15a:	b940      	cbnz	r0, 800d16e <__gethex+0x166>
 800d15c:	4b61      	ldr	r3, [pc, #388]	; (800d2e4 <__gethex+0x2dc>)
 800d15e:	4602      	mov	r2, r0
 800d160:	21e4      	movs	r1, #228	; 0xe4
 800d162:	4861      	ldr	r0, [pc, #388]	; (800d2e8 <__gethex+0x2e0>)
 800d164:	f7ff feb4 	bl	800ced0 <__assert_func>
 800d168:	3101      	adds	r1, #1
 800d16a:	105b      	asrs	r3, r3, #1
 800d16c:	e7ef      	b.n	800d14e <__gethex+0x146>
 800d16e:	f100 0a14 	add.w	sl, r0, #20
 800d172:	2300      	movs	r3, #0
 800d174:	495a      	ldr	r1, [pc, #360]	; (800d2e0 <__gethex+0x2d8>)
 800d176:	f8cd a004 	str.w	sl, [sp, #4]
 800d17a:	469b      	mov	fp, r3
 800d17c:	45a8      	cmp	r8, r5
 800d17e:	d342      	bcc.n	800d206 <__gethex+0x1fe>
 800d180:	9801      	ldr	r0, [sp, #4]
 800d182:	f840 bb04 	str.w	fp, [r0], #4
 800d186:	eba0 000a 	sub.w	r0, r0, sl
 800d18a:	1080      	asrs	r0, r0, #2
 800d18c:	6120      	str	r0, [r4, #16]
 800d18e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d192:	4658      	mov	r0, fp
 800d194:	f7fe fa00 	bl	800b598 <__hi0bits>
 800d198:	683d      	ldr	r5, [r7, #0]
 800d19a:	eba8 0000 	sub.w	r0, r8, r0
 800d19e:	42a8      	cmp	r0, r5
 800d1a0:	dd59      	ble.n	800d256 <__gethex+0x24e>
 800d1a2:	eba0 0805 	sub.w	r8, r0, r5
 800d1a6:	4641      	mov	r1, r8
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f7fe fd8f 	bl	800bccc <__any_on>
 800d1ae:	4683      	mov	fp, r0
 800d1b0:	b1b8      	cbz	r0, 800d1e2 <__gethex+0x1da>
 800d1b2:	f108 33ff 	add.w	r3, r8, #4294967295
 800d1b6:	1159      	asrs	r1, r3, #5
 800d1b8:	f003 021f 	and.w	r2, r3, #31
 800d1bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d1c0:	f04f 0b01 	mov.w	fp, #1
 800d1c4:	fa0b f202 	lsl.w	r2, fp, r2
 800d1c8:	420a      	tst	r2, r1
 800d1ca:	d00a      	beq.n	800d1e2 <__gethex+0x1da>
 800d1cc:	455b      	cmp	r3, fp
 800d1ce:	dd06      	ble.n	800d1de <__gethex+0x1d6>
 800d1d0:	f1a8 0102 	sub.w	r1, r8, #2
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f7fe fd79 	bl	800bccc <__any_on>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d138      	bne.n	800d250 <__gethex+0x248>
 800d1de:	f04f 0b02 	mov.w	fp, #2
 800d1e2:	4641      	mov	r1, r8
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f7ff fea7 	bl	800cf38 <rshift>
 800d1ea:	4446      	add	r6, r8
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	42b3      	cmp	r3, r6
 800d1f0:	da41      	bge.n	800d276 <__gethex+0x26e>
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	4648      	mov	r0, r9
 800d1f6:	f7fe f91d 	bl	800b434 <_Bfree>
 800d1fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	6013      	str	r3, [r2, #0]
 800d200:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d204:	e78a      	b.n	800d11c <__gethex+0x114>
 800d206:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d20a:	2a2e      	cmp	r2, #46	; 0x2e
 800d20c:	d014      	beq.n	800d238 <__gethex+0x230>
 800d20e:	2b20      	cmp	r3, #32
 800d210:	d106      	bne.n	800d220 <__gethex+0x218>
 800d212:	9b01      	ldr	r3, [sp, #4]
 800d214:	f843 bb04 	str.w	fp, [r3], #4
 800d218:	f04f 0b00 	mov.w	fp, #0
 800d21c:	9301      	str	r3, [sp, #4]
 800d21e:	465b      	mov	r3, fp
 800d220:	7828      	ldrb	r0, [r5, #0]
 800d222:	9303      	str	r3, [sp, #12]
 800d224:	f7ff feda 	bl	800cfdc <__hexdig_fun>
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	f000 000f 	and.w	r0, r0, #15
 800d22e:	4098      	lsls	r0, r3
 800d230:	ea4b 0b00 	orr.w	fp, fp, r0
 800d234:	3304      	adds	r3, #4
 800d236:	e7a1      	b.n	800d17c <__gethex+0x174>
 800d238:	45a8      	cmp	r8, r5
 800d23a:	d8e8      	bhi.n	800d20e <__gethex+0x206>
 800d23c:	2201      	movs	r2, #1
 800d23e:	4628      	mov	r0, r5
 800d240:	9303      	str	r3, [sp, #12]
 800d242:	f7ff fe1b 	bl	800ce7c <strncmp>
 800d246:	4926      	ldr	r1, [pc, #152]	; (800d2e0 <__gethex+0x2d8>)
 800d248:	9b03      	ldr	r3, [sp, #12]
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d1df      	bne.n	800d20e <__gethex+0x206>
 800d24e:	e795      	b.n	800d17c <__gethex+0x174>
 800d250:	f04f 0b03 	mov.w	fp, #3
 800d254:	e7c5      	b.n	800d1e2 <__gethex+0x1da>
 800d256:	da0b      	bge.n	800d270 <__gethex+0x268>
 800d258:	eba5 0800 	sub.w	r8, r5, r0
 800d25c:	4621      	mov	r1, r4
 800d25e:	4642      	mov	r2, r8
 800d260:	4648      	mov	r0, r9
 800d262:	f7fe fb01 	bl	800b868 <__lshift>
 800d266:	eba6 0608 	sub.w	r6, r6, r8
 800d26a:	4604      	mov	r4, r0
 800d26c:	f100 0a14 	add.w	sl, r0, #20
 800d270:	f04f 0b00 	mov.w	fp, #0
 800d274:	e7ba      	b.n	800d1ec <__gethex+0x1e4>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	42b3      	cmp	r3, r6
 800d27a:	dd73      	ble.n	800d364 <__gethex+0x35c>
 800d27c:	1b9e      	subs	r6, r3, r6
 800d27e:	42b5      	cmp	r5, r6
 800d280:	dc34      	bgt.n	800d2ec <__gethex+0x2e4>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b02      	cmp	r3, #2
 800d286:	d023      	beq.n	800d2d0 <__gethex+0x2c8>
 800d288:	2b03      	cmp	r3, #3
 800d28a:	d025      	beq.n	800d2d8 <__gethex+0x2d0>
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d115      	bne.n	800d2bc <__gethex+0x2b4>
 800d290:	42b5      	cmp	r5, r6
 800d292:	d113      	bne.n	800d2bc <__gethex+0x2b4>
 800d294:	2d01      	cmp	r5, #1
 800d296:	d10b      	bne.n	800d2b0 <__gethex+0x2a8>
 800d298:	9a02      	ldr	r2, [sp, #8]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	2301      	movs	r3, #1
 800d2a0:	6123      	str	r3, [r4, #16]
 800d2a2:	f8ca 3000 	str.w	r3, [sl]
 800d2a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2a8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d2ac:	601c      	str	r4, [r3, #0]
 800d2ae:	e735      	b.n	800d11c <__gethex+0x114>
 800d2b0:	1e69      	subs	r1, r5, #1
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f7fe fd0a 	bl	800bccc <__any_on>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d1ed      	bne.n	800d298 <__gethex+0x290>
 800d2bc:	4621      	mov	r1, r4
 800d2be:	4648      	mov	r0, r9
 800d2c0:	f7fe f8b8 	bl	800b434 <_Bfree>
 800d2c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	6013      	str	r3, [r2, #0]
 800d2ca:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d2ce:	e725      	b.n	800d11c <__gethex+0x114>
 800d2d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1f2      	bne.n	800d2bc <__gethex+0x2b4>
 800d2d6:	e7df      	b.n	800d298 <__gethex+0x290>
 800d2d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1dc      	bne.n	800d298 <__gethex+0x290>
 800d2de:	e7ed      	b.n	800d2bc <__gethex+0x2b4>
 800d2e0:	0800e3e4 	.word	0x0800e3e4
 800d2e4:	0800e277 	.word	0x0800e277
 800d2e8:	0800e58e 	.word	0x0800e58e
 800d2ec:	f106 38ff 	add.w	r8, r6, #4294967295
 800d2f0:	f1bb 0f00 	cmp.w	fp, #0
 800d2f4:	d133      	bne.n	800d35e <__gethex+0x356>
 800d2f6:	f1b8 0f00 	cmp.w	r8, #0
 800d2fa:	d004      	beq.n	800d306 <__gethex+0x2fe>
 800d2fc:	4641      	mov	r1, r8
 800d2fe:	4620      	mov	r0, r4
 800d300:	f7fe fce4 	bl	800bccc <__any_on>
 800d304:	4683      	mov	fp, r0
 800d306:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d30a:	2301      	movs	r3, #1
 800d30c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d310:	f008 081f 	and.w	r8, r8, #31
 800d314:	fa03 f308 	lsl.w	r3, r3, r8
 800d318:	4213      	tst	r3, r2
 800d31a:	4631      	mov	r1, r6
 800d31c:	4620      	mov	r0, r4
 800d31e:	bf18      	it	ne
 800d320:	f04b 0b02 	orrne.w	fp, fp, #2
 800d324:	1bad      	subs	r5, r5, r6
 800d326:	f7ff fe07 	bl	800cf38 <rshift>
 800d32a:	687e      	ldr	r6, [r7, #4]
 800d32c:	f04f 0802 	mov.w	r8, #2
 800d330:	f1bb 0f00 	cmp.w	fp, #0
 800d334:	d04a      	beq.n	800d3cc <__gethex+0x3c4>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2b02      	cmp	r3, #2
 800d33a:	d016      	beq.n	800d36a <__gethex+0x362>
 800d33c:	2b03      	cmp	r3, #3
 800d33e:	d018      	beq.n	800d372 <__gethex+0x36a>
 800d340:	2b01      	cmp	r3, #1
 800d342:	d109      	bne.n	800d358 <__gethex+0x350>
 800d344:	f01b 0f02 	tst.w	fp, #2
 800d348:	d006      	beq.n	800d358 <__gethex+0x350>
 800d34a:	f8da 3000 	ldr.w	r3, [sl]
 800d34e:	ea4b 0b03 	orr.w	fp, fp, r3
 800d352:	f01b 0f01 	tst.w	fp, #1
 800d356:	d10f      	bne.n	800d378 <__gethex+0x370>
 800d358:	f048 0810 	orr.w	r8, r8, #16
 800d35c:	e036      	b.n	800d3cc <__gethex+0x3c4>
 800d35e:	f04f 0b01 	mov.w	fp, #1
 800d362:	e7d0      	b.n	800d306 <__gethex+0x2fe>
 800d364:	f04f 0801 	mov.w	r8, #1
 800d368:	e7e2      	b.n	800d330 <__gethex+0x328>
 800d36a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d36c:	f1c3 0301 	rsb	r3, r3, #1
 800d370:	930f      	str	r3, [sp, #60]	; 0x3c
 800d372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d374:	2b00      	cmp	r3, #0
 800d376:	d0ef      	beq.n	800d358 <__gethex+0x350>
 800d378:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d37c:	f104 0214 	add.w	r2, r4, #20
 800d380:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d38a:	2300      	movs	r3, #0
 800d38c:	4694      	mov	ip, r2
 800d38e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d392:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d396:	d01e      	beq.n	800d3d6 <__gethex+0x3ce>
 800d398:	3101      	adds	r1, #1
 800d39a:	f8cc 1000 	str.w	r1, [ip]
 800d39e:	f1b8 0f02 	cmp.w	r8, #2
 800d3a2:	f104 0214 	add.w	r2, r4, #20
 800d3a6:	d13d      	bne.n	800d424 <__gethex+0x41c>
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	42ab      	cmp	r3, r5
 800d3ae:	d10b      	bne.n	800d3c8 <__gethex+0x3c0>
 800d3b0:	1169      	asrs	r1, r5, #5
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	f005 051f 	and.w	r5, r5, #31
 800d3b8:	fa03 f505 	lsl.w	r5, r3, r5
 800d3bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3c0:	421d      	tst	r5, r3
 800d3c2:	bf18      	it	ne
 800d3c4:	f04f 0801 	movne.w	r8, #1
 800d3c8:	f048 0820 	orr.w	r8, r8, #32
 800d3cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3ce:	601c      	str	r4, [r3, #0]
 800d3d0:	9b02      	ldr	r3, [sp, #8]
 800d3d2:	601e      	str	r6, [r3, #0]
 800d3d4:	e6a2      	b.n	800d11c <__gethex+0x114>
 800d3d6:	4290      	cmp	r0, r2
 800d3d8:	f842 3c04 	str.w	r3, [r2, #-4]
 800d3dc:	d8d6      	bhi.n	800d38c <__gethex+0x384>
 800d3de:	68a2      	ldr	r2, [r4, #8]
 800d3e0:	4593      	cmp	fp, r2
 800d3e2:	db17      	blt.n	800d414 <__gethex+0x40c>
 800d3e4:	6861      	ldr	r1, [r4, #4]
 800d3e6:	4648      	mov	r0, r9
 800d3e8:	3101      	adds	r1, #1
 800d3ea:	f7fd ffe3 	bl	800b3b4 <_Balloc>
 800d3ee:	4682      	mov	sl, r0
 800d3f0:	b918      	cbnz	r0, 800d3fa <__gethex+0x3f2>
 800d3f2:	4b1b      	ldr	r3, [pc, #108]	; (800d460 <__gethex+0x458>)
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	2184      	movs	r1, #132	; 0x84
 800d3f8:	e6b3      	b.n	800d162 <__gethex+0x15a>
 800d3fa:	6922      	ldr	r2, [r4, #16]
 800d3fc:	3202      	adds	r2, #2
 800d3fe:	f104 010c 	add.w	r1, r4, #12
 800d402:	0092      	lsls	r2, r2, #2
 800d404:	300c      	adds	r0, #12
 800d406:	f7fd f844 	bl	800a492 <memcpy>
 800d40a:	4621      	mov	r1, r4
 800d40c:	4648      	mov	r0, r9
 800d40e:	f7fe f811 	bl	800b434 <_Bfree>
 800d412:	4654      	mov	r4, sl
 800d414:	6922      	ldr	r2, [r4, #16]
 800d416:	1c51      	adds	r1, r2, #1
 800d418:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d41c:	6121      	str	r1, [r4, #16]
 800d41e:	2101      	movs	r1, #1
 800d420:	6151      	str	r1, [r2, #20]
 800d422:	e7bc      	b.n	800d39e <__gethex+0x396>
 800d424:	6921      	ldr	r1, [r4, #16]
 800d426:	4559      	cmp	r1, fp
 800d428:	dd0b      	ble.n	800d442 <__gethex+0x43a>
 800d42a:	2101      	movs	r1, #1
 800d42c:	4620      	mov	r0, r4
 800d42e:	f7ff fd83 	bl	800cf38 <rshift>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	3601      	adds	r6, #1
 800d436:	42b3      	cmp	r3, r6
 800d438:	f6ff aedb 	blt.w	800d1f2 <__gethex+0x1ea>
 800d43c:	f04f 0801 	mov.w	r8, #1
 800d440:	e7c2      	b.n	800d3c8 <__gethex+0x3c0>
 800d442:	f015 051f 	ands.w	r5, r5, #31
 800d446:	d0f9      	beq.n	800d43c <__gethex+0x434>
 800d448:	9b01      	ldr	r3, [sp, #4]
 800d44a:	441a      	add	r2, r3
 800d44c:	f1c5 0520 	rsb	r5, r5, #32
 800d450:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d454:	f7fe f8a0 	bl	800b598 <__hi0bits>
 800d458:	42a8      	cmp	r0, r5
 800d45a:	dbe6      	blt.n	800d42a <__gethex+0x422>
 800d45c:	e7ee      	b.n	800d43c <__gethex+0x434>
 800d45e:	bf00      	nop
 800d460:	0800e277 	.word	0x0800e277

0800d464 <L_shift>:
 800d464:	f1c2 0208 	rsb	r2, r2, #8
 800d468:	0092      	lsls	r2, r2, #2
 800d46a:	b570      	push	{r4, r5, r6, lr}
 800d46c:	f1c2 0620 	rsb	r6, r2, #32
 800d470:	6843      	ldr	r3, [r0, #4]
 800d472:	6804      	ldr	r4, [r0, #0]
 800d474:	fa03 f506 	lsl.w	r5, r3, r6
 800d478:	432c      	orrs	r4, r5
 800d47a:	40d3      	lsrs	r3, r2
 800d47c:	6004      	str	r4, [r0, #0]
 800d47e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d482:	4288      	cmp	r0, r1
 800d484:	d3f4      	bcc.n	800d470 <L_shift+0xc>
 800d486:	bd70      	pop	{r4, r5, r6, pc}

0800d488 <__match>:
 800d488:	b530      	push	{r4, r5, lr}
 800d48a:	6803      	ldr	r3, [r0, #0]
 800d48c:	3301      	adds	r3, #1
 800d48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d492:	b914      	cbnz	r4, 800d49a <__match+0x12>
 800d494:	6003      	str	r3, [r0, #0]
 800d496:	2001      	movs	r0, #1
 800d498:	bd30      	pop	{r4, r5, pc}
 800d49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d49e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d4a2:	2d19      	cmp	r5, #25
 800d4a4:	bf98      	it	ls
 800d4a6:	3220      	addls	r2, #32
 800d4a8:	42a2      	cmp	r2, r4
 800d4aa:	d0f0      	beq.n	800d48e <__match+0x6>
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e7f3      	b.n	800d498 <__match+0x10>

0800d4b0 <__hexnan>:
 800d4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b4:	680b      	ldr	r3, [r1, #0]
 800d4b6:	6801      	ldr	r1, [r0, #0]
 800d4b8:	115e      	asrs	r6, r3, #5
 800d4ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d4be:	f013 031f 	ands.w	r3, r3, #31
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	bf18      	it	ne
 800d4c6:	3604      	addne	r6, #4
 800d4c8:	2500      	movs	r5, #0
 800d4ca:	1f37      	subs	r7, r6, #4
 800d4cc:	4682      	mov	sl, r0
 800d4ce:	4690      	mov	r8, r2
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d4d6:	46b9      	mov	r9, r7
 800d4d8:	463c      	mov	r4, r7
 800d4da:	9502      	str	r5, [sp, #8]
 800d4dc:	46ab      	mov	fp, r5
 800d4de:	784a      	ldrb	r2, [r1, #1]
 800d4e0:	1c4b      	adds	r3, r1, #1
 800d4e2:	9303      	str	r3, [sp, #12]
 800d4e4:	b342      	cbz	r2, 800d538 <__hexnan+0x88>
 800d4e6:	4610      	mov	r0, r2
 800d4e8:	9105      	str	r1, [sp, #20]
 800d4ea:	9204      	str	r2, [sp, #16]
 800d4ec:	f7ff fd76 	bl	800cfdc <__hexdig_fun>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d14f      	bne.n	800d594 <__hexnan+0xe4>
 800d4f4:	9a04      	ldr	r2, [sp, #16]
 800d4f6:	9905      	ldr	r1, [sp, #20]
 800d4f8:	2a20      	cmp	r2, #32
 800d4fa:	d818      	bhi.n	800d52e <__hexnan+0x7e>
 800d4fc:	9b02      	ldr	r3, [sp, #8]
 800d4fe:	459b      	cmp	fp, r3
 800d500:	dd13      	ble.n	800d52a <__hexnan+0x7a>
 800d502:	454c      	cmp	r4, r9
 800d504:	d206      	bcs.n	800d514 <__hexnan+0x64>
 800d506:	2d07      	cmp	r5, #7
 800d508:	dc04      	bgt.n	800d514 <__hexnan+0x64>
 800d50a:	462a      	mov	r2, r5
 800d50c:	4649      	mov	r1, r9
 800d50e:	4620      	mov	r0, r4
 800d510:	f7ff ffa8 	bl	800d464 <L_shift>
 800d514:	4544      	cmp	r4, r8
 800d516:	d950      	bls.n	800d5ba <__hexnan+0x10a>
 800d518:	2300      	movs	r3, #0
 800d51a:	f1a4 0904 	sub.w	r9, r4, #4
 800d51e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d522:	f8cd b008 	str.w	fp, [sp, #8]
 800d526:	464c      	mov	r4, r9
 800d528:	461d      	mov	r5, r3
 800d52a:	9903      	ldr	r1, [sp, #12]
 800d52c:	e7d7      	b.n	800d4de <__hexnan+0x2e>
 800d52e:	2a29      	cmp	r2, #41	; 0x29
 800d530:	d155      	bne.n	800d5de <__hexnan+0x12e>
 800d532:	3102      	adds	r1, #2
 800d534:	f8ca 1000 	str.w	r1, [sl]
 800d538:	f1bb 0f00 	cmp.w	fp, #0
 800d53c:	d04f      	beq.n	800d5de <__hexnan+0x12e>
 800d53e:	454c      	cmp	r4, r9
 800d540:	d206      	bcs.n	800d550 <__hexnan+0xa0>
 800d542:	2d07      	cmp	r5, #7
 800d544:	dc04      	bgt.n	800d550 <__hexnan+0xa0>
 800d546:	462a      	mov	r2, r5
 800d548:	4649      	mov	r1, r9
 800d54a:	4620      	mov	r0, r4
 800d54c:	f7ff ff8a 	bl	800d464 <L_shift>
 800d550:	4544      	cmp	r4, r8
 800d552:	d934      	bls.n	800d5be <__hexnan+0x10e>
 800d554:	f1a8 0204 	sub.w	r2, r8, #4
 800d558:	4623      	mov	r3, r4
 800d55a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d55e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d562:	429f      	cmp	r7, r3
 800d564:	d2f9      	bcs.n	800d55a <__hexnan+0xaa>
 800d566:	1b3b      	subs	r3, r7, r4
 800d568:	f023 0303 	bic.w	r3, r3, #3
 800d56c:	3304      	adds	r3, #4
 800d56e:	3e03      	subs	r6, #3
 800d570:	3401      	adds	r4, #1
 800d572:	42a6      	cmp	r6, r4
 800d574:	bf38      	it	cc
 800d576:	2304      	movcc	r3, #4
 800d578:	4443      	add	r3, r8
 800d57a:	2200      	movs	r2, #0
 800d57c:	f843 2b04 	str.w	r2, [r3], #4
 800d580:	429f      	cmp	r7, r3
 800d582:	d2fb      	bcs.n	800d57c <__hexnan+0xcc>
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	b91b      	cbnz	r3, 800d590 <__hexnan+0xe0>
 800d588:	4547      	cmp	r7, r8
 800d58a:	d126      	bne.n	800d5da <__hexnan+0x12a>
 800d58c:	2301      	movs	r3, #1
 800d58e:	603b      	str	r3, [r7, #0]
 800d590:	2005      	movs	r0, #5
 800d592:	e025      	b.n	800d5e0 <__hexnan+0x130>
 800d594:	3501      	adds	r5, #1
 800d596:	2d08      	cmp	r5, #8
 800d598:	f10b 0b01 	add.w	fp, fp, #1
 800d59c:	dd06      	ble.n	800d5ac <__hexnan+0xfc>
 800d59e:	4544      	cmp	r4, r8
 800d5a0:	d9c3      	bls.n	800d52a <__hexnan+0x7a>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5a8:	2501      	movs	r5, #1
 800d5aa:	3c04      	subs	r4, #4
 800d5ac:	6822      	ldr	r2, [r4, #0]
 800d5ae:	f000 000f 	and.w	r0, r0, #15
 800d5b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d5b6:	6020      	str	r0, [r4, #0]
 800d5b8:	e7b7      	b.n	800d52a <__hexnan+0x7a>
 800d5ba:	2508      	movs	r5, #8
 800d5bc:	e7b5      	b.n	800d52a <__hexnan+0x7a>
 800d5be:	9b01      	ldr	r3, [sp, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d0df      	beq.n	800d584 <__hexnan+0xd4>
 800d5c4:	f1c3 0320 	rsb	r3, r3, #32
 800d5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5cc:	40da      	lsrs	r2, r3
 800d5ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d5d2:	4013      	ands	r3, r2
 800d5d4:	f846 3c04 	str.w	r3, [r6, #-4]
 800d5d8:	e7d4      	b.n	800d584 <__hexnan+0xd4>
 800d5da:	3f04      	subs	r7, #4
 800d5dc:	e7d2      	b.n	800d584 <__hexnan+0xd4>
 800d5de:	2004      	movs	r0, #4
 800d5e0:	b007      	add	sp, #28
 800d5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5e6 <__ascii_mbtowc>:
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	b901      	cbnz	r1, 800d5ec <__ascii_mbtowc+0x6>
 800d5ea:	a901      	add	r1, sp, #4
 800d5ec:	b142      	cbz	r2, 800d600 <__ascii_mbtowc+0x1a>
 800d5ee:	b14b      	cbz	r3, 800d604 <__ascii_mbtowc+0x1e>
 800d5f0:	7813      	ldrb	r3, [r2, #0]
 800d5f2:	600b      	str	r3, [r1, #0]
 800d5f4:	7812      	ldrb	r2, [r2, #0]
 800d5f6:	1e10      	subs	r0, r2, #0
 800d5f8:	bf18      	it	ne
 800d5fa:	2001      	movne	r0, #1
 800d5fc:	b002      	add	sp, #8
 800d5fe:	4770      	bx	lr
 800d600:	4610      	mov	r0, r2
 800d602:	e7fb      	b.n	800d5fc <__ascii_mbtowc+0x16>
 800d604:	f06f 0001 	mvn.w	r0, #1
 800d608:	e7f8      	b.n	800d5fc <__ascii_mbtowc+0x16>

0800d60a <_realloc_r>:
 800d60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d60e:	4680      	mov	r8, r0
 800d610:	4614      	mov	r4, r2
 800d612:	460e      	mov	r6, r1
 800d614:	b921      	cbnz	r1, 800d620 <_realloc_r+0x16>
 800d616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d61a:	4611      	mov	r1, r2
 800d61c:	f7fd be3e 	b.w	800b29c <_malloc_r>
 800d620:	b92a      	cbnz	r2, 800d62e <_realloc_r+0x24>
 800d622:	f7fd fdc7 	bl	800b1b4 <_free_r>
 800d626:	4625      	mov	r5, r4
 800d628:	4628      	mov	r0, r5
 800d62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d62e:	f000 f842 	bl	800d6b6 <_malloc_usable_size_r>
 800d632:	4284      	cmp	r4, r0
 800d634:	4607      	mov	r7, r0
 800d636:	d802      	bhi.n	800d63e <_realloc_r+0x34>
 800d638:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d63c:	d812      	bhi.n	800d664 <_realloc_r+0x5a>
 800d63e:	4621      	mov	r1, r4
 800d640:	4640      	mov	r0, r8
 800d642:	f7fd fe2b 	bl	800b29c <_malloc_r>
 800d646:	4605      	mov	r5, r0
 800d648:	2800      	cmp	r0, #0
 800d64a:	d0ed      	beq.n	800d628 <_realloc_r+0x1e>
 800d64c:	42bc      	cmp	r4, r7
 800d64e:	4622      	mov	r2, r4
 800d650:	4631      	mov	r1, r6
 800d652:	bf28      	it	cs
 800d654:	463a      	movcs	r2, r7
 800d656:	f7fc ff1c 	bl	800a492 <memcpy>
 800d65a:	4631      	mov	r1, r6
 800d65c:	4640      	mov	r0, r8
 800d65e:	f7fd fda9 	bl	800b1b4 <_free_r>
 800d662:	e7e1      	b.n	800d628 <_realloc_r+0x1e>
 800d664:	4635      	mov	r5, r6
 800d666:	e7df      	b.n	800d628 <_realloc_r+0x1e>

0800d668 <__ascii_wctomb>:
 800d668:	b149      	cbz	r1, 800d67e <__ascii_wctomb+0x16>
 800d66a:	2aff      	cmp	r2, #255	; 0xff
 800d66c:	bf85      	ittet	hi
 800d66e:	238a      	movhi	r3, #138	; 0x8a
 800d670:	6003      	strhi	r3, [r0, #0]
 800d672:	700a      	strbls	r2, [r1, #0]
 800d674:	f04f 30ff 	movhi.w	r0, #4294967295
 800d678:	bf98      	it	ls
 800d67a:	2001      	movls	r0, #1
 800d67c:	4770      	bx	lr
 800d67e:	4608      	mov	r0, r1
 800d680:	4770      	bx	lr
	...

0800d684 <fiprintf>:
 800d684:	b40e      	push	{r1, r2, r3}
 800d686:	b503      	push	{r0, r1, lr}
 800d688:	4601      	mov	r1, r0
 800d68a:	ab03      	add	r3, sp, #12
 800d68c:	4805      	ldr	r0, [pc, #20]	; (800d6a4 <fiprintf+0x20>)
 800d68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d692:	6800      	ldr	r0, [r0, #0]
 800d694:	9301      	str	r3, [sp, #4]
 800d696:	f000 f83f 	bl	800d718 <_vfiprintf_r>
 800d69a:	b002      	add	sp, #8
 800d69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6a0:	b003      	add	sp, #12
 800d6a2:	4770      	bx	lr
 800d6a4:	20000078 	.word	0x20000078

0800d6a8 <abort>:
 800d6a8:	b508      	push	{r3, lr}
 800d6aa:	2006      	movs	r0, #6
 800d6ac:	f000 fa0c 	bl	800dac8 <raise>
 800d6b0:	2001      	movs	r0, #1
 800d6b2:	f7f4 fd55 	bl	8002160 <_exit>

0800d6b6 <_malloc_usable_size_r>:
 800d6b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ba:	1f18      	subs	r0, r3, #4
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	bfbc      	itt	lt
 800d6c0:	580b      	ldrlt	r3, [r1, r0]
 800d6c2:	18c0      	addlt	r0, r0, r3
 800d6c4:	4770      	bx	lr

0800d6c6 <__sfputc_r>:
 800d6c6:	6893      	ldr	r3, [r2, #8]
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	b410      	push	{r4}
 800d6ce:	6093      	str	r3, [r2, #8]
 800d6d0:	da08      	bge.n	800d6e4 <__sfputc_r+0x1e>
 800d6d2:	6994      	ldr	r4, [r2, #24]
 800d6d4:	42a3      	cmp	r3, r4
 800d6d6:	db01      	blt.n	800d6dc <__sfputc_r+0x16>
 800d6d8:	290a      	cmp	r1, #10
 800d6da:	d103      	bne.n	800d6e4 <__sfputc_r+0x1e>
 800d6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6e0:	f000 b934 	b.w	800d94c <__swbuf_r>
 800d6e4:	6813      	ldr	r3, [r2, #0]
 800d6e6:	1c58      	adds	r0, r3, #1
 800d6e8:	6010      	str	r0, [r2, #0]
 800d6ea:	7019      	strb	r1, [r3, #0]
 800d6ec:	4608      	mov	r0, r1
 800d6ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <__sfputs_r>:
 800d6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f6:	4606      	mov	r6, r0
 800d6f8:	460f      	mov	r7, r1
 800d6fa:	4614      	mov	r4, r2
 800d6fc:	18d5      	adds	r5, r2, r3
 800d6fe:	42ac      	cmp	r4, r5
 800d700:	d101      	bne.n	800d706 <__sfputs_r+0x12>
 800d702:	2000      	movs	r0, #0
 800d704:	e007      	b.n	800d716 <__sfputs_r+0x22>
 800d706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d70a:	463a      	mov	r2, r7
 800d70c:	4630      	mov	r0, r6
 800d70e:	f7ff ffda 	bl	800d6c6 <__sfputc_r>
 800d712:	1c43      	adds	r3, r0, #1
 800d714:	d1f3      	bne.n	800d6fe <__sfputs_r+0xa>
 800d716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d718 <_vfiprintf_r>:
 800d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	460d      	mov	r5, r1
 800d71e:	b09d      	sub	sp, #116	; 0x74
 800d720:	4614      	mov	r4, r2
 800d722:	4698      	mov	r8, r3
 800d724:	4606      	mov	r6, r0
 800d726:	b118      	cbz	r0, 800d730 <_vfiprintf_r+0x18>
 800d728:	6a03      	ldr	r3, [r0, #32]
 800d72a:	b90b      	cbnz	r3, 800d730 <_vfiprintf_r+0x18>
 800d72c:	f7fc fd9a 	bl	800a264 <__sinit>
 800d730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d732:	07d9      	lsls	r1, r3, #31
 800d734:	d405      	bmi.n	800d742 <_vfiprintf_r+0x2a>
 800d736:	89ab      	ldrh	r3, [r5, #12]
 800d738:	059a      	lsls	r2, r3, #22
 800d73a:	d402      	bmi.n	800d742 <_vfiprintf_r+0x2a>
 800d73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d73e:	f7fc fea6 	bl	800a48e <__retarget_lock_acquire_recursive>
 800d742:	89ab      	ldrh	r3, [r5, #12]
 800d744:	071b      	lsls	r3, r3, #28
 800d746:	d501      	bpl.n	800d74c <_vfiprintf_r+0x34>
 800d748:	692b      	ldr	r3, [r5, #16]
 800d74a:	b99b      	cbnz	r3, 800d774 <_vfiprintf_r+0x5c>
 800d74c:	4629      	mov	r1, r5
 800d74e:	4630      	mov	r0, r6
 800d750:	f000 f93a 	bl	800d9c8 <__swsetup_r>
 800d754:	b170      	cbz	r0, 800d774 <_vfiprintf_r+0x5c>
 800d756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d758:	07dc      	lsls	r4, r3, #31
 800d75a:	d504      	bpl.n	800d766 <_vfiprintf_r+0x4e>
 800d75c:	f04f 30ff 	mov.w	r0, #4294967295
 800d760:	b01d      	add	sp, #116	; 0x74
 800d762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d766:	89ab      	ldrh	r3, [r5, #12]
 800d768:	0598      	lsls	r0, r3, #22
 800d76a:	d4f7      	bmi.n	800d75c <_vfiprintf_r+0x44>
 800d76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d76e:	f7fc fe8f 	bl	800a490 <__retarget_lock_release_recursive>
 800d772:	e7f3      	b.n	800d75c <_vfiprintf_r+0x44>
 800d774:	2300      	movs	r3, #0
 800d776:	9309      	str	r3, [sp, #36]	; 0x24
 800d778:	2320      	movs	r3, #32
 800d77a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d77e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d782:	2330      	movs	r3, #48	; 0x30
 800d784:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d938 <_vfiprintf_r+0x220>
 800d788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d78c:	f04f 0901 	mov.w	r9, #1
 800d790:	4623      	mov	r3, r4
 800d792:	469a      	mov	sl, r3
 800d794:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d798:	b10a      	cbz	r2, 800d79e <_vfiprintf_r+0x86>
 800d79a:	2a25      	cmp	r2, #37	; 0x25
 800d79c:	d1f9      	bne.n	800d792 <_vfiprintf_r+0x7a>
 800d79e:	ebba 0b04 	subs.w	fp, sl, r4
 800d7a2:	d00b      	beq.n	800d7bc <_vfiprintf_r+0xa4>
 800d7a4:	465b      	mov	r3, fp
 800d7a6:	4622      	mov	r2, r4
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f7ff ffa2 	bl	800d6f4 <__sfputs_r>
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	f000 80a9 	beq.w	800d908 <_vfiprintf_r+0x1f0>
 800d7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7b8:	445a      	add	r2, fp
 800d7ba:	9209      	str	r2, [sp, #36]	; 0x24
 800d7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f000 80a1 	beq.w	800d908 <_vfiprintf_r+0x1f0>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7d0:	f10a 0a01 	add.w	sl, sl, #1
 800d7d4:	9304      	str	r3, [sp, #16]
 800d7d6:	9307      	str	r3, [sp, #28]
 800d7d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7dc:	931a      	str	r3, [sp, #104]	; 0x68
 800d7de:	4654      	mov	r4, sl
 800d7e0:	2205      	movs	r2, #5
 800d7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e6:	4854      	ldr	r0, [pc, #336]	; (800d938 <_vfiprintf_r+0x220>)
 800d7e8:	f7f2 fd42 	bl	8000270 <memchr>
 800d7ec:	9a04      	ldr	r2, [sp, #16]
 800d7ee:	b9d8      	cbnz	r0, 800d828 <_vfiprintf_r+0x110>
 800d7f0:	06d1      	lsls	r1, r2, #27
 800d7f2:	bf44      	itt	mi
 800d7f4:	2320      	movmi	r3, #32
 800d7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7fa:	0713      	lsls	r3, r2, #28
 800d7fc:	bf44      	itt	mi
 800d7fe:	232b      	movmi	r3, #43	; 0x2b
 800d800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d804:	f89a 3000 	ldrb.w	r3, [sl]
 800d808:	2b2a      	cmp	r3, #42	; 0x2a
 800d80a:	d015      	beq.n	800d838 <_vfiprintf_r+0x120>
 800d80c:	9a07      	ldr	r2, [sp, #28]
 800d80e:	4654      	mov	r4, sl
 800d810:	2000      	movs	r0, #0
 800d812:	f04f 0c0a 	mov.w	ip, #10
 800d816:	4621      	mov	r1, r4
 800d818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d81c:	3b30      	subs	r3, #48	; 0x30
 800d81e:	2b09      	cmp	r3, #9
 800d820:	d94d      	bls.n	800d8be <_vfiprintf_r+0x1a6>
 800d822:	b1b0      	cbz	r0, 800d852 <_vfiprintf_r+0x13a>
 800d824:	9207      	str	r2, [sp, #28]
 800d826:	e014      	b.n	800d852 <_vfiprintf_r+0x13a>
 800d828:	eba0 0308 	sub.w	r3, r0, r8
 800d82c:	fa09 f303 	lsl.w	r3, r9, r3
 800d830:	4313      	orrs	r3, r2
 800d832:	9304      	str	r3, [sp, #16]
 800d834:	46a2      	mov	sl, r4
 800d836:	e7d2      	b.n	800d7de <_vfiprintf_r+0xc6>
 800d838:	9b03      	ldr	r3, [sp, #12]
 800d83a:	1d19      	adds	r1, r3, #4
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	9103      	str	r1, [sp, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	bfbb      	ittet	lt
 800d844:	425b      	neglt	r3, r3
 800d846:	f042 0202 	orrlt.w	r2, r2, #2
 800d84a:	9307      	strge	r3, [sp, #28]
 800d84c:	9307      	strlt	r3, [sp, #28]
 800d84e:	bfb8      	it	lt
 800d850:	9204      	strlt	r2, [sp, #16]
 800d852:	7823      	ldrb	r3, [r4, #0]
 800d854:	2b2e      	cmp	r3, #46	; 0x2e
 800d856:	d10c      	bne.n	800d872 <_vfiprintf_r+0x15a>
 800d858:	7863      	ldrb	r3, [r4, #1]
 800d85a:	2b2a      	cmp	r3, #42	; 0x2a
 800d85c:	d134      	bne.n	800d8c8 <_vfiprintf_r+0x1b0>
 800d85e:	9b03      	ldr	r3, [sp, #12]
 800d860:	1d1a      	adds	r2, r3, #4
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	9203      	str	r2, [sp, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	bfb8      	it	lt
 800d86a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d86e:	3402      	adds	r4, #2
 800d870:	9305      	str	r3, [sp, #20]
 800d872:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d948 <_vfiprintf_r+0x230>
 800d876:	7821      	ldrb	r1, [r4, #0]
 800d878:	2203      	movs	r2, #3
 800d87a:	4650      	mov	r0, sl
 800d87c:	f7f2 fcf8 	bl	8000270 <memchr>
 800d880:	b138      	cbz	r0, 800d892 <_vfiprintf_r+0x17a>
 800d882:	9b04      	ldr	r3, [sp, #16]
 800d884:	eba0 000a 	sub.w	r0, r0, sl
 800d888:	2240      	movs	r2, #64	; 0x40
 800d88a:	4082      	lsls	r2, r0
 800d88c:	4313      	orrs	r3, r2
 800d88e:	3401      	adds	r4, #1
 800d890:	9304      	str	r3, [sp, #16]
 800d892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d896:	4829      	ldr	r0, [pc, #164]	; (800d93c <_vfiprintf_r+0x224>)
 800d898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d89c:	2206      	movs	r2, #6
 800d89e:	f7f2 fce7 	bl	8000270 <memchr>
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	d03f      	beq.n	800d926 <_vfiprintf_r+0x20e>
 800d8a6:	4b26      	ldr	r3, [pc, #152]	; (800d940 <_vfiprintf_r+0x228>)
 800d8a8:	bb1b      	cbnz	r3, 800d8f2 <_vfiprintf_r+0x1da>
 800d8aa:	9b03      	ldr	r3, [sp, #12]
 800d8ac:	3307      	adds	r3, #7
 800d8ae:	f023 0307 	bic.w	r3, r3, #7
 800d8b2:	3308      	adds	r3, #8
 800d8b4:	9303      	str	r3, [sp, #12]
 800d8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b8:	443b      	add	r3, r7
 800d8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d8bc:	e768      	b.n	800d790 <_vfiprintf_r+0x78>
 800d8be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8c2:	460c      	mov	r4, r1
 800d8c4:	2001      	movs	r0, #1
 800d8c6:	e7a6      	b.n	800d816 <_vfiprintf_r+0xfe>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	3401      	adds	r4, #1
 800d8cc:	9305      	str	r3, [sp, #20]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	f04f 0c0a 	mov.w	ip, #10
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8da:	3a30      	subs	r2, #48	; 0x30
 800d8dc:	2a09      	cmp	r2, #9
 800d8de:	d903      	bls.n	800d8e8 <_vfiprintf_r+0x1d0>
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d0c6      	beq.n	800d872 <_vfiprintf_r+0x15a>
 800d8e4:	9105      	str	r1, [sp, #20]
 800d8e6:	e7c4      	b.n	800d872 <_vfiprintf_r+0x15a>
 800d8e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e7f0      	b.n	800d8d4 <_vfiprintf_r+0x1bc>
 800d8f2:	ab03      	add	r3, sp, #12
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	462a      	mov	r2, r5
 800d8f8:	4b12      	ldr	r3, [pc, #72]	; (800d944 <_vfiprintf_r+0x22c>)
 800d8fa:	a904      	add	r1, sp, #16
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	f7fb fe4f 	bl	80095a0 <_printf_float>
 800d902:	4607      	mov	r7, r0
 800d904:	1c78      	adds	r0, r7, #1
 800d906:	d1d6      	bne.n	800d8b6 <_vfiprintf_r+0x19e>
 800d908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d90a:	07d9      	lsls	r1, r3, #31
 800d90c:	d405      	bmi.n	800d91a <_vfiprintf_r+0x202>
 800d90e:	89ab      	ldrh	r3, [r5, #12]
 800d910:	059a      	lsls	r2, r3, #22
 800d912:	d402      	bmi.n	800d91a <_vfiprintf_r+0x202>
 800d914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d916:	f7fc fdbb 	bl	800a490 <__retarget_lock_release_recursive>
 800d91a:	89ab      	ldrh	r3, [r5, #12]
 800d91c:	065b      	lsls	r3, r3, #25
 800d91e:	f53f af1d 	bmi.w	800d75c <_vfiprintf_r+0x44>
 800d922:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d924:	e71c      	b.n	800d760 <_vfiprintf_r+0x48>
 800d926:	ab03      	add	r3, sp, #12
 800d928:	9300      	str	r3, [sp, #0]
 800d92a:	462a      	mov	r2, r5
 800d92c:	4b05      	ldr	r3, [pc, #20]	; (800d944 <_vfiprintf_r+0x22c>)
 800d92e:	a904      	add	r1, sp, #16
 800d930:	4630      	mov	r0, r6
 800d932:	f7fc f8d9 	bl	8009ae8 <_printf_i>
 800d936:	e7e4      	b.n	800d902 <_vfiprintf_r+0x1ea>
 800d938:	0800e539 	.word	0x0800e539
 800d93c:	0800e543 	.word	0x0800e543
 800d940:	080095a1 	.word	0x080095a1
 800d944:	0800d6f5 	.word	0x0800d6f5
 800d948:	0800e53f 	.word	0x0800e53f

0800d94c <__swbuf_r>:
 800d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94e:	460e      	mov	r6, r1
 800d950:	4614      	mov	r4, r2
 800d952:	4605      	mov	r5, r0
 800d954:	b118      	cbz	r0, 800d95e <__swbuf_r+0x12>
 800d956:	6a03      	ldr	r3, [r0, #32]
 800d958:	b90b      	cbnz	r3, 800d95e <__swbuf_r+0x12>
 800d95a:	f7fc fc83 	bl	800a264 <__sinit>
 800d95e:	69a3      	ldr	r3, [r4, #24]
 800d960:	60a3      	str	r3, [r4, #8]
 800d962:	89a3      	ldrh	r3, [r4, #12]
 800d964:	071a      	lsls	r2, r3, #28
 800d966:	d525      	bpl.n	800d9b4 <__swbuf_r+0x68>
 800d968:	6923      	ldr	r3, [r4, #16]
 800d96a:	b31b      	cbz	r3, 800d9b4 <__swbuf_r+0x68>
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	6922      	ldr	r2, [r4, #16]
 800d970:	1a98      	subs	r0, r3, r2
 800d972:	6963      	ldr	r3, [r4, #20]
 800d974:	b2f6      	uxtb	r6, r6
 800d976:	4283      	cmp	r3, r0
 800d978:	4637      	mov	r7, r6
 800d97a:	dc04      	bgt.n	800d986 <__swbuf_r+0x3a>
 800d97c:	4621      	mov	r1, r4
 800d97e:	4628      	mov	r0, r5
 800d980:	f7ff fa3a 	bl	800cdf8 <_fflush_r>
 800d984:	b9e0      	cbnz	r0, 800d9c0 <__swbuf_r+0x74>
 800d986:	68a3      	ldr	r3, [r4, #8]
 800d988:	3b01      	subs	r3, #1
 800d98a:	60a3      	str	r3, [r4, #8]
 800d98c:	6823      	ldr	r3, [r4, #0]
 800d98e:	1c5a      	adds	r2, r3, #1
 800d990:	6022      	str	r2, [r4, #0]
 800d992:	701e      	strb	r6, [r3, #0]
 800d994:	6962      	ldr	r2, [r4, #20]
 800d996:	1c43      	adds	r3, r0, #1
 800d998:	429a      	cmp	r2, r3
 800d99a:	d004      	beq.n	800d9a6 <__swbuf_r+0x5a>
 800d99c:	89a3      	ldrh	r3, [r4, #12]
 800d99e:	07db      	lsls	r3, r3, #31
 800d9a0:	d506      	bpl.n	800d9b0 <__swbuf_r+0x64>
 800d9a2:	2e0a      	cmp	r6, #10
 800d9a4:	d104      	bne.n	800d9b0 <__swbuf_r+0x64>
 800d9a6:	4621      	mov	r1, r4
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	f7ff fa25 	bl	800cdf8 <_fflush_r>
 800d9ae:	b938      	cbnz	r0, 800d9c0 <__swbuf_r+0x74>
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9b4:	4621      	mov	r1, r4
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f000 f806 	bl	800d9c8 <__swsetup_r>
 800d9bc:	2800      	cmp	r0, #0
 800d9be:	d0d5      	beq.n	800d96c <__swbuf_r+0x20>
 800d9c0:	f04f 37ff 	mov.w	r7, #4294967295
 800d9c4:	e7f4      	b.n	800d9b0 <__swbuf_r+0x64>
	...

0800d9c8 <__swsetup_r>:
 800d9c8:	b538      	push	{r3, r4, r5, lr}
 800d9ca:	4b2a      	ldr	r3, [pc, #168]	; (800da74 <__swsetup_r+0xac>)
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	6818      	ldr	r0, [r3, #0]
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	b118      	cbz	r0, 800d9dc <__swsetup_r+0x14>
 800d9d4:	6a03      	ldr	r3, [r0, #32]
 800d9d6:	b90b      	cbnz	r3, 800d9dc <__swsetup_r+0x14>
 800d9d8:	f7fc fc44 	bl	800a264 <__sinit>
 800d9dc:	89a3      	ldrh	r3, [r4, #12]
 800d9de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9e2:	0718      	lsls	r0, r3, #28
 800d9e4:	d422      	bmi.n	800da2c <__swsetup_r+0x64>
 800d9e6:	06d9      	lsls	r1, r3, #27
 800d9e8:	d407      	bmi.n	800d9fa <__swsetup_r+0x32>
 800d9ea:	2309      	movs	r3, #9
 800d9ec:	602b      	str	r3, [r5, #0]
 800d9ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9f2:	81a3      	strh	r3, [r4, #12]
 800d9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f8:	e034      	b.n	800da64 <__swsetup_r+0x9c>
 800d9fa:	0758      	lsls	r0, r3, #29
 800d9fc:	d512      	bpl.n	800da24 <__swsetup_r+0x5c>
 800d9fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da00:	b141      	cbz	r1, 800da14 <__swsetup_r+0x4c>
 800da02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da06:	4299      	cmp	r1, r3
 800da08:	d002      	beq.n	800da10 <__swsetup_r+0x48>
 800da0a:	4628      	mov	r0, r5
 800da0c:	f7fd fbd2 	bl	800b1b4 <_free_r>
 800da10:	2300      	movs	r3, #0
 800da12:	6363      	str	r3, [r4, #52]	; 0x34
 800da14:	89a3      	ldrh	r3, [r4, #12]
 800da16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da1a:	81a3      	strh	r3, [r4, #12]
 800da1c:	2300      	movs	r3, #0
 800da1e:	6063      	str	r3, [r4, #4]
 800da20:	6923      	ldr	r3, [r4, #16]
 800da22:	6023      	str	r3, [r4, #0]
 800da24:	89a3      	ldrh	r3, [r4, #12]
 800da26:	f043 0308 	orr.w	r3, r3, #8
 800da2a:	81a3      	strh	r3, [r4, #12]
 800da2c:	6923      	ldr	r3, [r4, #16]
 800da2e:	b94b      	cbnz	r3, 800da44 <__swsetup_r+0x7c>
 800da30:	89a3      	ldrh	r3, [r4, #12]
 800da32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da3a:	d003      	beq.n	800da44 <__swsetup_r+0x7c>
 800da3c:	4621      	mov	r1, r4
 800da3e:	4628      	mov	r0, r5
 800da40:	f000 f884 	bl	800db4c <__smakebuf_r>
 800da44:	89a0      	ldrh	r0, [r4, #12]
 800da46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da4a:	f010 0301 	ands.w	r3, r0, #1
 800da4e:	d00a      	beq.n	800da66 <__swsetup_r+0x9e>
 800da50:	2300      	movs	r3, #0
 800da52:	60a3      	str	r3, [r4, #8]
 800da54:	6963      	ldr	r3, [r4, #20]
 800da56:	425b      	negs	r3, r3
 800da58:	61a3      	str	r3, [r4, #24]
 800da5a:	6923      	ldr	r3, [r4, #16]
 800da5c:	b943      	cbnz	r3, 800da70 <__swsetup_r+0xa8>
 800da5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da62:	d1c4      	bne.n	800d9ee <__swsetup_r+0x26>
 800da64:	bd38      	pop	{r3, r4, r5, pc}
 800da66:	0781      	lsls	r1, r0, #30
 800da68:	bf58      	it	pl
 800da6a:	6963      	ldrpl	r3, [r4, #20]
 800da6c:	60a3      	str	r3, [r4, #8]
 800da6e:	e7f4      	b.n	800da5a <__swsetup_r+0x92>
 800da70:	2000      	movs	r0, #0
 800da72:	e7f7      	b.n	800da64 <__swsetup_r+0x9c>
 800da74:	20000078 	.word	0x20000078

0800da78 <_raise_r>:
 800da78:	291f      	cmp	r1, #31
 800da7a:	b538      	push	{r3, r4, r5, lr}
 800da7c:	4604      	mov	r4, r0
 800da7e:	460d      	mov	r5, r1
 800da80:	d904      	bls.n	800da8c <_raise_r+0x14>
 800da82:	2316      	movs	r3, #22
 800da84:	6003      	str	r3, [r0, #0]
 800da86:	f04f 30ff 	mov.w	r0, #4294967295
 800da8a:	bd38      	pop	{r3, r4, r5, pc}
 800da8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800da8e:	b112      	cbz	r2, 800da96 <_raise_r+0x1e>
 800da90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da94:	b94b      	cbnz	r3, 800daaa <_raise_r+0x32>
 800da96:	4620      	mov	r0, r4
 800da98:	f000 f830 	bl	800dafc <_getpid_r>
 800da9c:	462a      	mov	r2, r5
 800da9e:	4601      	mov	r1, r0
 800daa0:	4620      	mov	r0, r4
 800daa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daa6:	f000 b817 	b.w	800dad8 <_kill_r>
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d00a      	beq.n	800dac4 <_raise_r+0x4c>
 800daae:	1c59      	adds	r1, r3, #1
 800dab0:	d103      	bne.n	800daba <_raise_r+0x42>
 800dab2:	2316      	movs	r3, #22
 800dab4:	6003      	str	r3, [r0, #0]
 800dab6:	2001      	movs	r0, #1
 800dab8:	e7e7      	b.n	800da8a <_raise_r+0x12>
 800daba:	2400      	movs	r4, #0
 800dabc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dac0:	4628      	mov	r0, r5
 800dac2:	4798      	blx	r3
 800dac4:	2000      	movs	r0, #0
 800dac6:	e7e0      	b.n	800da8a <_raise_r+0x12>

0800dac8 <raise>:
 800dac8:	4b02      	ldr	r3, [pc, #8]	; (800dad4 <raise+0xc>)
 800daca:	4601      	mov	r1, r0
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f7ff bfd3 	b.w	800da78 <_raise_r>
 800dad2:	bf00      	nop
 800dad4:	20000078 	.word	0x20000078

0800dad8 <_kill_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4d07      	ldr	r5, [pc, #28]	; (800daf8 <_kill_r+0x20>)
 800dadc:	2300      	movs	r3, #0
 800dade:	4604      	mov	r4, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	4611      	mov	r1, r2
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	f7f4 fb2b 	bl	8002140 <_kill>
 800daea:	1c43      	adds	r3, r0, #1
 800daec:	d102      	bne.n	800daf4 <_kill_r+0x1c>
 800daee:	682b      	ldr	r3, [r5, #0]
 800daf0:	b103      	cbz	r3, 800daf4 <_kill_r+0x1c>
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	bd38      	pop	{r3, r4, r5, pc}
 800daf6:	bf00      	nop
 800daf8:	2001499c 	.word	0x2001499c

0800dafc <_getpid_r>:
 800dafc:	f7f4 bb18 	b.w	8002130 <_getpid>

0800db00 <__swhatbuf_r>:
 800db00:	b570      	push	{r4, r5, r6, lr}
 800db02:	460c      	mov	r4, r1
 800db04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db08:	2900      	cmp	r1, #0
 800db0a:	b096      	sub	sp, #88	; 0x58
 800db0c:	4615      	mov	r5, r2
 800db0e:	461e      	mov	r6, r3
 800db10:	da0d      	bge.n	800db2e <__swhatbuf_r+0x2e>
 800db12:	89a3      	ldrh	r3, [r4, #12]
 800db14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800db18:	f04f 0100 	mov.w	r1, #0
 800db1c:	bf0c      	ite	eq
 800db1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800db22:	2340      	movne	r3, #64	; 0x40
 800db24:	2000      	movs	r0, #0
 800db26:	6031      	str	r1, [r6, #0]
 800db28:	602b      	str	r3, [r5, #0]
 800db2a:	b016      	add	sp, #88	; 0x58
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
 800db2e:	466a      	mov	r2, sp
 800db30:	f000 f848 	bl	800dbc4 <_fstat_r>
 800db34:	2800      	cmp	r0, #0
 800db36:	dbec      	blt.n	800db12 <__swhatbuf_r+0x12>
 800db38:	9901      	ldr	r1, [sp, #4]
 800db3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800db3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800db42:	4259      	negs	r1, r3
 800db44:	4159      	adcs	r1, r3
 800db46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db4a:	e7eb      	b.n	800db24 <__swhatbuf_r+0x24>

0800db4c <__smakebuf_r>:
 800db4c:	898b      	ldrh	r3, [r1, #12]
 800db4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db50:	079d      	lsls	r5, r3, #30
 800db52:	4606      	mov	r6, r0
 800db54:	460c      	mov	r4, r1
 800db56:	d507      	bpl.n	800db68 <__smakebuf_r+0x1c>
 800db58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	6123      	str	r3, [r4, #16]
 800db60:	2301      	movs	r3, #1
 800db62:	6163      	str	r3, [r4, #20]
 800db64:	b002      	add	sp, #8
 800db66:	bd70      	pop	{r4, r5, r6, pc}
 800db68:	ab01      	add	r3, sp, #4
 800db6a:	466a      	mov	r2, sp
 800db6c:	f7ff ffc8 	bl	800db00 <__swhatbuf_r>
 800db70:	9900      	ldr	r1, [sp, #0]
 800db72:	4605      	mov	r5, r0
 800db74:	4630      	mov	r0, r6
 800db76:	f7fd fb91 	bl	800b29c <_malloc_r>
 800db7a:	b948      	cbnz	r0, 800db90 <__smakebuf_r+0x44>
 800db7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db80:	059a      	lsls	r2, r3, #22
 800db82:	d4ef      	bmi.n	800db64 <__smakebuf_r+0x18>
 800db84:	f023 0303 	bic.w	r3, r3, #3
 800db88:	f043 0302 	orr.w	r3, r3, #2
 800db8c:	81a3      	strh	r3, [r4, #12]
 800db8e:	e7e3      	b.n	800db58 <__smakebuf_r+0xc>
 800db90:	89a3      	ldrh	r3, [r4, #12]
 800db92:	6020      	str	r0, [r4, #0]
 800db94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db98:	81a3      	strh	r3, [r4, #12]
 800db9a:	9b00      	ldr	r3, [sp, #0]
 800db9c:	6163      	str	r3, [r4, #20]
 800db9e:	9b01      	ldr	r3, [sp, #4]
 800dba0:	6120      	str	r0, [r4, #16]
 800dba2:	b15b      	cbz	r3, 800dbbc <__smakebuf_r+0x70>
 800dba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dba8:	4630      	mov	r0, r6
 800dbaa:	f000 f81d 	bl	800dbe8 <_isatty_r>
 800dbae:	b128      	cbz	r0, 800dbbc <__smakebuf_r+0x70>
 800dbb0:	89a3      	ldrh	r3, [r4, #12]
 800dbb2:	f023 0303 	bic.w	r3, r3, #3
 800dbb6:	f043 0301 	orr.w	r3, r3, #1
 800dbba:	81a3      	strh	r3, [r4, #12]
 800dbbc:	89a3      	ldrh	r3, [r4, #12]
 800dbbe:	431d      	orrs	r5, r3
 800dbc0:	81a5      	strh	r5, [r4, #12]
 800dbc2:	e7cf      	b.n	800db64 <__smakebuf_r+0x18>

0800dbc4 <_fstat_r>:
 800dbc4:	b538      	push	{r3, r4, r5, lr}
 800dbc6:	4d07      	ldr	r5, [pc, #28]	; (800dbe4 <_fstat_r+0x20>)
 800dbc8:	2300      	movs	r3, #0
 800dbca:	4604      	mov	r4, r0
 800dbcc:	4608      	mov	r0, r1
 800dbce:	4611      	mov	r1, r2
 800dbd0:	602b      	str	r3, [r5, #0]
 800dbd2:	f7f4 faf8 	bl	80021c6 <_fstat>
 800dbd6:	1c43      	adds	r3, r0, #1
 800dbd8:	d102      	bne.n	800dbe0 <_fstat_r+0x1c>
 800dbda:	682b      	ldr	r3, [r5, #0]
 800dbdc:	b103      	cbz	r3, 800dbe0 <_fstat_r+0x1c>
 800dbde:	6023      	str	r3, [r4, #0]
 800dbe0:	bd38      	pop	{r3, r4, r5, pc}
 800dbe2:	bf00      	nop
 800dbe4:	2001499c 	.word	0x2001499c

0800dbe8 <_isatty_r>:
 800dbe8:	b538      	push	{r3, r4, r5, lr}
 800dbea:	4d06      	ldr	r5, [pc, #24]	; (800dc04 <_isatty_r+0x1c>)
 800dbec:	2300      	movs	r3, #0
 800dbee:	4604      	mov	r4, r0
 800dbf0:	4608      	mov	r0, r1
 800dbf2:	602b      	str	r3, [r5, #0]
 800dbf4:	f7f4 faf7 	bl	80021e6 <_isatty>
 800dbf8:	1c43      	adds	r3, r0, #1
 800dbfa:	d102      	bne.n	800dc02 <_isatty_r+0x1a>
 800dbfc:	682b      	ldr	r3, [r5, #0]
 800dbfe:	b103      	cbz	r3, 800dc02 <_isatty_r+0x1a>
 800dc00:	6023      	str	r3, [r4, #0]
 800dc02:	bd38      	pop	{r3, r4, r5, pc}
 800dc04:	2001499c 	.word	0x2001499c

0800dc08 <log>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	ed2d 8b02 	vpush	{d8}
 800dc0e:	ec55 4b10 	vmov	r4, r5, d0
 800dc12:	f000 f839 	bl	800dc88 <__ieee754_log>
 800dc16:	4622      	mov	r2, r4
 800dc18:	462b      	mov	r3, r5
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	eeb0 8a40 	vmov.f32	s16, s0
 800dc22:	eef0 8a60 	vmov.f32	s17, s1
 800dc26:	f7f2 ffd1 	bl	8000bcc <__aeabi_dcmpun>
 800dc2a:	b998      	cbnz	r0, 800dc54 <log+0x4c>
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	2300      	movs	r3, #0
 800dc30:	4620      	mov	r0, r4
 800dc32:	4629      	mov	r1, r5
 800dc34:	f7f2 ffc0 	bl	8000bb8 <__aeabi_dcmpgt>
 800dc38:	b960      	cbnz	r0, 800dc54 <log+0x4c>
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4620      	mov	r0, r4
 800dc40:	4629      	mov	r1, r5
 800dc42:	f7f2 ff91 	bl	8000b68 <__aeabi_dcmpeq>
 800dc46:	b160      	cbz	r0, 800dc62 <log+0x5a>
 800dc48:	f7fc fbf6 	bl	800a438 <__errno>
 800dc4c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800dc78 <log+0x70>
 800dc50:	2322      	movs	r3, #34	; 0x22
 800dc52:	6003      	str	r3, [r0, #0]
 800dc54:	eeb0 0a48 	vmov.f32	s0, s16
 800dc58:	eef0 0a68 	vmov.f32	s1, s17
 800dc5c:	ecbd 8b02 	vpop	{d8}
 800dc60:	bd38      	pop	{r3, r4, r5, pc}
 800dc62:	f7fc fbe9 	bl	800a438 <__errno>
 800dc66:	ecbd 8b02 	vpop	{d8}
 800dc6a:	2321      	movs	r3, #33	; 0x21
 800dc6c:	6003      	str	r3, [r0, #0]
 800dc6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc72:	4803      	ldr	r0, [pc, #12]	; (800dc80 <log+0x78>)
 800dc74:	f7ff b924 	b.w	800cec0 <nan>
 800dc78:	00000000 	.word	0x00000000
 800dc7c:	fff00000 	.word	0xfff00000
 800dc80:	0800e58d 	.word	0x0800e58d
 800dc84:	00000000 	.word	0x00000000

0800dc88 <__ieee754_log>:
 800dc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc8c:	ec51 0b10 	vmov	r0, r1, d0
 800dc90:	ed2d 8b04 	vpush	{d8-d9}
 800dc94:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800dc98:	b083      	sub	sp, #12
 800dc9a:	460d      	mov	r5, r1
 800dc9c:	da29      	bge.n	800dcf2 <__ieee754_log+0x6a>
 800dc9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dca2:	4303      	orrs	r3, r0
 800dca4:	ee10 2a10 	vmov	r2, s0
 800dca8:	d10c      	bne.n	800dcc4 <__ieee754_log+0x3c>
 800dcaa:	49cf      	ldr	r1, [pc, #828]	; (800dfe8 <__ieee754_log+0x360>)
 800dcac:	2200      	movs	r2, #0
 800dcae:	2300      	movs	r3, #0
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	f7f2 fe1b 	bl	80008ec <__aeabi_ddiv>
 800dcb6:	ec41 0b10 	vmov	d0, r0, r1
 800dcba:	b003      	add	sp, #12
 800dcbc:	ecbd 8b04 	vpop	{d8-d9}
 800dcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	2900      	cmp	r1, #0
 800dcc6:	da05      	bge.n	800dcd4 <__ieee754_log+0x4c>
 800dcc8:	460b      	mov	r3, r1
 800dcca:	f7f2 fb2d 	bl	8000328 <__aeabi_dsub>
 800dcce:	2200      	movs	r2, #0
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e7ee      	b.n	800dcb2 <__ieee754_log+0x2a>
 800dcd4:	4bc5      	ldr	r3, [pc, #788]	; (800dfec <__ieee754_log+0x364>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f7f2 fcde 	bl	8000698 <__aeabi_dmul>
 800dcdc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800dce0:	460d      	mov	r5, r1
 800dce2:	4ac3      	ldr	r2, [pc, #780]	; (800dff0 <__ieee754_log+0x368>)
 800dce4:	4295      	cmp	r5, r2
 800dce6:	dd06      	ble.n	800dcf6 <__ieee754_log+0x6e>
 800dce8:	4602      	mov	r2, r0
 800dcea:	460b      	mov	r3, r1
 800dcec:	f7f2 fb1e 	bl	800032c <__adddf3>
 800dcf0:	e7e1      	b.n	800dcb6 <__ieee754_log+0x2e>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	e7f5      	b.n	800dce2 <__ieee754_log+0x5a>
 800dcf6:	152c      	asrs	r4, r5, #20
 800dcf8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800dcfc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dd00:	441c      	add	r4, r3
 800dd02:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800dd06:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800dd0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd0e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800dd12:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800dd16:	ea42 0105 	orr.w	r1, r2, r5
 800dd1a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800dd1e:	2200      	movs	r2, #0
 800dd20:	4bb4      	ldr	r3, [pc, #720]	; (800dff4 <__ieee754_log+0x36c>)
 800dd22:	f7f2 fb01 	bl	8000328 <__aeabi_dsub>
 800dd26:	1cab      	adds	r3, r5, #2
 800dd28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	4682      	mov	sl, r0
 800dd30:	468b      	mov	fp, r1
 800dd32:	f04f 0200 	mov.w	r2, #0
 800dd36:	dc53      	bgt.n	800dde0 <__ieee754_log+0x158>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	f7f2 ff15 	bl	8000b68 <__aeabi_dcmpeq>
 800dd3e:	b1d0      	cbz	r0, 800dd76 <__ieee754_log+0xee>
 800dd40:	2c00      	cmp	r4, #0
 800dd42:	f000 8122 	beq.w	800df8a <__ieee754_log+0x302>
 800dd46:	4620      	mov	r0, r4
 800dd48:	f7f2 fc3c 	bl	80005c4 <__aeabi_i2d>
 800dd4c:	a390      	add	r3, pc, #576	; (adr r3, 800df90 <__ieee754_log+0x308>)
 800dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd52:	4606      	mov	r6, r0
 800dd54:	460f      	mov	r7, r1
 800dd56:	f7f2 fc9f 	bl	8000698 <__aeabi_dmul>
 800dd5a:	a38f      	add	r3, pc, #572	; (adr r3, 800df98 <__ieee754_log+0x310>)
 800dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd60:	4604      	mov	r4, r0
 800dd62:	460d      	mov	r5, r1
 800dd64:	4630      	mov	r0, r6
 800dd66:	4639      	mov	r1, r7
 800dd68:	f7f2 fc96 	bl	8000698 <__aeabi_dmul>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4620      	mov	r0, r4
 800dd72:	4629      	mov	r1, r5
 800dd74:	e7ba      	b.n	800dcec <__ieee754_log+0x64>
 800dd76:	a38a      	add	r3, pc, #552	; (adr r3, 800dfa0 <__ieee754_log+0x318>)
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	4650      	mov	r0, sl
 800dd7e:	4659      	mov	r1, fp
 800dd80:	f7f2 fc8a 	bl	8000698 <__aeabi_dmul>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	2000      	movs	r0, #0
 800dd8a:	499b      	ldr	r1, [pc, #620]	; (800dff8 <__ieee754_log+0x370>)
 800dd8c:	f7f2 facc 	bl	8000328 <__aeabi_dsub>
 800dd90:	4652      	mov	r2, sl
 800dd92:	4606      	mov	r6, r0
 800dd94:	460f      	mov	r7, r1
 800dd96:	465b      	mov	r3, fp
 800dd98:	4650      	mov	r0, sl
 800dd9a:	4659      	mov	r1, fp
 800dd9c:	f7f2 fc7c 	bl	8000698 <__aeabi_dmul>
 800dda0:	4602      	mov	r2, r0
 800dda2:	460b      	mov	r3, r1
 800dda4:	4630      	mov	r0, r6
 800dda6:	4639      	mov	r1, r7
 800dda8:	f7f2 fc76 	bl	8000698 <__aeabi_dmul>
 800ddac:	4606      	mov	r6, r0
 800ddae:	460f      	mov	r7, r1
 800ddb0:	b914      	cbnz	r4, 800ddb8 <__ieee754_log+0x130>
 800ddb2:	4632      	mov	r2, r6
 800ddb4:	463b      	mov	r3, r7
 800ddb6:	e0a2      	b.n	800defe <__ieee754_log+0x276>
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f7f2 fc03 	bl	80005c4 <__aeabi_i2d>
 800ddbe:	a374      	add	r3, pc, #464	; (adr r3, 800df90 <__ieee754_log+0x308>)
 800ddc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc4:	4680      	mov	r8, r0
 800ddc6:	4689      	mov	r9, r1
 800ddc8:	f7f2 fc66 	bl	8000698 <__aeabi_dmul>
 800ddcc:	a372      	add	r3, pc, #456	; (adr r3, 800df98 <__ieee754_log+0x310>)
 800ddce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	460d      	mov	r5, r1
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	4649      	mov	r1, r9
 800ddda:	f7f2 fc5d 	bl	8000698 <__aeabi_dmul>
 800ddde:	e0a7      	b.n	800df30 <__ieee754_log+0x2a8>
 800dde0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dde4:	f7f2 faa2 	bl	800032c <__adddf3>
 800dde8:	4602      	mov	r2, r0
 800ddea:	460b      	mov	r3, r1
 800ddec:	4650      	mov	r0, sl
 800ddee:	4659      	mov	r1, fp
 800ddf0:	f7f2 fd7c 	bl	80008ec <__aeabi_ddiv>
 800ddf4:	ec41 0b18 	vmov	d8, r0, r1
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f7f2 fbe3 	bl	80005c4 <__aeabi_i2d>
 800ddfe:	ec53 2b18 	vmov	r2, r3, d8
 800de02:	ec41 0b19 	vmov	d9, r0, r1
 800de06:	ec51 0b18 	vmov	r0, r1, d8
 800de0a:	f7f2 fc45 	bl	8000698 <__aeabi_dmul>
 800de0e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800de12:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800de16:	9301      	str	r3, [sp, #4]
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4680      	mov	r8, r0
 800de1e:	4689      	mov	r9, r1
 800de20:	f7f2 fc3a 	bl	8000698 <__aeabi_dmul>
 800de24:	a360      	add	r3, pc, #384	; (adr r3, 800dfa8 <__ieee754_log+0x320>)
 800de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2a:	4606      	mov	r6, r0
 800de2c:	460f      	mov	r7, r1
 800de2e:	f7f2 fc33 	bl	8000698 <__aeabi_dmul>
 800de32:	a35f      	add	r3, pc, #380	; (adr r3, 800dfb0 <__ieee754_log+0x328>)
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	f7f2 fa78 	bl	800032c <__adddf3>
 800de3c:	4632      	mov	r2, r6
 800de3e:	463b      	mov	r3, r7
 800de40:	f7f2 fc2a 	bl	8000698 <__aeabi_dmul>
 800de44:	a35c      	add	r3, pc, #368	; (adr r3, 800dfb8 <__ieee754_log+0x330>)
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	f7f2 fa6f 	bl	800032c <__adddf3>
 800de4e:	4632      	mov	r2, r6
 800de50:	463b      	mov	r3, r7
 800de52:	f7f2 fc21 	bl	8000698 <__aeabi_dmul>
 800de56:	a35a      	add	r3, pc, #360	; (adr r3, 800dfc0 <__ieee754_log+0x338>)
 800de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5c:	f7f2 fa66 	bl	800032c <__adddf3>
 800de60:	4642      	mov	r2, r8
 800de62:	464b      	mov	r3, r9
 800de64:	f7f2 fc18 	bl	8000698 <__aeabi_dmul>
 800de68:	a357      	add	r3, pc, #348	; (adr r3, 800dfc8 <__ieee754_log+0x340>)
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	4680      	mov	r8, r0
 800de70:	4689      	mov	r9, r1
 800de72:	4630      	mov	r0, r6
 800de74:	4639      	mov	r1, r7
 800de76:	f7f2 fc0f 	bl	8000698 <__aeabi_dmul>
 800de7a:	a355      	add	r3, pc, #340	; (adr r3, 800dfd0 <__ieee754_log+0x348>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	f7f2 fa54 	bl	800032c <__adddf3>
 800de84:	4632      	mov	r2, r6
 800de86:	463b      	mov	r3, r7
 800de88:	f7f2 fc06 	bl	8000698 <__aeabi_dmul>
 800de8c:	a352      	add	r3, pc, #328	; (adr r3, 800dfd8 <__ieee754_log+0x350>)
 800de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de92:	f7f2 fa4b 	bl	800032c <__adddf3>
 800de96:	4632      	mov	r2, r6
 800de98:	463b      	mov	r3, r7
 800de9a:	f7f2 fbfd 	bl	8000698 <__aeabi_dmul>
 800de9e:	460b      	mov	r3, r1
 800dea0:	4602      	mov	r2, r0
 800dea2:	4649      	mov	r1, r9
 800dea4:	4640      	mov	r0, r8
 800dea6:	f7f2 fa41 	bl	800032c <__adddf3>
 800deaa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800deae:	9b01      	ldr	r3, [sp, #4]
 800deb0:	3551      	adds	r5, #81	; 0x51
 800deb2:	431d      	orrs	r5, r3
 800deb4:	2d00      	cmp	r5, #0
 800deb6:	4680      	mov	r8, r0
 800deb8:	4689      	mov	r9, r1
 800deba:	dd48      	ble.n	800df4e <__ieee754_log+0x2c6>
 800debc:	4b4e      	ldr	r3, [pc, #312]	; (800dff8 <__ieee754_log+0x370>)
 800debe:	2200      	movs	r2, #0
 800dec0:	4650      	mov	r0, sl
 800dec2:	4659      	mov	r1, fp
 800dec4:	f7f2 fbe8 	bl	8000698 <__aeabi_dmul>
 800dec8:	4652      	mov	r2, sl
 800deca:	465b      	mov	r3, fp
 800decc:	f7f2 fbe4 	bl	8000698 <__aeabi_dmul>
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	4606      	mov	r6, r0
 800ded6:	460f      	mov	r7, r1
 800ded8:	4640      	mov	r0, r8
 800deda:	4649      	mov	r1, r9
 800dedc:	f7f2 fa26 	bl	800032c <__adddf3>
 800dee0:	ec53 2b18 	vmov	r2, r3, d8
 800dee4:	f7f2 fbd8 	bl	8000698 <__aeabi_dmul>
 800dee8:	4680      	mov	r8, r0
 800deea:	4689      	mov	r9, r1
 800deec:	b964      	cbnz	r4, 800df08 <__ieee754_log+0x280>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4630      	mov	r0, r6
 800def4:	4639      	mov	r1, r7
 800def6:	f7f2 fa17 	bl	8000328 <__aeabi_dsub>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	4650      	mov	r0, sl
 800df00:	4659      	mov	r1, fp
 800df02:	f7f2 fa11 	bl	8000328 <__aeabi_dsub>
 800df06:	e6d6      	b.n	800dcb6 <__ieee754_log+0x2e>
 800df08:	a321      	add	r3, pc, #132	; (adr r3, 800df90 <__ieee754_log+0x308>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	ec51 0b19 	vmov	r0, r1, d9
 800df12:	f7f2 fbc1 	bl	8000698 <__aeabi_dmul>
 800df16:	a320      	add	r3, pc, #128	; (adr r3, 800df98 <__ieee754_log+0x310>)
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	4604      	mov	r4, r0
 800df1e:	460d      	mov	r5, r1
 800df20:	ec51 0b19 	vmov	r0, r1, d9
 800df24:	f7f2 fbb8 	bl	8000698 <__aeabi_dmul>
 800df28:	4642      	mov	r2, r8
 800df2a:	464b      	mov	r3, r9
 800df2c:	f7f2 f9fe 	bl	800032c <__adddf3>
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
 800df34:	4630      	mov	r0, r6
 800df36:	4639      	mov	r1, r7
 800df38:	f7f2 f9f6 	bl	8000328 <__aeabi_dsub>
 800df3c:	4652      	mov	r2, sl
 800df3e:	465b      	mov	r3, fp
 800df40:	f7f2 f9f2 	bl	8000328 <__aeabi_dsub>
 800df44:	4602      	mov	r2, r0
 800df46:	460b      	mov	r3, r1
 800df48:	4620      	mov	r0, r4
 800df4a:	4629      	mov	r1, r5
 800df4c:	e7d9      	b.n	800df02 <__ieee754_log+0x27a>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4650      	mov	r0, sl
 800df54:	4659      	mov	r1, fp
 800df56:	f7f2 f9e7 	bl	8000328 <__aeabi_dsub>
 800df5a:	ec53 2b18 	vmov	r2, r3, d8
 800df5e:	f7f2 fb9b 	bl	8000698 <__aeabi_dmul>
 800df62:	4606      	mov	r6, r0
 800df64:	460f      	mov	r7, r1
 800df66:	2c00      	cmp	r4, #0
 800df68:	f43f af23 	beq.w	800ddb2 <__ieee754_log+0x12a>
 800df6c:	a308      	add	r3, pc, #32	; (adr r3, 800df90 <__ieee754_log+0x308>)
 800df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df72:	ec51 0b19 	vmov	r0, r1, d9
 800df76:	f7f2 fb8f 	bl	8000698 <__aeabi_dmul>
 800df7a:	a307      	add	r3, pc, #28	; (adr r3, 800df98 <__ieee754_log+0x310>)
 800df7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df80:	4604      	mov	r4, r0
 800df82:	460d      	mov	r5, r1
 800df84:	ec51 0b19 	vmov	r0, r1, d9
 800df88:	e727      	b.n	800ddda <__ieee754_log+0x152>
 800df8a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800dfe0 <__ieee754_log+0x358>
 800df8e:	e694      	b.n	800dcba <__ieee754_log+0x32>
 800df90:	fee00000 	.word	0xfee00000
 800df94:	3fe62e42 	.word	0x3fe62e42
 800df98:	35793c76 	.word	0x35793c76
 800df9c:	3dea39ef 	.word	0x3dea39ef
 800dfa0:	55555555 	.word	0x55555555
 800dfa4:	3fd55555 	.word	0x3fd55555
 800dfa8:	df3e5244 	.word	0xdf3e5244
 800dfac:	3fc2f112 	.word	0x3fc2f112
 800dfb0:	96cb03de 	.word	0x96cb03de
 800dfb4:	3fc74664 	.word	0x3fc74664
 800dfb8:	94229359 	.word	0x94229359
 800dfbc:	3fd24924 	.word	0x3fd24924
 800dfc0:	55555593 	.word	0x55555593
 800dfc4:	3fe55555 	.word	0x3fe55555
 800dfc8:	d078c69f 	.word	0xd078c69f
 800dfcc:	3fc39a09 	.word	0x3fc39a09
 800dfd0:	1d8e78af 	.word	0x1d8e78af
 800dfd4:	3fcc71c5 	.word	0x3fcc71c5
 800dfd8:	9997fa04 	.word	0x9997fa04
 800dfdc:	3fd99999 	.word	0x3fd99999
	...
 800dfe8:	c3500000 	.word	0xc3500000
 800dfec:	43500000 	.word	0x43500000
 800dff0:	7fefffff 	.word	0x7fefffff
 800dff4:	3ff00000 	.word	0x3ff00000
 800dff8:	3fe00000 	.word	0x3fe00000

0800dffc <_init>:
 800dffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffe:	bf00      	nop
 800e000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e002:	bc08      	pop	{r3}
 800e004:	469e      	mov	lr, r3
 800e006:	4770      	bx	lr

0800e008 <_fini>:
 800e008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e00a:	bf00      	nop
 800e00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e00e:	bc08      	pop	{r3}
 800e010:	469e      	mov	lr, r3
 800e012:	4770      	bx	lr
